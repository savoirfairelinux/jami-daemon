{
  "comments": [
    {
      "key": {
        "uuid": "71651041_d1bc362b",
        "filename": "src/call_factory.h",
        "patchSetId": 9
      },
      "lineNbr": 50,
      "author": {
        "id": 856
      },
      "writtenOn": "2021-03-04T22:35:06Z",
      "side": 1,
      "message": "Why this method is public? Why do we need 2 APIs to do the same job? The templated version is th only one used in the code.\nEither assume that for now we only support SIP and only expose newSipCall() or stay generic and only expose  std:shared_ptr\u003cC\u003enewCall(). Having more than one API for the same result only add confusion.\nFurthermore, making reference to SIPAccount and and SIPCall here will add unnecessary (direct or indirect) dependencies on these classes (even if they are forward declared).",
      "revId": "b3c4f995d09d1807bca7f8a617c23ea1525bb9d1",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65d631a2_5f713968",
        "filename": "src/call_factory.h",
        "patchSetId": 9
      },
      "lineNbr": 50,
      "author": {
        "id": 6
      },
      "writtenOn": "2021-03-05T19:12:29Z",
      "side": 1,
      "message": "Agreed. Since Call types are concrete, I moved everything to newSipCall and fully removed the template",
      "parentUuid": "71651041_d1bc362b",
      "revId": "b3c4f995d09d1807bca7f8a617c23ea1525bb9d1",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9377ca2e_39b23846",
        "filename": "src/call_factory.h",
        "patchSetId": 9
      },
      "lineNbr": 90,
      "author": {
        "id": 856
      },
      "writtenOn": "2021-03-04T23:10:53Z",
      "side": 1,
      "message": "LINK_TYPE reappeared ðŸ˜‚\n\nSeriously, if we just take the time to carefully think about it, this class (at least its declaration) doesn\u0027t even need to know about the call type (or link type). All call type related will go in the implementation(s) of the this base class.",
      "revId": "b3c4f995d09d1807bca7f8a617c23ea1525bb9d1",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a071dff1_082a68d0",
        "filename": "src/call_factory.h",
        "patchSetId": 9
      },
      "lineNbr": 90,
      "author": {
        "id": 6
      },
      "writtenOn": "2021-03-05T00:52:38Z",
      "side": 1,
      "message": "It reappeared, but unlike before, an arbitrary Call sub-type is not technically required, to have LINK_TYPE unless getCall\u003cType\u003e is used.\n\nThis method creates value for the user, and allows to factorize more logic in this class, in a type-agnostic way.\n\nOtherwise, every user is required to be aware of the enum corresponding to the desired Call sub-type. So by removing this logic, we would just push the complexity to every user.",
      "parentUuid": "9377ca2e_39b23846",
      "revId": "b3c4f995d09d1807bca7f8a617c23ea1525bb9d1",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a",
      "unresolved": true
    }
  ]
}