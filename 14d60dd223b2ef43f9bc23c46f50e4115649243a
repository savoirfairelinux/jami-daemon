{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "015eabb6_90df227f",
        "filename": "src/connectivity/connectionmanager.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1227,
      "author": {
        "id": 5
      },
      "writtenOn": "2023-06-13T20:29:31Z",
      "side": 1,
      "message": "MINOR SonarQube violation:\n\n\n\u0027find\u0027 called with a string literal consisting of a single character; consider using the more effective overload accepting a character\n\n\nRead more: https://sonar-jami.savoirfairelinux.net/coding_rules#rule_key\u003dClangTidy%3Aperformance-faster-string-find",
      "tag": "autogenerated:sonar",
      "revId": "14d60dd223b2ef43f9bc23c46f50e4115649243a",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5bec7e9d_a53f6111",
        "filename": "src/connectivity/connectionmanager.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1228,
      "author": {
        "id": 5
      },
      "writtenOn": "2023-06-13T20:29:31Z",
      "side": 1,
      "message": "MINOR SonarQube violation:\n\n\n\u0027find\u0027 called with a string literal consisting of a single character; consider using the more effective overload accepting a character\n\n\nRead more: https://sonar-jami.savoirfairelinux.net/coding_rules#rule_key\u003dClangTidy%3Aperformance-faster-string-find",
      "tag": "autogenerated:sonar",
      "revId": "14d60dd223b2ef43f9bc23c46f50e4115649243a",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d98a625_cd70de1c",
        "filename": "src/connectivity/multiplexed_socket.cpp",
        "patchSetId": 1
      },
      "lineNbr": 688,
      "author": {
        "id": 5
      },
      "writtenOn": "2023-06-13T20:29:31Z",
      "side": 1,
      "message": "MINOR SonarQube violation:\n\n\n\u0027find\u0027 called with a string literal consisting of a single character; consider using the more effective overload accepting a character\n\n\nRead more: https://sonar-jami.savoirfairelinux.net/coding_rules#rule_key\u003dClangTidy%3Aperformance-faster-string-find",
      "tag": "autogenerated:sonar",
      "revId": "14d60dd223b2ef43f9bc23c46f50e4115649243a",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6b1fed0_2a461611",
        "filename": "src/connectivity/multiplexed_socket.cpp",
        "patchSetId": 1
      },
      "lineNbr": 692,
      "author": {
        "id": 5
      },
      "writtenOn": "2023-06-13T20:29:31Z",
      "side": 1,
      "message": "MINOR SonarQube violation:\n\n\nan integer is interpreted as a character code when assigning it to a string; if this is intended, cast the integer to the appropriate character type; if you want a string representation, use the appropriate conversion facility\n\n\nRead more: https://sonar-jami.savoirfairelinux.net/coding_rules#rule_key\u003dClangTidy%3Abugprone-string-integer-assignment",
      "tag": "autogenerated:sonar",
      "revId": "14d60dd223b2ef43f9bc23c46f50e4115649243a",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a"
    }
  ]
}