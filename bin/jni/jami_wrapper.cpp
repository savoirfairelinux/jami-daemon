/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION) || defined(DEBUG_DIRECTOR_THREAD_NAME)
#include <iostream>
#endif

#include <exception>

#if defined(SWIG_JAVA_USE_THREAD_NAME)

#if !defined(SWIG_JAVA_GET_THREAD_NAME)
namespace Swig {
  SWIGINTERN int GetThreadName(char *name, size_t len);
}

#if defined(__linux__)

#include <sys/prctl.h>
SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  (void)len;
#if defined(PR_GET_NAME)
  return prctl(PR_GET_NAME, (unsigned long)name, 0, 0, 0);
#else
  (void)name;
  return 1;
#endif
}

#elif defined(__unix__) || defined(__APPLE__)

#include <pthread.h>
SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  return pthread_getname_np(pthread_self(), name, len);
}

#else

SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  (void)len;
  (void)name;
  return 1;
}
#endif

#endif

#endif

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
        JavaVMAttachArgs args;
        args.version = JNI_VERSION_1_2;
        args.group = NULL;
        args.name = NULL;
#if defined(SWIG_JAVA_USE_THREAD_NAME)
        char thread_name[64];  // MAX_TASK_COMM_LEN=16 is hard-coded in the Linux kernel and MacOS has MAXTHREADNAMESIZE=64.
        if (Swig::GetThreadName(thread_name, sizeof(thread_name)) == 0) {
          args.name = thread_name;
#if defined(DEBUG_DIRECTOR_THREAD_NAME)
          std::cout << "JNIEnvWrapper: thread name: " << thread_name << std::endl;
        } else {
          std::cout << "JNIEnvWrapper: Couldn't set Java thread name" << std::endl;
#endif
        }
#endif
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, &args);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, &args);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    // Return a C string of the exception message in the jthrowable passed in the constructor
    // If no message is available, null_string is return instead
    const char *message(const char *null_string = "Could not get exception message in JavaExceptionMessage") const {
      return message_.c_str(null_string);
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : jenv_(jenv), throwable_(throwable), classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message(0));
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : jenv_(0), throwable_(0), classname_(0), msg_(msg ? copystr(msg) : 0) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_ ? msg_ : "Unspecified DirectorException message";
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void throwException(JNIEnv *jenv) const {
      if (jenv) {
        if (jenv == jenv_ && throwable_) {
          // Throw original exception if not already pending
          jthrowable throwable = jenv->ExceptionOccurred();
          if (throwable && jenv->IsSameObject(throwable, throwable_) == JNI_FALSE) {
            jenv->ExceptionClear();
            throwable = 0;
          }
          if (!throwable)
            jenv->Throw(throwable_);
        } else {
          // Try and reconstruct original exception, but original stacktrace is not reconstructed
          jenv->ExceptionClear();

          jmethodID ctorMethodID = 0;
          jclass throwableclass = 0;
          if (classname_) {
            throwableclass = jenv->FindClass(classname_);
            if (throwableclass)
              ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
          }

          if (ctorMethodID) {
            jenv->ThrowNew(throwableclass, what());
          } else {
            SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
          }
        }
      }
    }

    // Deprecated - use throwException
    void raiseJavaException(JNIEnv *jenv) const {
      throwException(jenv);
    }

    // Create and throw the DirectorException
    static void raise(JNIEnv *jenv, jthrowable throwable) {
      throw DirectorException(jenv, throwable);
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    JNIEnv *jenv_;
    jthrowable throwable_;
    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  // Note side effect of clearing any pending exceptions
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}

namespace Swig {
  namespace {
    jclass jclass_JamiServiceJNI = NULL;
    jmethodID director_method_ids[76];
  }
}

#include <string>


#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif


#include <typeinfo>
#include <stdexcept>


#include <map>
#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <stdint.h>		// Use the C99 official header



#include <android/log.h>


SWIGINTERN std::map< std::string,std::string,std::less< std::string > >::iterator std_map_Sl_std_string_Sc_std_string_Sg__iterator_getNextUnchecked(std::map< std::string,std::string >::iterator *self){
          std::map< std::string, std::string, std::less< std::string > >::iterator copy = (*self);
          return ++copy;
        }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__iterator_isNot(std::map< std::string,std::string >::iterator const *self,std::map< std::string,std::string >::iterator other){
          return (*self != other);
        }
SWIGINTERN std::string std_map_Sl_std_string_Sc_std_string_Sg__iterator_getKey(std::map< std::string,std::string >::iterator const *self){
          return (*self)->first;
        }
SWIGINTERN std::string std_map_Sl_std_string_Sc_std_string_Sg__iterator_getValue(std::map< std::string,std::string >::iterator const *self){
          return (*self)->second;
        }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__iterator_setValue(std::map< std::string,std::string >::iterator *self,std::string const &newValue){
          (*self)->second = newValue;
        }

/* Check for overflow converting to Java int (always signed 32-bit) from (unsigned variable-bit) size_t */
SWIGINTERN jint SWIG_JavaIntFromSize_t(size_t size) {
  static const jint JINT_MAX = 0x7FFFFFFF;
  return (size > (size_t)JINT_MAX) ? -1 : (jint)size;
}


  SWIGINTERN jint SWIG_MapSize(size_t size) {
    jint sz = SWIG_JavaIntFromSize_t(size);
    if (sz == -1) {
      throw std::out_of_range("map size is too large to fit into a Java int");
    }

    return sz;
  }

SWIGINTERN jint std_map_Sl_std_string_Sc_std_string_Sg__sizeImpl(std::map< std::string,std::string > const *self){
        return SWIG_MapSize(self->size());
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__containsImpl(std::map< std::string,std::string > *self,std::string const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__putUnchecked(std::map< std::string,std::string > *self,std::string const &key,std::string const &value){
        (*self)[key] = value;
      }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__removeUnchecked(std::map< std::string,std::string > *self,std::map< std::string,std::string,std::less< std::string > >::iterator const itr){
        self->erase(itr);
      }
SWIGINTERN std::vector< std::string > std_map_Sl_std_string_Sc_std_string_Sg__keys(std::map< std::string,std::string > const *self){
        std::vector<std::string> k;
        k.reserve(self->size());
        for (const auto& i : *self) {
            k.emplace_back(i.first);
        }
        return k;
    }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__setRaw(std::map< std::string,std::string > *self,std::string const &key,std::vector< uint8_t > const &value){
        (*self)[key] = std::string(value.data(), value.data()+value.size());
    }
SWIGINTERN std::vector< uint8_t > std_map_Sl_std_string_Sc_std_string_Sg__getRaw(std::map< std::string,std::string > *self,std::string const &key){
        auto& v = self->at(key);
        return {v.begin(), v.end()};
    }

SWIGINTERN jint SWIG_VectorSize(size_t size) {
  jint sz = SWIG_JavaIntFromSize_t(size);
  if (sz == -1)
    throw std::out_of_range("vector size is too large to fit into a Java int");
  return sz;
}

SWIGINTERN std::vector< std::string > *new_std_vector_Sl_std_string_Sg___SWIG_2(jint count,std::string const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< std::string >(static_cast<std::vector< std::string >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_std_string_Sg__doSize(std::vector< std::string > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__doAdd__SWIG_0(std::vector< std::string > *self,std::vector< std::string >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__doAdd__SWIG_1(std::vector< std::string > *self,jint index,std::vector< std::string >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__doRemove(std::vector< std::string > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          std::string const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg__doGet(std::vector< std::string > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__doSet(std::vector< std::string > *self,jint index,std::vector< std::string >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          std::string const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__doRemoveRange(std::vector< std::string > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::map< std::string,std::string > > *new_std_vector_Sl_std_map_Sl_std_string_Sc_std_string_Sg__Sg___SWIG_2(jint count,std::map< std::string,std::string,std::less< std::string > > const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< std::map< std::string,std::string,std::less< std::string > > >(static_cast<std::vector< std::map< std::string,std::string,std::less< std::string > > >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_std_map_Sl_std_string_Sc_std_string_Sg__Sg__doSize(std::vector< std::map< std::string,std::string > > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_std_map_Sl_std_string_Sc_std_string_Sg__Sg__doAdd__SWIG_0(std::vector< std::map< std::string,std::string > > *self,std::vector< std::map< std::string,std::string > >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_std_map_Sl_std_string_Sc_std_string_Sg__Sg__doAdd__SWIG_1(std::vector< std::map< std::string,std::string > > *self,jint index,std::vector< std::map< std::string,std::string > >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::map< std::string,std::string > >::value_type std_vector_Sl_std_map_Sl_std_string_Sc_std_string_Sg__Sg__doRemove(std::vector< std::map< std::string,std::string > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          std::map< std::string,std::string,std::less< std::string > > const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::map< std::string,std::string > >::value_type const &std_vector_Sl_std_map_Sl_std_string_Sc_std_string_Sg__Sg__doGet(std::vector< std::map< std::string,std::string > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< std::map< std::string,std::string > >::value_type std_vector_Sl_std_map_Sl_std_string_Sc_std_string_Sg__Sg__doSet(std::vector< std::map< std::string,std::string > > *self,jint index,std::vector< std::map< std::string,std::string > >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          std::map< std::string,std::string,std::less< std::string > > const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_std_map_Sl_std_string_Sc_std_string_Sg__Sg__doRemoveRange(std::vector< std::map< std::string,std::string > > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::map< std::string,int,std::less< std::string > >::iterator std_map_Sl_std_string_Sc_int_Sg__iterator_getNextUnchecked(std::map< std::string,int >::iterator *self){
          std::map< std::string, int, std::less< std::string > >::iterator copy = (*self);
          return ++copy;
        }
SWIGINTERN bool std_map_Sl_std_string_Sc_int_Sg__iterator_isNot(std::map< std::string,int >::iterator const *self,std::map< std::string,int >::iterator other){
          return (*self != other);
        }
SWIGINTERN std::string std_map_Sl_std_string_Sc_int_Sg__iterator_getKey(std::map< std::string,int >::iterator const *self){
          return (*self)->first;
        }
SWIGINTERN int std_map_Sl_std_string_Sc_int_Sg__iterator_getValue(std::map< std::string,int >::iterator const *self){
          return (*self)->second;
        }
SWIGINTERN void std_map_Sl_std_string_Sc_int_Sg__iterator_setValue(std::map< std::string,int >::iterator *self,int const &newValue){
          (*self)->second = newValue;
        }
SWIGINTERN jint std_map_Sl_std_string_Sc_int_Sg__sizeImpl(std::map< std::string,int > const *self){
        return SWIG_MapSize(self->size());
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_int_Sg__containsImpl(std::map< std::string,int > *self,std::string const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN void std_map_Sl_std_string_Sc_int_Sg__putUnchecked(std::map< std::string,int > *self,std::string const &key,int const &value){
        (*self)[key] = value;
      }
SWIGINTERN void std_map_Sl_std_string_Sc_int_Sg__removeUnchecked(std::map< std::string,int > *self,std::map< std::string,int,std::less< std::string > >::iterator const itr){
        self->erase(itr);
      }
SWIGINTERN std::vector< int32_t > *new_std_vector_Sl_int32_t_Sg___SWIG_2(jint count,int const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< int >(static_cast<std::vector< int >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_int32_t_Sg__doSize(std::vector< int32_t > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_int32_t_Sg__doAdd__SWIG_0(std::vector< int32_t > *self,std::vector< int >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_int32_t_Sg__doAdd__SWIG_1(std::vector< int32_t > *self,jint index,std::vector< int >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< int >::value_type std_vector_Sl_int32_t_Sg__doRemove(std::vector< int32_t > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          int const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< int >::value_type const &std_vector_Sl_int32_t_Sg__doGet(std::vector< int32_t > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< int >::value_type std_vector_Sl_int32_t_Sg__doSet(std::vector< int32_t > *self,jint index,std::vector< int >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          int const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_int32_t_Sg__doRemoveRange(std::vector< int32_t > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< uint32_t > *new_std_vector_Sl_uint32_t_Sg___SWIG_2(jint count,unsigned int const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< unsigned int >(static_cast<std::vector< unsigned int >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_uint32_t_Sg__doSize(std::vector< uint32_t > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_uint32_t_Sg__doAdd__SWIG_0(std::vector< uint32_t > *self,std::vector< unsigned int >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_uint32_t_Sg__doAdd__SWIG_1(std::vector< uint32_t > *self,jint index,std::vector< unsigned int >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< unsigned int >::value_type std_vector_Sl_uint32_t_Sg__doRemove(std::vector< uint32_t > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          unsigned int const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< unsigned int >::value_type const &std_vector_Sl_uint32_t_Sg__doGet(std::vector< uint32_t > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< unsigned int >::value_type std_vector_Sl_uint32_t_Sg__doSet(std::vector< uint32_t > *self,jint index,std::vector< unsigned int >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          unsigned int const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_uint32_t_Sg__doRemoveRange(std::vector< uint32_t > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< uint8_t > *new_std_vector_Sl_uint8_t_Sg___SWIG_2(jint count,unsigned char const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< unsigned char >(static_cast<std::vector< unsigned char >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_uint8_t_Sg__doSize(std::vector< uint8_t > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__doAdd__SWIG_0(std::vector< uint8_t > *self,std::vector< unsigned char >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__doAdd__SWIG_1(std::vector< uint8_t > *self,jint index,std::vector< unsigned char >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< unsigned char >::value_type std_vector_Sl_uint8_t_Sg__doRemove(std::vector< uint8_t > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          unsigned char const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< unsigned char >::value_type const &std_vector_Sl_uint8_t_Sg__doGet(std::vector< uint8_t > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< unsigned char >::value_type std_vector_Sl_uint8_t_Sg__doSet(std::vector< uint8_t > *self,jint index,std::vector< unsigned char >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          unsigned char const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__doRemoveRange(std::vector< uint8_t > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< float > *new_std_vector_Sl_float_Sg___SWIG_2(jint count,float const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< float >(static_cast<std::vector< float >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_float_Sg__doSize(std::vector< float > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_float_Sg__doAdd__SWIG_0(std::vector< float > *self,std::vector< float >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_float_Sg__doAdd__SWIG_1(std::vector< float > *self,jint index,std::vector< float >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< float >::value_type std_vector_Sl_float_Sg__doRemove(std::vector< float > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          float const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< float >::value_type const &std_vector_Sl_float_Sg__doGet(std::vector< float > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< float >::value_type std_vector_Sl_float_Sg__doSet(std::vector< float > *self,jint index,std::vector< float >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          float const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_float_Sg__doRemoveRange(std::vector< float > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }


#include <functional>



#include "dring/dring.h"



#include "dring/dring.h"
#include "dring/callmanager_interface.h"

class Callback {
public:
    virtual ~Callback() {}
    virtual void callStateChanged(const std::string& call_id, const std::string& state, int detail_code){}
    virtual void transferFailed(void){}
    virtual void transferSucceeded(void){}
    virtual void recordPlaybackStopped(const std::string& path){}
    virtual void voiceMailNotify(const std::string& accountId, int newCount, int oldCount, int urgentCount){}
    virtual void incomingMessage(const std::string& id, const std::string& from, const std::map<std::string, std::string>& messages){}
    virtual void incomingCall(const std::string& account_id, const std::string& call_id, const std::string& from){}
    virtual void recordPlaybackFilepath(const std::string& id, const std::string& filename){}
    virtual void conferenceCreated(const std::string& conf_id){}
    virtual void conferenceChanged(const std::string& conf_id, const std::string& state){}
    virtual void conferenceRemoved(const std::string& conf_id){}
    virtual void updatePlaybackScale(const std::string& filepath, int position, int scale){}
    virtual void newCall(const std::string& account_id, const std::string& call_id, const std::string& to){}
    virtual void sipCallStateChange(const std::string& call_id, const std::string& state, int code){}
    virtual void recordingStateChanged(const std::string& call_id, int code){}
    virtual void recordStateChange(const std::string& call_id, int state){}
    virtual void onRtcpReportReceived(const std::string& call_id, const std::map<std::string, int>& stats){}
    virtual void onConferenceInfosUpdated(const std::string& confId, const std::vector<std::map<std::string, std::string>>& infos) {}
    virtual void peerHold(const std::string& call_id, bool holding){}
    virtual void connectionUpdate(const std::string& id, int state){}
    virtual void remoteRecordingChanged(const std::string& call_id, const std::string& peer_number, bool state){}
};




#include "dring/dring.h"
#include "dring/configurationmanager_interface.h"

class ConfigurationCallback {
public:
    virtual ~ConfigurationCallback(){}
    virtual void volumeChanged(const std::string& device, int value){}
    virtual void accountsChanged(void){}
    virtual void historyChanged(void){}
    virtual void stunStatusFailure(const std::string& account_id){}
    virtual void accountDetailsChanged(const std::string& account_id, const std::map<std::string, std::string>& details){}
    virtual void registrationStateChanged(const std::string& account_id, const std::string& state, int code, const std::string& detail_str){}
    virtual void volatileAccountDetailsChanged(const std::string& account_id, const std::map<std::string, std::string>& details){}
    virtual void incomingAccountMessage(const std::string& /*account_id*/, const std::string& /*from*/, const std::string& /*message_id*/, const std::map<std::string, std::string>& /*payload*/){}
    virtual void accountMessageStatusChanged(const std::string& /*account_id*/, const std::string& /*conversationId*/, const std::string& /*peer*/, const std::string& /*message_id*/, int /*state*/){}
    virtual void profileReceived(const std::string& /*account_id*/, const std::string& /*from*/, const std::string& /*path*/){}
    virtual void composingStatusChanged(const std::string& /*account_id*/, const std::string& /*convId*/, const std::string& /*from*/, int /*state*/){}
    virtual void knownDevicesChanged(const std::string& /*account_id*/, const std::map<std::string, std::string>& /*devices*/){}
    virtual void exportOnRingEnded(const std::string& /*account_id*/, int /*state*/, const std::string& /*pin*/){}

    virtual void incomingTrustRequest(const std::string& /*account_id*/, const std::string& /*conversationId*/, const std::string& /*from*/, const std::vector<uint8_t>& /*payload*/, time_t received){}
    virtual void contactAdded(const std::string& /*account_id*/, const std::string& /*uri*/, bool confirmed){}
    virtual void contactRemoved(const std::string& /*account_id*/, const std::string& /*uri*/, bool banned){}

    virtual void certificatePinned(const std::string& /*certId*/){}
    virtual void certificatePathPinned(const std::string& /*path*/, const std::vector<std::string>& /*certId*/){}
    virtual void certificateExpired(const std::string& /*certId*/){}
    virtual void certificateStateChanged(const std::string& /*account_id*/, const std::string& /*certId*/, const std::string& /*state*/){}

    virtual void errorAlert(int alert){}
    virtual void getHardwareAudioFormat(std::vector<int32_t>* /*params_ret*/){}
    virtual void getAppDataPath(const std::string& /* name */, std::vector<std::string>* /*path_ret*/){}
    virtual void getDeviceName(std::vector<std::string>* /*name_ret*/){}

    virtual void nameRegistrationEnded(const std::string& /*account_id*/, int state, const std::string& /*name*/){}
    virtual void registeredNameFound(const std::string& /*account_id*/, int state, const std::string& /*address*/, const std::string& /*name*/){}
    virtual void userSearchEnded(const std::string& /*account_id*/, int state, const std::string& /*query*/, const std::vector<std::map<std::string, std::string>>& /*results*/){}

    virtual void migrationEnded(const std::string& /*accountId*/, const std::string& /*state*/){}
    virtual void deviceRevocationEnded(const std::string& /*accountId*/, const std::string& /*device*/, int /*status*/){}
    virtual void accountProfileReceived(const std::string& /*accountId*/, const std::string& /*displayName*/, const std::string& /*photo*/){}

    virtual void hardwareDecodingChanged(bool /*state*/){}
    virtual void hardwareEncodingChanged(bool /*state*/){}

    virtual void audioMeter(const std::string& /*id*/, float /*level*/){}
    virtual void messageSend(const std::string& /*message*/){}
};

SWIGINTERN std::vector< DRing::Message > *new_std_vector_Sl_DRing_Message_Sg___SWIG_2(jint count,DRing::Message const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< DRing::Message >(static_cast<std::vector< DRing::Message >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_DRing_Message_Sg__doSize(std::vector< DRing::Message > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_DRing_Message_Sg__doAdd__SWIG_0(std::vector< DRing::Message > *self,std::vector< DRing::Message >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_DRing_Message_Sg__doAdd__SWIG_1(std::vector< DRing::Message > *self,jint index,std::vector< DRing::Message >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< DRing::Message >::value_type std_vector_Sl_DRing_Message_Sg__doRemove(std::vector< DRing::Message > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          DRing::Message const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< DRing::Message >::value_type const &std_vector_Sl_DRing_Message_Sg__doGet(std::vector< DRing::Message > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< DRing::Message >::value_type std_vector_Sl_DRing_Message_Sg__doSet(std::vector< DRing::Message > *self,jint index,std::vector< DRing::Message >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          DRing::Message const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_DRing_Message_Sg__doRemoveRange(std::vector< DRing::Message > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }

#include "dring/dring.h"
#include "dring/datatransfer_interface.h"

class DataTransferCallback {
public:
    virtual ~DataTransferCallback(){}
    virtual void dataTransferEvent(const std::string& accountId, const std::string& conversationId, const DRing::DataTransferId transferId, int eventCode){}
};



#include "dring/dring.h"
#include "dring/presencemanager_interface.h"

class PresenceCallback {
public:
    virtual ~PresenceCallback(){}
    virtual void newServerSubscriptionRequest(const std::string& /*remote*/){}
    virtual void serverError(const std::string& /*account_id*/, const std::string& /*error*/, const std::string& /*msg*/){}
    virtual void newBuddyNotification(const std::string& /*account_id*/, const std::string& /*buddy_uri*/, int /*status*/, const std::string& /*line_status*/){}
    virtual void nearbyPeerNotification(const std::string& /*account_id*/, const std::string& /*buddy_uri*/, int /*state*/, const std::string& /*displayname*/){}
    virtual void subscriptionStateChanged(const std::string& /*account_id*/, const std::string& /*buddy_uri*/, int /*state*/){}
};


#include <functional>
#include <list>
#include <mutex>
#include <utility>

#include "dring/dring.h"
#include "dring/videomanager_interface.h"
#include <android/native_window.h>
#include <android/native_window_jni.h>
#include <android/log.h>

extern "C" {
#include <libavutil/pixdesc.h>
#include <libavutil/imgutils.h>
#include <libavutil/display.h>
#include <libavcodec/avcodec.h>
}

class VideoCallback {
public:
    virtual ~VideoCallback(){}
    virtual void getCameraInfo(const std::string& device, std::vector<int> *formats, std::vector<unsigned> *sizes, std::vector<unsigned> *rates) {}
    virtual void setParameters(const std::string&, const int format, const int width, const int height, const int rate) {}
    virtual void setBitrate(const std::string&, const int bitrate) {}
    virtual void requestKeyFrame(){}
    virtual void startCapture(const std::string& camid) {}
    virtual void stopCapture() {}
    virtual void decodingStarted(const std::string& id, const std::string& shm_path, int w, int h, bool is_mixer) {}
    virtual void decodingStopped(const std::string& id, const std::string& shm_path, bool is_mixer) {}
};



std::map<ANativeWindow*, std::unique_ptr<DRing::FrameBuffer>> windows {};
std::mutex windows_mutex;

std::vector<uint8_t> workspace;
int rotAngle = 0;
AVBufferRef* rotMatrix = nullptr;

constexpr const char TAG[] = "videomanager.i";

extern JavaVM *gJavaVM;

void setRotation(int angle)
{
    if (angle == rotAngle)
        return;
    AVBufferRef* localFrameDataBuffer = angle == 0 ? nullptr : av_buffer_alloc(sizeof(int32_t) * 9);
    if (localFrameDataBuffer)
        av_display_rotation_set(reinterpret_cast<int32_t*>(localFrameDataBuffer->data), angle);

    std::swap(rotMatrix, localFrameDataBuffer);
    rotAngle = angle;

    av_buffer_unref(&localFrameDataBuffer);
}

void rotateNV21(uint8_t* yinput, uint8_t* uvinput, unsigned ystride, unsigned uvstride, unsigned width, unsigned height, int rotation, uint8_t* youtput, uint8_t* uvoutput)
{
    if (rotation == 0) {
        std::copy_n(yinput, ystride * height, youtput);
        std::copy_n(uvinput, uvstride * height, uvoutput);
        return;
    }
    if (rotation % 90 != 0 || rotation < 0 || rotation > 270) {
        __android_log_print(ANDROID_LOG_ERROR, TAG, "%u %u %d", width, height, rotation);
        return;
    }
    bool swap      = rotation % 180 != 0;
    bool xflip     = rotation % 270 != 0;
    bool yflip     = rotation >= 180;
    unsigned wOut  = swap ? height : width;
    unsigned hOut  = swap ? width  : height;

    for (unsigned j = 0; j < height; j++) {
        for (unsigned i = 0; i < width; i++) {
            unsigned yIn = j * ystride + i;
            unsigned uIn = (j >> 1) * uvstride + (i & ~1);
            unsigned vIn = uIn + 1;
            unsigned iSwapped = swap ? j : i;
            unsigned jSwapped = swap ? i : j;
            unsigned iOut     = xflip ? wOut - iSwapped - 1 : iSwapped;
            unsigned jOut     = yflip ? hOut - jSwapped - 1 : jSwapped;
            unsigned yOut = jOut * wOut + iOut;
            unsigned uOut = (jOut >> 1) * wOut + (iOut & ~1);
            unsigned vOut = uOut + 1;
            youtput[yOut] = yinput[yIn];
            uvoutput[uOut] = uvinput[uIn];
            uvoutput[vOut] = uvinput[vIn];
        }
    }
    return;
}

JNIEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_setVideoFrame(JNIEnv *jenv, jclass jcls, jbyteArray frame, int frame_size, jlong target, int w, int h, int rotation)
{
    uint8_t* f_target = (uint8_t*) ((intptr_t) target);
    if (rotation == 0)
         jenv->GetByteArrayRegion(frame, 0, frame_size, (jbyte*)f_target);
    else {
        workspace.resize(frame_size);
        jenv->GetByteArrayRegion(frame, 0, frame_size, (jbyte*)workspace.data());
        auto planeSize = w*h;
        rotateNV21(workspace.data(), workspace.data() + planeSize, w, w, w, h, rotation, f_target, f_target + planeSize);
    }
}

int AndroidFormatToAVFormat(int androidformat) {
    switch (androidformat) {
    case 17: // ImageFormat.NV21
        return AV_PIX_FMT_NV21;
    case 35: // ImageFormat.YUV_420_888
        return AV_PIX_FMT_YUV420P;
    case 39: // ImageFormat.YUV_422_888
        return AV_PIX_FMT_YUV422P;
    case 41: // ImageFormat.FLEX_RGB_888
        return AV_PIX_FMT_GBRP;
    case 42: // ImageFormat.FLEX_RGBA_8888
        return AV_PIX_FMT_GBRAP;
    default:
        return AV_PIX_FMT_NONE;
    }
}

JNIEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_captureVideoPacket(JNIEnv *jenv, jclass jcls, jobject buffer, jint size, jint offset, jboolean keyframe, jlong timestamp, jint rotation)
{
    try {
        auto frame = DRing::getNewFrame();
        if (not frame)
            return;
        auto packet = std::unique_ptr<AVPacket, void(*)(AVPacket*)>(new AVPacket, [](AVPacket* pkt){
            if (pkt) {
                av_packet_unref(pkt);
                delete pkt;
            }
        });
        av_init_packet(packet.get());
        if (keyframe)
            packet->flags = AV_PKT_FLAG_KEY;
        setRotation(rotation);
        if (rotMatrix) {
            auto buf = av_packet_new_side_data(packet.get(), AV_PKT_DATA_DISPLAYMATRIX, rotMatrix->size);
            std::copy_n(rotMatrix->data, rotMatrix->size, buf);
        }
        auto data = (uint8_t*)jenv->GetDirectBufferAddress(buffer);
        packet->data = data + offset;
        packet->size = size;
        packet->pts = timestamp;
        frame->setPacket(std::move(packet));
        DRing::publishFrame();
    } catch (const std::exception& e) {
        __android_log_print(ANDROID_LOG_ERROR, TAG, "Exception capturing video packet: %s", e.what());
    }
}

JNIEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_captureVideoFrame(JNIEnv *jenv, jclass jcls, jobject image, jint rotation)
{
    static jclass imageClass = jenv->GetObjectClass(image);
    static jmethodID imageGetFormat = jenv->GetMethodID(imageClass, "getFormat", "()I");
    static jmethodID imageGetWidth = jenv->GetMethodID(imageClass, "getWidth", "()I");
    static jmethodID imageGetHeight = jenv->GetMethodID(imageClass, "getHeight", "()I");
    static jmethodID imageGetCropRect = jenv->GetMethodID(imageClass, "getCropRect", "()Landroid/graphics/Rect;");
    static jmethodID imageGetPlanes = jenv->GetMethodID(imageClass, "getPlanes", "()[Landroid/media/Image$Plane;");
    static jmethodID imageClose = jenv->GetMethodID(imageClass, "close", "()V");

    try {
        auto frame = DRing::getNewFrame();
        if (not frame) {
            jenv->CallVoidMethod(image, imageClose);
            return;
        }
        auto avframe = frame->pointer();

        avframe->format = AndroidFormatToAVFormat(jenv->CallIntMethod(image, imageGetFormat));
        avframe->width = jenv->CallIntMethod(image, imageGetWidth);
        avframe->height = jenv->CallIntMethod(image, imageGetHeight);
        jobject crop = jenv->CallObjectMethod(image, imageGetCropRect);
        if (crop) {
            static jclass rectClass = jenv->GetObjectClass(crop);
            static jfieldID rectTopField = jenv->GetFieldID(rectClass, "top", "I");
            static jfieldID rectLeftField = jenv->GetFieldID(rectClass, "left", "I");
            static jfieldID rectBottomField = jenv->GetFieldID(rectClass, "bottom", "I");
            static jfieldID rectRightField = jenv->GetFieldID(rectClass, "right", "I");
            avframe->crop_top = jenv->GetIntField(crop, rectTopField);
            avframe->crop_left = jenv->GetIntField(crop, rectLeftField);
            avframe->crop_bottom = avframe->height - jenv->GetIntField(crop, rectBottomField);
            avframe->crop_right = avframe->width - jenv->GetIntField(crop, rectRightField);
        }

        jobjectArray planes = (jobjectArray)jenv->CallObjectMethod(image, imageGetPlanes);
        static jclass planeClass = jenv->GetObjectClass(jenv->GetObjectArrayElement(planes, 0));
        static jmethodID planeGetBuffer = jenv->GetMethodID(planeClass, "getBuffer", "()Ljava/nio/ByteBuffer;");
        static jmethodID planeGetRowStride = jenv->GetMethodID(planeClass, "getRowStride", "()I");
        static jmethodID planeGetPixelStride = jenv->GetMethodID(planeClass, "getPixelStride", "()I");

        jsize planeCount = jenv->GetArrayLength(planes);
        if (avframe->format == AV_PIX_FMT_YUV420P) {
            jobject yplane = jenv->GetObjectArrayElement(planes, 0);
            jobject uplane = jenv->GetObjectArrayElement(planes, 1);
            jobject vplane = jenv->GetObjectArrayElement(planes, 2);
            auto ydata = (uint8_t*)jenv->GetDirectBufferAddress(jenv->CallObjectMethod(yplane, planeGetBuffer));
            auto udata = (uint8_t*)jenv->GetDirectBufferAddress(jenv->CallObjectMethod(uplane, planeGetBuffer));
            auto vdata = (uint8_t*)jenv->GetDirectBufferAddress(jenv->CallObjectMethod(vplane, planeGetBuffer));
            auto ystride = jenv->CallIntMethod(yplane, planeGetRowStride);
            auto uvstride = jenv->CallIntMethod(uplane, planeGetRowStride);
            auto uvpixstride = jenv->CallIntMethod(uplane, planeGetPixelStride);

            if (uvpixstride == 1) {
                avframe->data[0] = ydata;
                avframe->linesize[0] = ystride;
                avframe->data[1] = udata;
                avframe->linesize[1] = uvstride;
                avframe->data[2] = vdata;
                avframe->linesize[2] = uvstride;
            } else if (uvpixstride == 2) {
                // False YUV420, actually NV12 or NV21
                auto uvdata = std::min(udata, vdata);
                avframe->format = uvdata == udata ? AV_PIX_FMT_NV12 : AV_PIX_FMT_NV21;
                avframe->data[0] = ydata;
                avframe->linesize[0] = ystride;
                avframe->data[1] = uvdata;
                avframe->linesize[1] = uvstride;
            }
        } else {
            for (int i=0; i<planeCount; i++) {
                jobject plane = jenv->GetObjectArrayElement(planes, i);
                //jint pxStride = jenv->CallIntMethod(plane, planeGetPixelStride);
                avframe->data[i] = (uint8_t *)jenv->GetDirectBufferAddress(jenv->CallObjectMethod(plane, planeGetBuffer));
                avframe->linesize[i] = jenv->CallIntMethod(plane, planeGetRowStride);
            }
        }

        setRotation(rotation);
        if (rotMatrix)
            av_frame_new_side_data_from_buf(avframe, AV_FRAME_DATA_DISPLAYMATRIX, av_buffer_ref(rotMatrix));

        image = jenv->NewGlobalRef(image);
        frame->setReleaseCb([jenv, image](uint8_t *) mutable {
            bool justAttached = false;
            int envStat = gJavaVM->GetEnv((void**)&jenv, JNI_VERSION_1_6);
            if (envStat == JNI_EDETACHED) {
                justAttached = true;
                if (gJavaVM->AttachCurrentThread(&jenv, nullptr) != 0)
                    return;
            } else if (envStat == JNI_EVERSION) {
                return;
            }
            jenv->CallVoidMethod(image, imageClose);
            jenv->DeleteGlobalRef(image);
            if (justAttached)
                gJavaVM->DetachCurrentThread();
        });
        DRing::publishFrame();
    } catch (const std::exception& e) {
        __android_log_print(ANDROID_LOG_ERROR, TAG, "Exception capturing video frame: %s", e.what());
    }
}

JNIEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_acquireNativeWindow(JNIEnv *jenv, jclass jcls, jobject javaSurface)
{
    return (jlong)(intptr_t)ANativeWindow_fromSurface(jenv, javaSurface);
}

JNIEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_releaseNativeWindow(JNIEnv *jenv, jclass jcls, jlong window_)
{
    std::lock_guard<std::mutex> guard(windows_mutex);
    ANativeWindow *window = (ANativeWindow*)((intptr_t) window_);
    ANativeWindow_release(window);
}

JNIEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_setNativeWindowGeometry(JNIEnv *jenv, jclass jcls, jlong window_, int width, int height)
{
    ANativeWindow *window = (ANativeWindow*)((intptr_t) window_);
    ANativeWindow_setBuffersGeometry(window, width, height, WINDOW_FORMAT_RGBA_8888);
}

void AndroidDisplayCb(ANativeWindow *window, std::unique_ptr<DRing::FrameBuffer> frame)
{
    std::lock_guard<std::mutex> guard(windows_mutex);
    try {
        auto& i = windows.at(window);
        ANativeWindow_Buffer buffer;
        if (ANativeWindow_lock(window, &buffer, NULL) == 0) {
            if (buffer.bits && frame && frame->ptr) {
                if (buffer.stride == frame->width)
                    memcpy(buffer.bits, frame->ptr, frame->width * frame->height * 4);
                else {
                    size_t line_size_in = frame->width * 4;
                    size_t line_size_out = buffer.stride * 4;
                    for (size_t i=0, n=frame->height; i<n; i++)
                        memcpy((uint8_t*)buffer.bits + line_size_out * i, frame->ptr + line_size_in * i, line_size_in);
                }
            }
            else
                __android_log_print(ANDROID_LOG_WARN, TAG, "Can't copy surface");
            ANativeWindow_unlockAndPost(window);
        } else {
            __android_log_print(ANDROID_LOG_WARN, TAG, "Can't lock surface");
        }
        i = std::move(frame);
    } catch (...) {
        __android_log_print(ANDROID_LOG_WARN, TAG, "Can't copy frame: no window");
    }
}

std::unique_ptr<DRing::FrameBuffer> sinkTargetPullCallback(ANativeWindow *window, std::size_t bytes)
{
    try {
        std::unique_ptr<DRing::FrameBuffer> ret;
        {
            std::lock_guard<std::mutex> guard(windows_mutex);
            ret = std::move(windows.at(window));
        }
        if (not ret) {
            __android_log_print(ANDROID_LOG_WARN, TAG, "Creating new video buffer of %zu kib", bytes/1024);
            ret.reset(new DRing::FrameBuffer());
        }
        ret->storage.resize(bytes);
        ret->ptr = ret->storage.data();
        ret->ptrSize = bytes;
        return ret;
    } catch (...) {
        return {};
    }
}

JNIEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_registerVideoCallback(JNIEnv *jenv, jclass jcls, jstring sinkId, jlong window)
{
    if(!sinkId) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
        return;
    }
    const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(sinkId, 0);
    if (!arg1_pstr)
        return;
    const std::string sink(arg1_pstr);
    jenv->ReleaseStringUTFChars(sinkId, arg1_pstr);

    ANativeWindow* nativeWindow = (ANativeWindow*)((intptr_t) window);
    auto f_display_cb = std::bind(&AndroidDisplayCb, nativeWindow, std::placeholders::_1);
    auto p_display_cb = std::bind(&sinkTargetPullCallback, nativeWindow, std::placeholders::_1);

    std::lock_guard<std::mutex> guard(windows_mutex);
    windows.emplace(nativeWindow, nullptr);
    DRing::registerSinkTarget(sink, DRing::SinkTarget {.pull=p_display_cb, .push=f_display_cb});
}

JNIEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_unregisterVideoCallback(JNIEnv *jenv, jclass jcls, jstring sinkId, jlong window)
{
    if(!sinkId) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
        return;
    }
    const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(sinkId, 0);
    if (!arg1_pstr)
        return;
    const std::string sink(arg1_pstr);
    jenv->ReleaseStringUTFChars(sinkId, arg1_pstr);

    std::lock_guard<std::mutex> guard(windows_mutex);
    DRing::registerSinkTarget(sink, DRing::SinkTarget {});
    ANativeWindow* nativeWindow = (ANativeWindow*)((intptr_t) window);
    windows.erase(nativeWindow);
}




#include "dring/dring.h"
#include "dring/plugin_manager_interface.h"


#include "dring/dring.h"
#include "dring/conversation_interface.h"

class ConversationCallback {
public:
    virtual ~ConversationCallback(){}
    virtual void conversationLoaded(uint32_t /* id */, const std::string& /*accountId*/, const std::string& /* conversationId */, std::vector<std::map<std::string, std::string>> /*messages*/){}
    virtual void messageReceived(const std::string& /*accountId*/, const std::string& /* conversationId */, std::map<std::string, std::string> /*message*/){}
    virtual void conversationRequestReceived(const std::string& /*accountId*/, const std::string& /* conversationId */, std::map<std::string, std::string> /*metadatas*/){}
    virtual void conversationReady(const std::string& /*accountId*/, const std::string& /* conversationId */){}
    virtual void conversationRemoved(const std::string& /*accountId*/, const std::string& /* conversationId */){}
    virtual void conversationMemberEvent(const std::string& /*accountId*/, const std::string& /* conversationId */, const std::string& /* memberUri */, int /* event */){}
    virtual void onConversationError(const std::string& /*accountId*/, const std::string& /* conversationId */, uint32_t /* code */, const std::string& /* what */){}
};


/* some functions that need to be declared in *_wrap.cpp
 * that are not declared elsewhere in the c++ code
 */

void init(ConfigurationCallback* confM, Callback* callM, PresenceCallback* presM, DataTransferCallback* dataM, VideoCallback* videoM, ConversationCallback* convM) {
    using namespace std::placeholders;

    using std::bind;
    using DRing::exportable_callback;
    using DRing::CallSignal;
    using DRing::ConfigurationSignal;
    using DRing::DataTransferInfo;
    using DRing::DataTransferSignal;
    using DRing::PresenceSignal;
    using DRing::VideoSignal;
    using DRing::ConversationSignal;

    using SharedCallback = std::shared_ptr<DRing::CallbackWrapperBase>;

    // Call event handlers
    const std::map<std::string, SharedCallback> callEvHandlers = {
        exportable_callback<CallSignal::StateChange>(bind(&Callback::callStateChanged, callM, _1, _2, _3)),
        exportable_callback<CallSignal::TransferFailed>(bind(&Callback::transferFailed, callM)),
        exportable_callback<CallSignal::TransferSucceeded>(bind(&Callback::transferSucceeded, callM)),
        exportable_callback<CallSignal::RecordPlaybackStopped>(bind(&Callback::recordPlaybackStopped, callM, _1)),
        exportable_callback<CallSignal::VoiceMailNotify>(bind(&Callback::voiceMailNotify, callM, _1, _2, _3, _4)),
        exportable_callback<CallSignal::IncomingMessage>(bind(&Callback::incomingMessage, callM, _1, _2, _3)),
        exportable_callback<CallSignal::IncomingCall>(bind(&Callback::incomingCall, callM, _1, _2, _3)),
        exportable_callback<CallSignal::RecordPlaybackFilepath>(bind(&Callback::recordPlaybackFilepath, callM, _1, _2)),
        exportable_callback<CallSignal::ConferenceCreated>(bind(&Callback::conferenceCreated, callM, _1)),
        exportable_callback<CallSignal::ConferenceChanged>(bind(&Callback::conferenceChanged, callM, _1, _2)),
        exportable_callback<CallSignal::UpdatePlaybackScale>(bind(&Callback::updatePlaybackScale, callM, _1, _2, _3)),
        exportable_callback<CallSignal::ConferenceRemoved>(bind(&Callback::conferenceRemoved, callM, _1)),
        exportable_callback<CallSignal::RecordingStateChanged>(bind(&Callback::recordingStateChanged, callM, _1, _2)),
        exportable_callback<CallSignal::RtcpReportReceived>(bind(&Callback::onRtcpReportReceived, callM, _1, _2)),
        exportable_callback<CallSignal::OnConferenceInfosUpdated>(bind(&Callback::onConferenceInfosUpdated, callM, _1, _2)),
        exportable_callback<CallSignal::PeerHold>(bind(&Callback::peerHold, callM, _1, _2)),
        exportable_callback<CallSignal::ConnectionUpdate>(bind(&Callback::connectionUpdate, callM, _1, _2)),
        exportable_callback<CallSignal::RemoteRecordingChanged>(bind(&Callback::remoteRecordingChanged, callM, _1, _2, _3))
    };

    // Configuration event handlers
    const std::map<std::string, SharedCallback> configEvHandlers = {
        exportable_callback<ConfigurationSignal::VolumeChanged>(bind(&ConfigurationCallback::volumeChanged, confM, _1, _2)),
        exportable_callback<ConfigurationSignal::AccountsChanged>(bind(&ConfigurationCallback::accountsChanged, confM)),
        exportable_callback<ConfigurationSignal::StunStatusFailed>(bind(&ConfigurationCallback::stunStatusFailure, confM, _1)),
        exportable_callback<ConfigurationSignal::AccountDetailsChanged>(bind(&ConfigurationCallback::accountDetailsChanged, confM, _1, _2)),
        exportable_callback<ConfigurationSignal::RegistrationStateChanged>(bind(&ConfigurationCallback::registrationStateChanged, confM, _1, _2, _3, _4)),
        exportable_callback<ConfigurationSignal::VolatileDetailsChanged>(bind(&ConfigurationCallback::volatileAccountDetailsChanged, confM, _1, _2)),
        exportable_callback<ConfigurationSignal::KnownDevicesChanged>(bind(&ConfigurationCallback::knownDevicesChanged, confM, _1, _2)),
        exportable_callback<ConfigurationSignal::ExportOnRingEnded>(bind(&ConfigurationCallback::exportOnRingEnded, confM, _1, _2, _3)),
        exportable_callback<ConfigurationSignal::Error>(bind(&ConfigurationCallback::errorAlert, confM, _1)),
        exportable_callback<ConfigurationSignal::IncomingAccountMessage>(bind(&ConfigurationCallback::incomingAccountMessage, confM, _1, _2, _3, _4 )),
        exportable_callback<ConfigurationSignal::AccountMessageStatusChanged>(bind(&ConfigurationCallback::accountMessageStatusChanged, confM, _1, _2, _3, _4, _5 )),
        exportable_callback<ConfigurationSignal::ProfileReceived>(bind(&ConfigurationCallback::profileReceived, confM, _1, _2, _3 )),
        exportable_callback<ConfigurationSignal::ComposingStatusChanged>(bind(&ConfigurationCallback::composingStatusChanged, confM, _1, _2, _3, _4 )),
        exportable_callback<ConfigurationSignal::IncomingTrustRequest>(bind(&ConfigurationCallback::incomingTrustRequest, confM, _1, _2, _3, _4, _5 )),
        exportable_callback<ConfigurationSignal::ContactAdded>(bind(&ConfigurationCallback::contactAdded, confM, _1, _2, _3 )),
        exportable_callback<ConfigurationSignal::ContactRemoved>(bind(&ConfigurationCallback::contactRemoved, confM, _1, _2, _3 )),
        exportable_callback<ConfigurationSignal::CertificatePinned>(bind(&ConfigurationCallback::certificatePinned, confM, _1 )),
        exportable_callback<ConfigurationSignal::CertificatePathPinned>(bind(&ConfigurationCallback::certificatePathPinned, confM, _1, _2 )),
        exportable_callback<ConfigurationSignal::CertificateExpired>(bind(&ConfigurationCallback::certificateExpired, confM, _1 )),
        exportable_callback<ConfigurationSignal::CertificateStateChanged>(bind(&ConfigurationCallback::certificateStateChanged, confM, _1, _2, _3 )),
        exportable_callback<ConfigurationSignal::GetHardwareAudioFormat>(bind(&ConfigurationCallback::getHardwareAudioFormat, confM, _1 )),
        exportable_callback<ConfigurationSignal::GetAppDataPath>(bind(&ConfigurationCallback::getAppDataPath, confM, _1, _2 )),
        exportable_callback<ConfigurationSignal::GetDeviceName>(bind(&ConfigurationCallback::getDeviceName, confM, _1 )),
        exportable_callback<ConfigurationSignal::RegisteredNameFound>(bind(&ConfigurationCallback::registeredNameFound, confM, _1, _2, _3, _4 )),
        exportable_callback<ConfigurationSignal::NameRegistrationEnded>(bind(&ConfigurationCallback::nameRegistrationEnded, confM, _1, _2, _3 )),
        exportable_callback<ConfigurationSignal::UserSearchEnded>(bind(&ConfigurationCallback::userSearchEnded, confM, _1, _2, _3, _4 )),
        exportable_callback<ConfigurationSignal::MigrationEnded>(bind(&ConfigurationCallback::migrationEnded, confM, _1, _2)),
        exportable_callback<ConfigurationSignal::DeviceRevocationEnded>(bind(&ConfigurationCallback::deviceRevocationEnded, confM, _1, _2, _3)),
        exportable_callback<ConfigurationSignal::AccountProfileReceived>(bind(&ConfigurationCallback::accountProfileReceived, confM, _1, _2, _3)),
        exportable_callback<ConfigurationSignal::MessageSend>(bind(&ConfigurationCallback::messageSend, confM, _1))
    };

    // Presence event handlers
    const std::map<std::string, SharedCallback> presenceEvHandlers = {
        exportable_callback<PresenceSignal::NewServerSubscriptionRequest>(bind(&PresenceCallback::newServerSubscriptionRequest, presM, _1 )),
        exportable_callback<PresenceSignal::ServerError>(bind(&PresenceCallback::serverError, presM, _1, _2, _3 )),
        exportable_callback<PresenceSignal::NewBuddyNotification>(bind(&PresenceCallback::newBuddyNotification, presM, _1, _2, _3, _4 )),
        exportable_callback<PresenceSignal::NearbyPeerNotification>(bind(&PresenceCallback::nearbyPeerNotification, presM, _1, _2, _3, _4)),
        exportable_callback<PresenceSignal::SubscriptionStateChanged>(bind(&PresenceCallback::subscriptionStateChanged, presM, _1, _2, _3 ))
    };

    const std::map<std::string, SharedCallback> dataTransferEvHandlers = {
        exportable_callback<DataTransferSignal::DataTransferEvent>(bind(&DataTransferCallback::dataTransferEvent, dataM, _1, _2, _3, _4))
    };

    const std::map<std::string, SharedCallback> videoEvHandlers = {
        exportable_callback<VideoSignal::GetCameraInfo>(bind(&VideoCallback::getCameraInfo, videoM, _1, _2, _3, _4)),
        exportable_callback<VideoSignal::SetParameters>(bind(&VideoCallback::setParameters, videoM, _1, _2, _3, _4, _5)),
        exportable_callback<VideoSignal::SetBitrate>(bind(&VideoCallback::setBitrate, videoM, _1, _2)),
        exportable_callback<VideoSignal::RequestKeyFrame>(bind(&VideoCallback::requestKeyFrame, videoM)),
        exportable_callback<VideoSignal::StartCapture>(bind(&VideoCallback::startCapture, videoM, _1)),
        exportable_callback<VideoSignal::StopCapture>(bind(&VideoCallback::stopCapture, videoM)),
        exportable_callback<VideoSignal::DecodingStarted>(bind(&VideoCallback::decodingStarted, videoM, _1, _2, _3, _4, _5)),
        exportable_callback<VideoSignal::DecodingStopped>(bind(&VideoCallback::decodingStopped, videoM, _1, _2, _3)),
    };

    const std::map<std::string, SharedCallback> conversationHandlers = {
        exportable_callback<ConversationSignal::ConversationLoaded>(bind(&ConversationCallback::conversationLoaded, convM, _1, _2, _3, _4)),
        exportable_callback<ConversationSignal::MessageReceived>(bind(&ConversationCallback::messageReceived, convM, _1, _2, _3)),
        exportable_callback<ConversationSignal::ConversationRequestReceived>(bind(&ConversationCallback::conversationRequestReceived, convM, _1, _2, _3)),
        exportable_callback<ConversationSignal::ConversationReady>(bind(&ConversationCallback::conversationReady, convM, _1, _2)),
        exportable_callback<ConversationSignal::ConversationRemoved>(bind(&ConversationCallback::conversationRemoved, convM, _1, _2)),
        exportable_callback<ConversationSignal::ConversationMemberEvent>(bind(&ConversationCallback::conversationMemberEvent, convM, _1, _2, _3, _4)),
        exportable_callback<ConversationSignal::OnConversationError>(bind(&ConversationCallback::onConversationError, convM, _1, _2, _3, _4))
    };

    if (!DRing::init(static_cast<DRing::InitFlag>(DRing::DRING_FLAG_DEBUG)))
        return;

    registerSignalHandlers(callEvHandlers);
    registerSignalHandlers(configEvHandlers);
    registerSignalHandlers(presenceEvHandlers);
    registerSignalHandlers(dataTransferEvHandlers);
    registerSignalHandlers(videoEvHandlers);
    registerSignalHandlers(conversationHandlers);

    DRing::start();
}





/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "jami_wrapper.h"

SwigDirector_Callback::SwigDirector_Callback(JNIEnv *jenv) : Callback(), Swig::Director(jenv) {
}

SwigDirector_Callback::~SwigDirector_Callback() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_Callback::callStateChanged(std::string const &call_id, std::string const &state, int detail_code) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jcall_id = 0 ;
  jstring jstate = 0 ;
  jint jdetail_code  ;
  
  if (!swig_override[0]) {
    Callback::callStateChanged(call_id,state,detail_code);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcall_id = jenv->NewStringUTF((&call_id)->c_str());
    Swig::LocalRefGuard call_id_refguard(jenv, jcall_id); 
    jstate = jenv->NewStringUTF((&state)->c_str());
    Swig::LocalRefGuard state_refguard(jenv, jstate); 
    jdetail_code = (jint) detail_code;
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[0], swigjobj, jcall_id, jstate, jdetail_code);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::callStateChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::transferFailed() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    Callback::transferFailed();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[1], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::transferFailed ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::transferSucceeded() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    Callback::transferSucceeded();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[2], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::transferSucceeded ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::recordPlaybackStopped(std::string const &path) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jpath = 0 ;
  
  if (!swig_override[3]) {
    Callback::recordPlaybackStopped(path);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jpath = jenv->NewStringUTF((&path)->c_str());
    Swig::LocalRefGuard path_refguard(jenv, jpath); 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[3], swigjobj, jpath);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::recordPlaybackStopped ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::voiceMailNotify(std::string const &accountId, int newCount, int oldCount, int urgentCount) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jaccountId = 0 ;
  jint jnewCount  ;
  jint joldCount  ;
  jint jurgentCount  ;
  
  if (!swig_override[4]) {
    Callback::voiceMailNotify(accountId,newCount,oldCount,urgentCount);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaccountId = jenv->NewStringUTF((&accountId)->c_str());
    Swig::LocalRefGuard accountId_refguard(jenv, jaccountId); 
    jnewCount = (jint) newCount;
    joldCount = (jint) oldCount;
    jurgentCount = (jint) urgentCount;
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[4], swigjobj, jaccountId, jnewCount, joldCount, jurgentCount);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::voiceMailNotify ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::incomingMessage(std::string const &id, std::string const &from, std::map< std::string, std::string, std::less< std::string > > const &messages) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jid = 0 ;
  jstring jfrom = 0 ;
  jlong jmessages = 0 ;
  
  if (!swig_override[5]) {
    Callback::incomingMessage(id,from,messages);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jid = jenv->NewStringUTF((&id)->c_str());
    Swig::LocalRefGuard id_refguard(jenv, jid); 
    jfrom = jenv->NewStringUTF((&from)->c_str());
    Swig::LocalRefGuard from_refguard(jenv, jfrom); 
    *(std::map< std::string,std::string,std::less< std::string > > **)&jmessages = (std::map< std::string,std::string,std::less< std::string > > *) &messages; 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[5], swigjobj, jid, jfrom, jmessages);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::incomingMessage ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::incomingCall(std::string const &account_id, std::string const &call_id, std::string const &from) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jaccount_id = 0 ;
  jstring jcall_id = 0 ;
  jstring jfrom = 0 ;
  
  if (!swig_override[6]) {
    Callback::incomingCall(account_id,call_id,from);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaccount_id = jenv->NewStringUTF((&account_id)->c_str());
    Swig::LocalRefGuard account_id_refguard(jenv, jaccount_id); 
    jcall_id = jenv->NewStringUTF((&call_id)->c_str());
    Swig::LocalRefGuard call_id_refguard(jenv, jcall_id); 
    jfrom = jenv->NewStringUTF((&from)->c_str());
    Swig::LocalRefGuard from_refguard(jenv, jfrom); 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[6], swigjobj, jaccount_id, jcall_id, jfrom);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::incomingCall ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::recordPlaybackFilepath(std::string const &id, std::string const &filename) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jid = 0 ;
  jstring jfilename = 0 ;
  
  if (!swig_override[7]) {
    Callback::recordPlaybackFilepath(id,filename);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jid = jenv->NewStringUTF((&id)->c_str());
    Swig::LocalRefGuard id_refguard(jenv, jid); 
    jfilename = jenv->NewStringUTF((&filename)->c_str());
    Swig::LocalRefGuard filename_refguard(jenv, jfilename); 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[7], swigjobj, jid, jfilename);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::recordPlaybackFilepath ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::conferenceCreated(std::string const &conf_id) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jconf_id = 0 ;
  
  if (!swig_override[8]) {
    Callback::conferenceCreated(conf_id);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jconf_id = jenv->NewStringUTF((&conf_id)->c_str());
    Swig::LocalRefGuard conf_id_refguard(jenv, jconf_id); 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[8], swigjobj, jconf_id);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::conferenceCreated ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::conferenceChanged(std::string const &conf_id, std::string const &state) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jconf_id = 0 ;
  jstring jstate = 0 ;
  
  if (!swig_override[9]) {
    Callback::conferenceChanged(conf_id,state);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jconf_id = jenv->NewStringUTF((&conf_id)->c_str());
    Swig::LocalRefGuard conf_id_refguard(jenv, jconf_id); 
    jstate = jenv->NewStringUTF((&state)->c_str());
    Swig::LocalRefGuard state_refguard(jenv, jstate); 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[9], swigjobj, jconf_id, jstate);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::conferenceChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::conferenceRemoved(std::string const &conf_id) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jconf_id = 0 ;
  
  if (!swig_override[10]) {
    Callback::conferenceRemoved(conf_id);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jconf_id = jenv->NewStringUTF((&conf_id)->c_str());
    Swig::LocalRefGuard conf_id_refguard(jenv, jconf_id); 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[10], swigjobj, jconf_id);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::conferenceRemoved ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::updatePlaybackScale(std::string const &filepath, int position, int scale) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jfilepath = 0 ;
  jint jposition  ;
  jint jscale  ;
  
  if (!swig_override[11]) {
    Callback::updatePlaybackScale(filepath,position,scale);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jfilepath = jenv->NewStringUTF((&filepath)->c_str());
    Swig::LocalRefGuard filepath_refguard(jenv, jfilepath); 
    jposition = (jint) position;
    jscale = (jint) scale;
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[11], swigjobj, jfilepath, jposition, jscale);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::updatePlaybackScale ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::newCall(std::string const &account_id, std::string const &call_id, std::string const &to) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jaccount_id = 0 ;
  jstring jcall_id = 0 ;
  jstring jto = 0 ;
  
  if (!swig_override[12]) {
    Callback::newCall(account_id,call_id,to);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaccount_id = jenv->NewStringUTF((&account_id)->c_str());
    Swig::LocalRefGuard account_id_refguard(jenv, jaccount_id); 
    jcall_id = jenv->NewStringUTF((&call_id)->c_str());
    Swig::LocalRefGuard call_id_refguard(jenv, jcall_id); 
    jto = jenv->NewStringUTF((&to)->c_str());
    Swig::LocalRefGuard to_refguard(jenv, jto); 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[12], swigjobj, jaccount_id, jcall_id, jto);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::newCall ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::sipCallStateChange(std::string const &call_id, std::string const &state, int code) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jcall_id = 0 ;
  jstring jstate = 0 ;
  jint jcode  ;
  
  if (!swig_override[13]) {
    Callback::sipCallStateChange(call_id,state,code);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcall_id = jenv->NewStringUTF((&call_id)->c_str());
    Swig::LocalRefGuard call_id_refguard(jenv, jcall_id); 
    jstate = jenv->NewStringUTF((&state)->c_str());
    Swig::LocalRefGuard state_refguard(jenv, jstate); 
    jcode = (jint) code;
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[13], swigjobj, jcall_id, jstate, jcode);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::sipCallStateChange ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::recordingStateChanged(std::string const &call_id, int code) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jcall_id = 0 ;
  jint jcode  ;
  
  if (!swig_override[14]) {
    Callback::recordingStateChanged(call_id,code);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcall_id = jenv->NewStringUTF((&call_id)->c_str());
    Swig::LocalRefGuard call_id_refguard(jenv, jcall_id); 
    jcode = (jint) code;
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[14], swigjobj, jcall_id, jcode);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::recordingStateChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::recordStateChange(std::string const &call_id, int state) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jcall_id = 0 ;
  jint jstate  ;
  
  if (!swig_override[15]) {
    Callback::recordStateChange(call_id,state);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcall_id = jenv->NewStringUTF((&call_id)->c_str());
    Swig::LocalRefGuard call_id_refguard(jenv, jcall_id); 
    jstate = (jint) state;
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[15], swigjobj, jcall_id, jstate);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::recordStateChange ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::onRtcpReportReceived(std::string const &call_id, std::map< std::string, int, std::less< std::string > > const &stats) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jcall_id = 0 ;
  jlong jstats = 0 ;
  
  if (!swig_override[16]) {
    Callback::onRtcpReportReceived(call_id,stats);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcall_id = jenv->NewStringUTF((&call_id)->c_str());
    Swig::LocalRefGuard call_id_refguard(jenv, jcall_id); 
    *(std::map< std::string,int,std::less< std::string > > **)&jstats = (std::map< std::string,int,std::less< std::string > > *) &stats; 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[16], swigjobj, jcall_id, jstats);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::onRtcpReportReceived ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::onConferenceInfosUpdated(std::string const &confId, std::vector< std::map< std::string, std::string, std::less< std::string > > > const &infos) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jconfId = 0 ;
  jlong jinfos = 0 ;
  
  if (!swig_override[17]) {
    Callback::onConferenceInfosUpdated(confId,infos);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jconfId = jenv->NewStringUTF((&confId)->c_str());
    Swig::LocalRefGuard confId_refguard(jenv, jconfId); 
    *(std::vector< std::map< std::string,std::string,std::less< std::string > > > **)&jinfos = (std::vector< std::map< std::string,std::string,std::less< std::string > > > *) &infos; 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[17], swigjobj, jconfId, jinfos);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::onConferenceInfosUpdated ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::peerHold(std::string const &call_id, bool holding) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jcall_id = 0 ;
  jboolean jholding  ;
  
  if (!swig_override[18]) {
    Callback::peerHold(call_id,holding);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcall_id = jenv->NewStringUTF((&call_id)->c_str());
    Swig::LocalRefGuard call_id_refguard(jenv, jcall_id); 
    jholding = (jboolean) holding;
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[18], swigjobj, jcall_id, jholding);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::peerHold ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::connectionUpdate(std::string const &id, int state) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jid = 0 ;
  jint jstate  ;
  
  if (!swig_override[19]) {
    Callback::connectionUpdate(id,state);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jid = jenv->NewStringUTF((&id)->c_str());
    Swig::LocalRefGuard id_refguard(jenv, jid); 
    jstate = (jint) state;
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[19], swigjobj, jid, jstate);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::connectionUpdate ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::remoteRecordingChanged(std::string const &call_id, std::string const &peer_number, bool state) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jcall_id = 0 ;
  jstring jpeer_number = 0 ;
  jboolean jstate  ;
  
  if (!swig_override[20]) {
    Callback::remoteRecordingChanged(call_id,peer_number,state);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcall_id = jenv->NewStringUTF((&call_id)->c_str());
    Swig::LocalRefGuard call_id_refguard(jenv, jcall_id); 
    jpeer_number = jenv->NewStringUTF((&peer_number)->c_str());
    Swig::LocalRefGuard peer_number_refguard(jenv, jpeer_number); 
    jstate = (jboolean) state;
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[20], swigjobj, jcall_id, jpeer_number, jstate);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::remoteRecordingChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "callStateChanged", "(Ljava/lang/String;Ljava/lang/String;I)V", NULL 
    },
    {
      "transferFailed", "()V", NULL 
    },
    {
      "transferSucceeded", "()V", NULL 
    },
    {
      "recordPlaybackStopped", "(Ljava/lang/String;)V", NULL 
    },
    {
      "voiceMailNotify", "(Ljava/lang/String;III)V", NULL 
    },
    {
      "incomingMessage", "(Ljava/lang/String;Ljava/lang/String;Lnet/jami/daemon/StringMap;)V", NULL 
    },
    {
      "incomingCall", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", NULL 
    },
    {
      "recordPlaybackFilepath", "(Ljava/lang/String;Ljava/lang/String;)V", NULL 
    },
    {
      "conferenceCreated", "(Ljava/lang/String;)V", NULL 
    },
    {
      "conferenceChanged", "(Ljava/lang/String;Ljava/lang/String;)V", NULL 
    },
    {
      "conferenceRemoved", "(Ljava/lang/String;)V", NULL 
    },
    {
      "updatePlaybackScale", "(Ljava/lang/String;II)V", NULL 
    },
    {
      "newCall", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", NULL 
    },
    {
      "sipCallStateChange", "(Ljava/lang/String;Ljava/lang/String;I)V", NULL 
    },
    {
      "recordingStateChanged", "(Ljava/lang/String;I)V", NULL 
    },
    {
      "recordStateChange", "(Ljava/lang/String;I)V", NULL 
    },
    {
      "onRtcpReportReceived", "(Ljava/lang/String;Lnet/jami/daemon/IntegerMap;)V", NULL 
    },
    {
      "onConferenceInfosUpdated", "(Ljava/lang/String;Lnet/jami/daemon/VectMap;)V", NULL 
    },
    {
      "peerHold", "(Ljava/lang/String;Z)V", NULL 
    },
    {
      "connectionUpdate", "(Ljava/lang/String;I)V", NULL 
    },
    {
      "remoteRecordingChanged", "(Ljava/lang/String;Ljava/lang/String;Z)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("net/jami/daemon/Callback");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 21; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ConfigurationCallback::SwigDirector_ConfigurationCallback(JNIEnv *jenv) : ConfigurationCallback(), Swig::Director(jenv) {
}

SwigDirector_ConfigurationCallback::~SwigDirector_ConfigurationCallback() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ConfigurationCallback::volumeChanged(std::string const &device, int value) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jdevice = 0 ;
  jint jvalue  ;
  
  if (!swig_override[0]) {
    ConfigurationCallback::volumeChanged(device,value);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jdevice = jenv->NewStringUTF((&device)->c_str());
    Swig::LocalRefGuard device_refguard(jenv, jdevice); 
    jvalue = (jint) value;
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[21], swigjobj, jdevice, jvalue);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::volumeChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::accountsChanged() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    ConfigurationCallback::accountsChanged();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[22], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::accountsChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::historyChanged() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    ConfigurationCallback::historyChanged();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[23], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::historyChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::stunStatusFailure(std::string const &account_id) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jaccount_id = 0 ;
  
  if (!swig_override[3]) {
    ConfigurationCallback::stunStatusFailure(account_id);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaccount_id = jenv->NewStringUTF((&account_id)->c_str());
    Swig::LocalRefGuard account_id_refguard(jenv, jaccount_id); 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[24], swigjobj, jaccount_id);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::stunStatusFailure ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::accountDetailsChanged(std::string const &account_id, std::map< std::string, std::string, std::less< std::string > > const &details) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jaccount_id = 0 ;
  jlong jdetails = 0 ;
  
  if (!swig_override[4]) {
    ConfigurationCallback::accountDetailsChanged(account_id,details);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaccount_id = jenv->NewStringUTF((&account_id)->c_str());
    Swig::LocalRefGuard account_id_refguard(jenv, jaccount_id); 
    *(std::map< std::string,std::string,std::less< std::string > > **)&jdetails = (std::map< std::string,std::string,std::less< std::string > > *) &details; 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[25], swigjobj, jaccount_id, jdetails);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::accountDetailsChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::profileReceived(std::string const &arg0, std::string const &arg1, std::string const &arg2) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jstring jarg1 = 0 ;
  jstring jarg2 = 0 ;
  
  if (!swig_override[5]) {
    ConfigurationCallback::profileReceived(arg0,arg1,arg2);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jarg1 = jenv->NewStringUTF((&arg1)->c_str());
    Swig::LocalRefGuard arg1_refguard(jenv, jarg1); 
    jarg2 = jenv->NewStringUTF((&arg2)->c_str());
    Swig::LocalRefGuard arg2_refguard(jenv, jarg2); 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[26], swigjobj, jarg0, jarg1, jarg2);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::profileReceived ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::registrationStateChanged(std::string const &account_id, std::string const &state, int code, std::string const &detail_str) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jaccount_id = 0 ;
  jstring jstate = 0 ;
  jint jcode  ;
  jstring jdetail_str = 0 ;
  
  if (!swig_override[6]) {
    ConfigurationCallback::registrationStateChanged(account_id,state,code,detail_str);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaccount_id = jenv->NewStringUTF((&account_id)->c_str());
    Swig::LocalRefGuard account_id_refguard(jenv, jaccount_id); 
    jstate = jenv->NewStringUTF((&state)->c_str());
    Swig::LocalRefGuard state_refguard(jenv, jstate); 
    jcode = (jint) code;
    jdetail_str = jenv->NewStringUTF((&detail_str)->c_str());
    Swig::LocalRefGuard detail_str_refguard(jenv, jdetail_str); 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[27], swigjobj, jaccount_id, jstate, jcode, jdetail_str);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::registrationStateChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::volatileAccountDetailsChanged(std::string const &account_id, std::map< std::string, std::string, std::less< std::string > > const &details) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jaccount_id = 0 ;
  jlong jdetails = 0 ;
  
  if (!swig_override[7]) {
    ConfigurationCallback::volatileAccountDetailsChanged(account_id,details);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaccount_id = jenv->NewStringUTF((&account_id)->c_str());
    Swig::LocalRefGuard account_id_refguard(jenv, jaccount_id); 
    *(std::map< std::string,std::string,std::less< std::string > > **)&jdetails = (std::map< std::string,std::string,std::less< std::string > > *) &details; 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[28], swigjobj, jaccount_id, jdetails);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::volatileAccountDetailsChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::incomingAccountMessage(std::string const &arg0, std::string const &arg1, std::string const &arg2, std::map< std::string, std::string, std::less< std::string > > const &arg3) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jstring jarg1 = 0 ;
  jstring jarg2 = 0 ;
  jlong jarg3 = 0 ;
  
  if (!swig_override[8]) {
    ConfigurationCallback::incomingAccountMessage(arg0,arg1,arg2,arg3);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jarg1 = jenv->NewStringUTF((&arg1)->c_str());
    Swig::LocalRefGuard arg1_refguard(jenv, jarg1); 
    jarg2 = jenv->NewStringUTF((&arg2)->c_str());
    Swig::LocalRefGuard arg2_refguard(jenv, jarg2); 
    *(std::map< std::string,std::string,std::less< std::string > > **)&jarg3 = (std::map< std::string,std::string,std::less< std::string > > *) &arg3; 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[29], swigjobj, jarg0, jarg1, jarg2, jarg3);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::incomingAccountMessage ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::accountMessageStatusChanged(std::string const &arg0, std::string const &arg1, std::string const &arg2, std::string const &arg3, int arg4) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jstring jarg1 = 0 ;
  jstring jarg2 = 0 ;
  jstring jarg3 = 0 ;
  jint jarg4  ;
  
  if (!swig_override[9]) {
    ConfigurationCallback::accountMessageStatusChanged(arg0,arg1,arg2,arg3,arg4);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jarg1 = jenv->NewStringUTF((&arg1)->c_str());
    Swig::LocalRefGuard arg1_refguard(jenv, jarg1); 
    jarg2 = jenv->NewStringUTF((&arg2)->c_str());
    Swig::LocalRefGuard arg2_refguard(jenv, jarg2); 
    jarg3 = jenv->NewStringUTF((&arg3)->c_str());
    Swig::LocalRefGuard arg3_refguard(jenv, jarg3); 
    jarg4 = (jint) arg4;
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[30], swigjobj, jarg0, jarg1, jarg2, jarg3, jarg4);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::accountMessageStatusChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::composingStatusChanged(std::string const &arg0, std::string const &arg1, std::string const &arg2, int arg3) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jstring jarg1 = 0 ;
  jstring jarg2 = 0 ;
  jint jarg3  ;
  
  if (!swig_override[10]) {
    ConfigurationCallback::composingStatusChanged(arg0,arg1,arg2,arg3);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jarg1 = jenv->NewStringUTF((&arg1)->c_str());
    Swig::LocalRefGuard arg1_refguard(jenv, jarg1); 
    jarg2 = jenv->NewStringUTF((&arg2)->c_str());
    Swig::LocalRefGuard arg2_refguard(jenv, jarg2); 
    jarg3 = (jint) arg3;
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[31], swigjobj, jarg0, jarg1, jarg2, jarg3);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::composingStatusChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::knownDevicesChanged(std::string const &arg0, std::map< std::string, std::string, std::less< std::string > > const &arg1) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jlong jarg1 = 0 ;
  
  if (!swig_override[11]) {
    ConfigurationCallback::knownDevicesChanged(arg0,arg1);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    *(std::map< std::string,std::string,std::less< std::string > > **)&jarg1 = (std::map< std::string,std::string,std::less< std::string > > *) &arg1; 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[32], swigjobj, jarg0, jarg1);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::knownDevicesChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::exportOnRingEnded(std::string const &arg0, int arg1, std::string const &arg2) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jint jarg1  ;
  jstring jarg2 = 0 ;
  
  if (!swig_override[12]) {
    ConfigurationCallback::exportOnRingEnded(arg0,arg1,arg2);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jarg1 = (jint) arg1;
    jarg2 = jenv->NewStringUTF((&arg2)->c_str());
    Swig::LocalRefGuard arg2_refguard(jenv, jarg2); 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[33], swigjobj, jarg0, jarg1, jarg2);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::exportOnRingEnded ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::incomingTrustRequest(std::string const &arg0, std::string const &arg1, std::string const &arg2, std::vector< uint8_t > const &arg3, time_t received) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jstring jarg1 = 0 ;
  jstring jarg2 = 0 ;
  jlong jarg3 = 0 ;
  jlong jreceived  ;
  
  if (!swig_override[13]) {
    ConfigurationCallback::incomingTrustRequest(arg0,arg1,arg2,arg3,received);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jarg1 = jenv->NewStringUTF((&arg1)->c_str());
    Swig::LocalRefGuard arg1_refguard(jenv, jarg1); 
    jarg2 = jenv->NewStringUTF((&arg2)->c_str());
    Swig::LocalRefGuard arg2_refguard(jenv, jarg2); 
    *(std::vector< uint8_t > **)&jarg3 = (std::vector< uint8_t > *) &arg3; 
    jreceived = (jlong) received;
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[34], swigjobj, jarg0, jarg1, jarg2, jarg3, jreceived);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::incomingTrustRequest ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::contactAdded(std::string const &arg0, std::string const &arg1, bool confirmed) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jstring jarg1 = 0 ;
  jboolean jconfirmed  ;
  
  if (!swig_override[14]) {
    ConfigurationCallback::contactAdded(arg0,arg1,confirmed);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jarg1 = jenv->NewStringUTF((&arg1)->c_str());
    Swig::LocalRefGuard arg1_refguard(jenv, jarg1); 
    jconfirmed = (jboolean) confirmed;
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[35], swigjobj, jarg0, jarg1, jconfirmed);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::contactAdded ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::contactRemoved(std::string const &arg0, std::string const &arg1, bool banned) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jstring jarg1 = 0 ;
  jboolean jbanned  ;
  
  if (!swig_override[15]) {
    ConfigurationCallback::contactRemoved(arg0,arg1,banned);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jarg1 = jenv->NewStringUTF((&arg1)->c_str());
    Swig::LocalRefGuard arg1_refguard(jenv, jarg1); 
    jbanned = (jboolean) banned;
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[36], swigjobj, jarg0, jarg1, jbanned);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::contactRemoved ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::certificatePinned(std::string const &arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  
  if (!swig_override[16]) {
    ConfigurationCallback::certificatePinned(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[37], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::certificatePinned ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::certificatePathPinned(std::string const &arg0, std::vector< std::string > const &arg1) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jlong jarg1 = 0 ;
  
  if (!swig_override[17]) {
    ConfigurationCallback::certificatePathPinned(arg0,arg1);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    *(std::vector< std::string > **)&jarg1 = (std::vector< std::string > *) &arg1; 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[38], swigjobj, jarg0, jarg1);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::certificatePathPinned ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::certificateExpired(std::string const &arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  
  if (!swig_override[18]) {
    ConfigurationCallback::certificateExpired(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[39], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::certificateExpired ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::certificateStateChanged(std::string const &arg0, std::string const &arg1, std::string const &arg2) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jstring jarg1 = 0 ;
  jstring jarg2 = 0 ;
  
  if (!swig_override[19]) {
    ConfigurationCallback::certificateStateChanged(arg0,arg1,arg2);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jarg1 = jenv->NewStringUTF((&arg1)->c_str());
    Swig::LocalRefGuard arg1_refguard(jenv, jarg1); 
    jarg2 = jenv->NewStringUTF((&arg2)->c_str());
    Swig::LocalRefGuard arg2_refguard(jenv, jarg2); 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[40], swigjobj, jarg0, jarg1, jarg2);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::certificateStateChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::errorAlert(int alert) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jalert  ;
  
  if (!swig_override[20]) {
    ConfigurationCallback::errorAlert(alert);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jalert = (jint) alert;
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[41], swigjobj, jalert);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::errorAlert ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::getHardwareAudioFormat(std::vector< int32_t > *arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0 = 0 ;
  
  if (!swig_override[21]) {
    ConfigurationCallback::getHardwareAudioFormat(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((std::vector< int32_t > **)&jarg0) = (std::vector< int32_t > *) arg0; 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[42], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::getHardwareAudioFormat ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::getAppDataPath(std::string const &arg0, std::vector< std::string > *arg1) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jlong jarg1 = 0 ;
  
  if (!swig_override[22]) {
    ConfigurationCallback::getAppDataPath(arg0,arg1);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    *((std::vector< std::string > **)&jarg1) = (std::vector< std::string > *) arg1; 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[43], swigjobj, jarg0, jarg1);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::getAppDataPath ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::getDeviceName(std::vector< std::string > *arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0 = 0 ;
  
  if (!swig_override[23]) {
    ConfigurationCallback::getDeviceName(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((std::vector< std::string > **)&jarg0) = (std::vector< std::string > *) arg0; 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[44], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::getDeviceName ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::nameRegistrationEnded(std::string const &arg0, int state, std::string const &arg2) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jint jstate  ;
  jstring jarg2 = 0 ;
  
  if (!swig_override[24]) {
    ConfigurationCallback::nameRegistrationEnded(arg0,state,arg2);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jstate = (jint) state;
    jarg2 = jenv->NewStringUTF((&arg2)->c_str());
    Swig::LocalRefGuard arg2_refguard(jenv, jarg2); 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[45], swigjobj, jarg0, jstate, jarg2);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::nameRegistrationEnded ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::registeredNameFound(std::string const &arg0, int state, std::string const &arg2, std::string const &arg3) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jint jstate  ;
  jstring jarg2 = 0 ;
  jstring jarg3 = 0 ;
  
  if (!swig_override[25]) {
    ConfigurationCallback::registeredNameFound(arg0,state,arg2,arg3);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jstate = (jint) state;
    jarg2 = jenv->NewStringUTF((&arg2)->c_str());
    Swig::LocalRefGuard arg2_refguard(jenv, jarg2); 
    jarg3 = jenv->NewStringUTF((&arg3)->c_str());
    Swig::LocalRefGuard arg3_refguard(jenv, jarg3); 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[46], swigjobj, jarg0, jstate, jarg2, jarg3);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::registeredNameFound ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::userSearchEnded(std::string const &arg0, int state, std::string const &arg2, std::vector< std::map< std::string, std::string, std::less< std::string > > > const &arg3) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jint jstate  ;
  jstring jarg2 = 0 ;
  jlong jarg3 = 0 ;
  
  if (!swig_override[26]) {
    ConfigurationCallback::userSearchEnded(arg0,state,arg2,arg3);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jstate = (jint) state;
    jarg2 = jenv->NewStringUTF((&arg2)->c_str());
    Swig::LocalRefGuard arg2_refguard(jenv, jarg2); 
    *(std::vector< std::map< std::string,std::string,std::less< std::string > > > **)&jarg3 = (std::vector< std::map< std::string,std::string,std::less< std::string > > > *) &arg3; 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[47], swigjobj, jarg0, jstate, jarg2, jarg3);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::userSearchEnded ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::migrationEnded(std::string const &arg0, std::string const &arg1) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jstring jarg1 = 0 ;
  
  if (!swig_override[27]) {
    ConfigurationCallback::migrationEnded(arg0,arg1);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jarg1 = jenv->NewStringUTF((&arg1)->c_str());
    Swig::LocalRefGuard arg1_refguard(jenv, jarg1); 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[48], swigjobj, jarg0, jarg1);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::migrationEnded ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::deviceRevocationEnded(std::string const &arg0, std::string const &arg1, int arg2) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jstring jarg1 = 0 ;
  jint jarg2  ;
  
  if (!swig_override[28]) {
    ConfigurationCallback::deviceRevocationEnded(arg0,arg1,arg2);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jarg1 = jenv->NewStringUTF((&arg1)->c_str());
    Swig::LocalRefGuard arg1_refguard(jenv, jarg1); 
    jarg2 = (jint) arg2;
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[49], swigjobj, jarg0, jarg1, jarg2);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::deviceRevocationEnded ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::accountProfileReceived(std::string const &arg0, std::string const &arg1, std::string const &arg2) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jstring jarg1 = 0 ;
  jstring jarg2 = 0 ;
  
  if (!swig_override[29]) {
    ConfigurationCallback::accountProfileReceived(arg0,arg1,arg2);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jarg1 = jenv->NewStringUTF((&arg1)->c_str());
    Swig::LocalRefGuard arg1_refguard(jenv, jarg1); 
    jarg2 = jenv->NewStringUTF((&arg2)->c_str());
    Swig::LocalRefGuard arg2_refguard(jenv, jarg2); 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[50], swigjobj, jarg0, jarg1, jarg2);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::accountProfileReceived ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::hardwareDecodingChanged(bool arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jboolean jarg0  ;
  
  if (!swig_override[30]) {
    ConfigurationCallback::hardwareDecodingChanged(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = (jboolean) arg0;
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[51], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::hardwareDecodingChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::hardwareEncodingChanged(bool arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jboolean jarg0  ;
  
  if (!swig_override[31]) {
    ConfigurationCallback::hardwareEncodingChanged(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = (jboolean) arg0;
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[52], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::hardwareEncodingChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::audioMeter(std::string const &arg0, float arg1) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jfloat jarg1  ;
  
  if (!swig_override[32]) {
    ConfigurationCallback::audioMeter(arg0,arg1);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jarg1 = (jfloat) arg1;
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[53], swigjobj, jarg0, jarg1);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::audioMeter ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::messageSend(std::string const &arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  
  if (!swig_override[33]) {
    ConfigurationCallback::messageSend(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[54], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::messageSend ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "volumeChanged", "(Ljava/lang/String;I)V", NULL 
    },
    {
      "accountsChanged", "()V", NULL 
    },
    {
      "historyChanged", "()V", NULL 
    },
    {
      "stunStatusFailure", "(Ljava/lang/String;)V", NULL 
    },
    {
      "accountDetailsChanged", "(Ljava/lang/String;Lnet/jami/daemon/StringMap;)V", NULL 
    },
    {
      "profileReceived", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", NULL 
    },
    {
      "registrationStateChanged", "(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V", NULL 
    },
    {
      "volatileAccountDetailsChanged", "(Ljava/lang/String;Lnet/jami/daemon/StringMap;)V", NULL 
    },
    {
      "incomingAccountMessage", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lnet/jami/daemon/StringMap;)V", NULL 
    },
    {
      "accountMessageStatusChanged", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V", NULL 
    },
    {
      "composingStatusChanged", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V", NULL 
    },
    {
      "knownDevicesChanged", "(Ljava/lang/String;Lnet/jami/daemon/StringMap;)V", NULL 
    },
    {
      "exportOnRingEnded", "(Ljava/lang/String;ILjava/lang/String;)V", NULL 
    },
    {
      "incomingTrustRequest", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lnet/jami/daemon/Blob;J)V", NULL 
    },
    {
      "contactAdded", "(Ljava/lang/String;Ljava/lang/String;Z)V", NULL 
    },
    {
      "contactRemoved", "(Ljava/lang/String;Ljava/lang/String;Z)V", NULL 
    },
    {
      "certificatePinned", "(Ljava/lang/String;)V", NULL 
    },
    {
      "certificatePathPinned", "(Ljava/lang/String;Lnet/jami/daemon/StringVect;)V", NULL 
    },
    {
      "certificateExpired", "(Ljava/lang/String;)V", NULL 
    },
    {
      "certificateStateChanged", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", NULL 
    },
    {
      "errorAlert", "(I)V", NULL 
    },
    {
      "getHardwareAudioFormat", "(Lnet/jami/daemon/IntVect;)V", NULL 
    },
    {
      "getAppDataPath", "(Ljava/lang/String;Lnet/jami/daemon/StringVect;)V", NULL 
    },
    {
      "getDeviceName", "(Lnet/jami/daemon/StringVect;)V", NULL 
    },
    {
      "nameRegistrationEnded", "(Ljava/lang/String;ILjava/lang/String;)V", NULL 
    },
    {
      "registeredNameFound", "(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V", NULL 
    },
    {
      "userSearchEnded", "(Ljava/lang/String;ILjava/lang/String;Lnet/jami/daemon/VectMap;)V", NULL 
    },
    {
      "migrationEnded", "(Ljava/lang/String;Ljava/lang/String;)V", NULL 
    },
    {
      "deviceRevocationEnded", "(Ljava/lang/String;Ljava/lang/String;I)V", NULL 
    },
    {
      "accountProfileReceived", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", NULL 
    },
    {
      "hardwareDecodingChanged", "(Z)V", NULL 
    },
    {
      "hardwareEncodingChanged", "(Z)V", NULL 
    },
    {
      "audioMeter", "(Ljava/lang/String;F)V", NULL 
    },
    {
      "messageSend", "(Ljava/lang/String;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("net/jami/daemon/ConfigurationCallback");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 34; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_DataTransferCallback::SwigDirector_DataTransferCallback(JNIEnv *jenv) : DataTransferCallback(), Swig::Director(jenv) {
}

SwigDirector_DataTransferCallback::~SwigDirector_DataTransferCallback() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_DataTransferCallback::dataTransferEvent(std::string const &accountId, std::string const &conversationId, DRing::DataTransferId const transferId, int eventCode) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jaccountId = 0 ;
  jstring jconversationId = 0 ;
  jlong jtransferId  ;
  jint jeventCode  ;
  
  if (!swig_override[0]) {
    DataTransferCallback::dataTransferEvent(accountId,conversationId,transferId,eventCode);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaccountId = jenv->NewStringUTF((&accountId)->c_str());
    Swig::LocalRefGuard accountId_refguard(jenv, jaccountId); 
    jconversationId = jenv->NewStringUTF((&conversationId)->c_str());
    Swig::LocalRefGuard conversationId_refguard(jenv, jconversationId); 
    jtransferId = (jlong) transferId;
    jeventCode = (jint) eventCode;
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[55], swigjobj, jaccountId, jconversationId, jtransferId, jeventCode);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in DataTransferCallback::dataTransferEvent ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_DataTransferCallback::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "dataTransferEvent", "(Ljava/lang/String;Ljava/lang/String;JI)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("net/jami/daemon/DataTransferCallback");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_PresenceCallback::SwigDirector_PresenceCallback(JNIEnv *jenv) : PresenceCallback(), Swig::Director(jenv) {
}

SwigDirector_PresenceCallback::~SwigDirector_PresenceCallback() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_PresenceCallback::newServerSubscriptionRequest(std::string const &arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  
  if (!swig_override[0]) {
    PresenceCallback::newServerSubscriptionRequest(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[56], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in PresenceCallback::newServerSubscriptionRequest ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_PresenceCallback::serverError(std::string const &arg0, std::string const &arg1, std::string const &arg2) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jstring jarg1 = 0 ;
  jstring jarg2 = 0 ;
  
  if (!swig_override[1]) {
    PresenceCallback::serverError(arg0,arg1,arg2);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jarg1 = jenv->NewStringUTF((&arg1)->c_str());
    Swig::LocalRefGuard arg1_refguard(jenv, jarg1); 
    jarg2 = jenv->NewStringUTF((&arg2)->c_str());
    Swig::LocalRefGuard arg2_refguard(jenv, jarg2); 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[57], swigjobj, jarg0, jarg1, jarg2);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in PresenceCallback::serverError ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_PresenceCallback::newBuddyNotification(std::string const &arg0, std::string const &arg1, int arg2, std::string const &arg3) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jstring jarg1 = 0 ;
  jint jarg2  ;
  jstring jarg3 = 0 ;
  
  if (!swig_override[2]) {
    PresenceCallback::newBuddyNotification(arg0,arg1,arg2,arg3);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jarg1 = jenv->NewStringUTF((&arg1)->c_str());
    Swig::LocalRefGuard arg1_refguard(jenv, jarg1); 
    jarg2 = (jint) arg2;
    jarg3 = jenv->NewStringUTF((&arg3)->c_str());
    Swig::LocalRefGuard arg3_refguard(jenv, jarg3); 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[58], swigjobj, jarg0, jarg1, jarg2, jarg3);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in PresenceCallback::newBuddyNotification ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_PresenceCallback::nearbyPeerNotification(std::string const &arg0, std::string const &arg1, int arg2, std::string const &arg3) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jstring jarg1 = 0 ;
  jint jarg2  ;
  jstring jarg3 = 0 ;
  
  if (!swig_override[3]) {
    PresenceCallback::nearbyPeerNotification(arg0,arg1,arg2,arg3);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jarg1 = jenv->NewStringUTF((&arg1)->c_str());
    Swig::LocalRefGuard arg1_refguard(jenv, jarg1); 
    jarg2 = (jint) arg2;
    jarg3 = jenv->NewStringUTF((&arg3)->c_str());
    Swig::LocalRefGuard arg3_refguard(jenv, jarg3); 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[59], swigjobj, jarg0, jarg1, jarg2, jarg3);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in PresenceCallback::nearbyPeerNotification ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_PresenceCallback::subscriptionStateChanged(std::string const &arg0, std::string const &arg1, int arg2) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jstring jarg1 = 0 ;
  jint jarg2  ;
  
  if (!swig_override[4]) {
    PresenceCallback::subscriptionStateChanged(arg0,arg1,arg2);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jarg1 = jenv->NewStringUTF((&arg1)->c_str());
    Swig::LocalRefGuard arg1_refguard(jenv, jarg1); 
    jarg2 = (jint) arg2;
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[60], swigjobj, jarg0, jarg1, jarg2);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in PresenceCallback::subscriptionStateChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_PresenceCallback::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "newServerSubscriptionRequest", "(Ljava/lang/String;)V", NULL 
    },
    {
      "serverError", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", NULL 
    },
    {
      "newBuddyNotification", "(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V", NULL 
    },
    {
      "nearbyPeerNotification", "(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V", NULL 
    },
    {
      "subscriptionStateChanged", "(Ljava/lang/String;Ljava/lang/String;I)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("net/jami/daemon/PresenceCallback");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 5; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_VideoCallback::SwigDirector_VideoCallback(JNIEnv *jenv) : VideoCallback(), Swig::Director(jenv) {
}

SwigDirector_VideoCallback::~SwigDirector_VideoCallback() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_VideoCallback::getCameraInfo(std::string const &device, std::vector< int > *formats, std::vector< unsigned int > *sizes, std::vector< unsigned int > *rates) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jdevice = 0 ;
  jlong jformats = 0 ;
  jlong jsizes = 0 ;
  jlong jrates = 0 ;
  
  if (!swig_override[0]) {
    VideoCallback::getCameraInfo(device,formats,sizes,rates);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jdevice = jenv->NewStringUTF((&device)->c_str());
    Swig::LocalRefGuard device_refguard(jenv, jdevice); 
    *((std::vector< int > **)&jformats) = (std::vector< int > *) formats; 
    *((std::vector< unsigned int > **)&jsizes) = (std::vector< unsigned int > *) sizes; 
    *((std::vector< unsigned int > **)&jrates) = (std::vector< unsigned int > *) rates; 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[61], swigjobj, jdevice, jformats, jsizes, jrates);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in VideoCallback::getCameraInfo ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_VideoCallback::setParameters(std::string const &arg0, int const format, int const width, int const height, int const rate) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jint jformat  ;
  jint jwidth  ;
  jint jheight  ;
  jint jrate  ;
  
  if (!swig_override[1]) {
    VideoCallback::setParameters(arg0,format,width,height,rate);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jformat = (jint) format;
    jwidth = (jint) width;
    jheight = (jint) height;
    jrate = (jint) rate;
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[62], swigjobj, jarg0, jformat, jwidth, jheight, jrate);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in VideoCallback::setParameters ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_VideoCallback::setBitrate(std::string const &arg0, int const bitrate) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jint jbitrate  ;
  
  if (!swig_override[2]) {
    VideoCallback::setBitrate(arg0,bitrate);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jbitrate = (jint) bitrate;
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[63], swigjobj, jarg0, jbitrate);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in VideoCallback::setBitrate ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_VideoCallback::requestKeyFrame() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    VideoCallback::requestKeyFrame();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[64], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in VideoCallback::requestKeyFrame ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_VideoCallback::startCapture(std::string const &camid) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jcamid = 0 ;
  
  if (!swig_override[4]) {
    VideoCallback::startCapture(camid);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcamid = jenv->NewStringUTF((&camid)->c_str());
    Swig::LocalRefGuard camid_refguard(jenv, jcamid); 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[65], swigjobj, jcamid);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in VideoCallback::startCapture ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_VideoCallback::stopCapture() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[5]) {
    VideoCallback::stopCapture();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[66], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in VideoCallback::stopCapture ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_VideoCallback::decodingStarted(std::string const &id, std::string const &shm_path, int w, int h, bool is_mixer) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jid = 0 ;
  jstring jshm_path = 0 ;
  jint jw  ;
  jint jh  ;
  jboolean jis_mixer  ;
  
  if (!swig_override[6]) {
    VideoCallback::decodingStarted(id,shm_path,w,h,is_mixer);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jid = jenv->NewStringUTF((&id)->c_str());
    Swig::LocalRefGuard id_refguard(jenv, jid); 
    jshm_path = jenv->NewStringUTF((&shm_path)->c_str());
    Swig::LocalRefGuard shm_path_refguard(jenv, jshm_path); 
    jw = (jint) w;
    jh = (jint) h;
    jis_mixer = (jboolean) is_mixer;
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[67], swigjobj, jid, jshm_path, jw, jh, jis_mixer);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in VideoCallback::decodingStarted ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_VideoCallback::decodingStopped(std::string const &id, std::string const &shm_path, bool is_mixer) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jid = 0 ;
  jstring jshm_path = 0 ;
  jboolean jis_mixer  ;
  
  if (!swig_override[7]) {
    VideoCallback::decodingStopped(id,shm_path,is_mixer);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jid = jenv->NewStringUTF((&id)->c_str());
    Swig::LocalRefGuard id_refguard(jenv, jid); 
    jshm_path = jenv->NewStringUTF((&shm_path)->c_str());
    Swig::LocalRefGuard shm_path_refguard(jenv, jshm_path); 
    jis_mixer = (jboolean) is_mixer;
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[68], swigjobj, jid, jshm_path, jis_mixer);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in VideoCallback::decodingStopped ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_VideoCallback::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "getCameraInfo", "(Ljava/lang/String;Lnet/jami/daemon/IntVect;Lnet/jami/daemon/UintVect;Lnet/jami/daemon/UintVect;)V", NULL 
    },
    {
      "setParameters", "(Ljava/lang/String;IIII)V", NULL 
    },
    {
      "setBitrate", "(Ljava/lang/String;I)V", NULL 
    },
    {
      "requestKeyFrame", "()V", NULL 
    },
    {
      "startCapture", "(Ljava/lang/String;)V", NULL 
    },
    {
      "stopCapture", "()V", NULL 
    },
    {
      "decodingStarted", "(Ljava/lang/String;Ljava/lang/String;IIZ)V", NULL 
    },
    {
      "decodingStopped", "(Ljava/lang/String;Ljava/lang/String;Z)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("net/jami/daemon/VideoCallback");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 8; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ConversationCallback::SwigDirector_ConversationCallback(JNIEnv *jenv) : ConversationCallback(), Swig::Director(jenv) {
}

SwigDirector_ConversationCallback::~SwigDirector_ConversationCallback() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ConversationCallback::conversationLoaded(uint32_t arg0, std::string const &arg1, std::string const &arg2, std::vector< std::map< std::string, std::string, std::less< std::string > > > arg3) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  jstring jarg1 = 0 ;
  jstring jarg2 = 0 ;
  jlong jarg3  ;
  
  if (!swig_override[0]) {
    ConversationCallback::conversationLoaded(arg0,arg1,arg2,arg3);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = (jlong) arg0;
    jarg1 = jenv->NewStringUTF((&arg1)->c_str());
    Swig::LocalRefGuard arg1_refguard(jenv, jarg1); 
    jarg2 = jenv->NewStringUTF((&arg2)->c_str());
    Swig::LocalRefGuard arg2_refguard(jenv, jarg2); 
    jarg3 = 0;
    *((std::vector< std::map< std::string,std::string,std::less< std::string > > > **)&jarg3) = new std::vector< std::map< std::string,std::string,std::less< std::string > > >((const std::vector< std::map< std::string,std::string,std::less< std::string > > > &)arg3); 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[69], swigjobj, jarg0, jarg1, jarg2, jarg3);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConversationCallback::conversationLoaded ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConversationCallback::messageReceived(std::string const &arg0, std::string const &arg1, std::map< std::string, std::string, std::less< std::string > > arg2) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jstring jarg1 = 0 ;
  jlong jarg2  ;
  
  if (!swig_override[1]) {
    ConversationCallback::messageReceived(arg0,arg1,arg2);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jarg1 = jenv->NewStringUTF((&arg1)->c_str());
    Swig::LocalRefGuard arg1_refguard(jenv, jarg1); 
    jarg2 = 0;
    *((std::map< std::string,std::string,std::less< std::string > > **)&jarg2) = new std::map< std::string,std::string,std::less< std::string > >((const std::map< std::string,std::string,std::less< std::string > > &)arg2); 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[70], swigjobj, jarg0, jarg1, jarg2);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConversationCallback::messageReceived ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConversationCallback::conversationRequestReceived(std::string const &arg0, std::string const &arg1, std::map< std::string, std::string, std::less< std::string > > arg2) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jstring jarg1 = 0 ;
  jlong jarg2  ;
  
  if (!swig_override[2]) {
    ConversationCallback::conversationRequestReceived(arg0,arg1,arg2);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jarg1 = jenv->NewStringUTF((&arg1)->c_str());
    Swig::LocalRefGuard arg1_refguard(jenv, jarg1); 
    jarg2 = 0;
    *((std::map< std::string,std::string,std::less< std::string > > **)&jarg2) = new std::map< std::string,std::string,std::less< std::string > >((const std::map< std::string,std::string,std::less< std::string > > &)arg2); 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[71], swigjobj, jarg0, jarg1, jarg2);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConversationCallback::conversationRequestReceived ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConversationCallback::conversationReady(std::string const &arg0, std::string const &arg1) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jstring jarg1 = 0 ;
  
  if (!swig_override[3]) {
    ConversationCallback::conversationReady(arg0,arg1);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jarg1 = jenv->NewStringUTF((&arg1)->c_str());
    Swig::LocalRefGuard arg1_refguard(jenv, jarg1); 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[72], swigjobj, jarg0, jarg1);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConversationCallback::conversationReady ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConversationCallback::conversationRemoved(std::string const &arg0, std::string const &arg1) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jstring jarg1 = 0 ;
  
  if (!swig_override[4]) {
    ConversationCallback::conversationRemoved(arg0,arg1);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jarg1 = jenv->NewStringUTF((&arg1)->c_str());
    Swig::LocalRefGuard arg1_refguard(jenv, jarg1); 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[73], swigjobj, jarg0, jarg1);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConversationCallback::conversationRemoved ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConversationCallback::conversationMemberEvent(std::string const &arg0, std::string const &arg1, std::string const &arg2, int arg3) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jstring jarg1 = 0 ;
  jstring jarg2 = 0 ;
  jint jarg3  ;
  
  if (!swig_override[5]) {
    ConversationCallback::conversationMemberEvent(arg0,arg1,arg2,arg3);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jarg1 = jenv->NewStringUTF((&arg1)->c_str());
    Swig::LocalRefGuard arg1_refguard(jenv, jarg1); 
    jarg2 = jenv->NewStringUTF((&arg2)->c_str());
    Swig::LocalRefGuard arg2_refguard(jenv, jarg2); 
    jarg3 = (jint) arg3;
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[74], swigjobj, jarg0, jarg1, jarg2, jarg3);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConversationCallback::conversationMemberEvent ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConversationCallback::onConversationError(std::string const &arg0, std::string const &arg1, uint32_t arg2, std::string const &arg3) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jstring jarg1 = 0 ;
  jlong jarg2  ;
  jstring jarg3 = 0 ;
  
  if (!swig_override[6]) {
    ConversationCallback::onConversationError(arg0,arg1,arg2,arg3);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jarg1 = jenv->NewStringUTF((&arg1)->c_str());
    Swig::LocalRefGuard arg1_refguard(jenv, jarg1); 
    jarg2 = (jlong) arg2;
    jarg3 = jenv->NewStringUTF((&arg3)->c_str());
    Swig::LocalRefGuard arg3_refguard(jenv, jarg3); 
    jenv->CallStaticVoidMethod(Swig::jclass_JamiServiceJNI, Swig::director_method_ids[75], swigjobj, jarg0, jarg1, jarg2, jarg3);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConversationCallback::onConversationError ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConversationCallback::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "conversationLoaded", "(JLjava/lang/String;Ljava/lang/String;Lnet/jami/daemon/VectMap;)V", NULL 
    },
    {
      "messageReceived", "(Ljava/lang/String;Ljava/lang/String;Lnet/jami/daemon/StringMap;)V", NULL 
    },
    {
      "conversationRequestReceived", "(Ljava/lang/String;Ljava/lang/String;Lnet/jami/daemon/StringMap;)V", NULL 
    },
    {
      "conversationReady", "(Ljava/lang/String;Ljava/lang/String;)V", NULL 
    },
    {
      "conversationRemoved", "(Ljava/lang/String;Ljava/lang/String;)V", NULL 
    },
    {
      "conversationMemberEvent", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V", NULL 
    },
    {
      "onConversationError", "(Ljava/lang/String;Ljava/lang/String;JLjava/lang/String;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("net/jami/daemon/ConversationCallback");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 7; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_new_1StringMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >();
  *(std::map< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_new_1StringMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & reference is null");
    return 0;
  } 
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >((std::map< std::string,std::string > const &)*arg1);
  *(std::map< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_StringMap_1Iterator_1getNextUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,std::string >::iterator *arg1 = (std::map< std::string,std::string >::iterator *) 0 ;
  std::map< std::string,std::string,std::less< std::string > >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string >::iterator **)&jarg1; 
  result = std_map_Sl_std_string_Sc_std_string_Sg__iterator_getNextUnchecked(arg1);
  *(std::map< std::string,std::string,std::less< std::string > >::iterator **)&jresult = new std::map< std::string,std::string,std::less< std::string > >::iterator((const std::map< std::string,std::string,std::less< std::string > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_StringMap_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::map< std::string,std::string >::iterator *arg1 = (std::map< std::string,std::string >::iterator *) 0 ;
  std::map< std::string,std::string >::iterator arg2 ;
  std::map< std::string,std::string >::iterator *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< std::string,std::string >::iterator **)&jarg1; 
  argp2 = *(std::map< std::string,std::string >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< std::string,std::string >::iterator");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__iterator_isNot((std::map< std::string,std::string >::iterator const *)arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_net_jami_daemon_JamiServiceJNI_StringMap_1Iterator_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::map< std::string,std::string >::iterator *arg1 = (std::map< std::string,std::string >::iterator *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string >::iterator **)&jarg1; 
  result = std_map_Sl_std_string_Sc_std_string_Sg__iterator_getKey((std::map< std::string,std::string >::iterator const *)arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_net_jami_daemon_JamiServiceJNI_StringMap_1Iterator_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::map< std::string,std::string >::iterator *arg1 = (std::map< std::string,std::string >::iterator *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string >::iterator **)&jarg1; 
  result = std_map_Sl_std_string_Sc_std_string_Sg__iterator_getValue((std::map< std::string,std::string >::iterator const *)arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_StringMap_1Iterator_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::map< std::string,std::string >::iterator *arg1 = (std::map< std::string,std::string >::iterator *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string >::iterator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  std_map_Sl_std_string_Sc_std_string_Sg__iterator_setValue(arg1,(std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_delete_1StringMap_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< std::string,std::string >::iterator *arg1 = (std::map< std::string,std::string >::iterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< std::string,std::string >::iterator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_StringMap_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  result = (bool)((std::map< std::string,std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_StringMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_StringMap_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,std::string >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->find((std::string const &)*arg2);
  *(std::map< std::string,std::string >::iterator **)&jresult = new std::map< std::string,std::string >::iterator((const std::map< std::string,std::string >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_StringMap_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  result = (arg1)->begin();
  *(std::map< std::string,std::string >::iterator **)&jresult = new std::map< std::string,std::string >::iterator((const std::map< std::string,std::string >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_StringMap_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  result = (arg1)->end();
  *(std::map< std::string,std::string >::iterator **)&jresult = new std::map< std::string,std::string >::iterator((const std::map< std::string,std::string >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_jami_daemon_JamiServiceJNI_StringMap_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  try {
    result = std_map_Sl_std_string_Sc_std_string_Sg__sizeImpl((std::map< std::string,std::string > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_StringMap_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__containsImpl(arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_StringMap_1putUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  std_map_Sl_std_string_Sc_std_string_Sg__putUnchecked(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_StringMap_1removeUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string,std::less< std::string > >::iterator arg2 ;
  std::map< std::string,std::string,std::less< std::string > >::iterator const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  argp2 = *(std::map< std::string,std::string,std::less< std::string > >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< std::string,std::string,std::less< std::string > >::iterator const");
    return ;
  }
  arg2 = *argp2; 
  std_map_Sl_std_string_Sc_std_string_Sg__removeUnchecked(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_StringMap_1keys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  result = std_map_Sl_std_string_Sc_std_string_Sg__keys((std::map< std::string,std::string > const *)arg1);
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_StringMap_1setRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< uint8_t > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< uint8_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint8_t > const & reference is null");
    return ;
  } 
  std_map_Sl_std_string_Sc_std_string_Sg__setRaw(arg1,(std::string const &)*arg2,(std::vector< unsigned char > const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_StringMap_1getRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< uint8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = std_map_Sl_std_string_Sc_std_string_Sg__getRaw(arg1,(std::string const &)*arg2);
  *(std::vector< uint8_t > **)&jresult = new std::vector< uint8_t >((const std::vector< uint8_t > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_delete_1StringMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_new_1StringVect_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_new_1StringVect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_StringVect_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_StringVect_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_StringVect_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_StringVect_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_new_1StringVect_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  jint arg1 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (std::vector< std::string > *)new_std_vector_Sl_std_string_Sg___SWIG_2(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_jami_daemon_JamiServiceJNI_StringVect_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  try {
    result = std_vector_Sl_std_string_Sg__doSize((std::vector< std::string > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_StringVect_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  std_vector_Sl_std_string_Sg__doAdd__SWIG_0(arg1,(std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_StringVect_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__doAdd__SWIG_1(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jstring JNICALL Java_net_jami_daemon_JamiServiceJNI_StringVect_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_std_string_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_net_jami_daemon_JamiServiceJNI_StringVect_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_net_jami_daemon_JamiServiceJNI_StringVect_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  std::vector< std::string >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    result = std_vector_Sl_std_string_Sg__doSet(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_StringVect_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_std_string_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_delete_1StringVect(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_new_1VectMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::map< std::string,std::string > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::map< std::string,std::string > > *)new std::vector< std::map< std::string,std::string > >();
  *(std::vector< std::map< std::string,std::string > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_new_1VectMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::map< std::string,std::string,std::less< std::string > > > *arg1 = 0 ;
  std::vector< std::map< std::string,std::string > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::map< std::string,std::string,std::less< std::string > > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::map< std::string,std::string,std::less< std::string > > > const & reference is null");
    return 0;
  } 
  result = (std::vector< std::map< std::string,std::string > > *)new std::vector< std::map< std::string,std::string > >((std::vector< std::map< std::string,std::string,std::less< std::string > > > const &)*arg1);
  *(std::vector< std::map< std::string,std::string > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_VectMap_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;
  std::vector< std::map< std::string,std::string > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::map< std::string,std::string > > **)&jarg1; 
  result = ((std::vector< std::map< std::string,std::string > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_VectMap_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;
  std::vector< std::map< std::string,std::string > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::map< std::string,std::string > > **)&jarg1; 
  arg2 = (std::vector< std::map< std::string,std::string > >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_VectMap_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::map< std::string,std::string > > **)&jarg1; 
  result = (bool)((std::vector< std::map< std::string,std::string > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_VectMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::map< std::string,std::string > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_new_1VectMap_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = 0 ;
  std::vector< std::map< std::string,std::string > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(std::map< std::string,std::string,std::less< std::string > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string,std::less< std::string > > const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< std::map< std::string,std::string > > *)new_std_vector_Sl_std_map_Sl_std_string_Sc_std_string_Sg__Sg___SWIG_2(arg1,(std::map< std::string,std::string,std::less< std::string > > const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::map< std::string,std::string > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_jami_daemon_JamiServiceJNI_VectMap_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::map< std::string,std::string > > **)&jarg1; 
  try {
    result = std_vector_Sl_std_map_Sl_std_string_Sc_std_string_Sg__Sg__doSize((std::vector< std::map< std::string,std::string > > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_VectMap_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;
  std::vector< std::map< std::string,std::string > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::map< std::string,std::string > > **)&jarg1; 
  arg2 = *(std::vector< std::map< std::string,std::string > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::map< std::string,std::string > >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_std_map_Sl_std_string_Sc_std_string_Sg__Sg__doAdd__SWIG_0(arg1,(std::map< std::string,std::string,std::less< std::string > > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_VectMap_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;
  jint arg2 ;
  std::vector< std::map< std::string,std::string > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::map< std::string,std::string > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< std::map< std::string,std::string > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::map< std::string,std::string > >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_std_map_Sl_std_string_Sc_std_string_Sg__Sg__doAdd__SWIG_1(arg1,arg2,(std::map< std::string,std::string,std::less< std::string > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_VectMap_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;
  jint arg2 ;
  std::vector< std::map< std::string,std::string > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::map< std::string,std::string > > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_std_map_Sl_std_string_Sc_std_string_Sg__Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::map< std::string,std::string > >::value_type **)&jresult = new std::vector< std::map< std::string,std::string > >::value_type((const std::vector< std::map< std::string,std::string > >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_VectMap_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;
  jint arg2 ;
  std::vector< std::map< std::string,std::string > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::map< std::string,std::string > > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< std::map< std::string,std::string > >::value_type *) &std_vector_Sl_std_map_Sl_std_string_Sc_std_string_Sg__Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::map< std::string,std::string > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_VectMap_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;
  jint arg2 ;
  std::vector< std::map< std::string,std::string > >::value_type *arg3 = 0 ;
  std::vector< std::map< std::string,std::string > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::map< std::string,std::string > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< std::map< std::string,std::string > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::map< std::string,std::string > >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_std_map_Sl_std_string_Sc_std_string_Sg__Sg__doSet(arg1,arg2,(std::map< std::string,std::string,std::less< std::string > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::map< std::string,std::string > >::value_type **)&jresult = new std::vector< std::map< std::string,std::string > >::value_type((const std::vector< std::map< std::string,std::string > >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_VectMap_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::map< std::string,std::string > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_std_map_Sl_std_string_Sc_std_string_Sg__Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_delete_1VectMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::map< std::string,std::string > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_new_1IntegerMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< std::string,int > *)new std::map< std::string,int >();
  *(std::map< std::string,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_new_1IntegerMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,int > *arg1 = 0 ;
  std::map< std::string,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,int > const & reference is null");
    return 0;
  } 
  result = (std::map< std::string,int > *)new std::map< std::string,int >((std::map< std::string,int > const &)*arg1);
  *(std::map< std::string,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_IntegerMap_1Iterator_1getNextUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,int >::iterator *arg1 = (std::map< std::string,int >::iterator *) 0 ;
  std::map< std::string,int,std::less< std::string > >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int >::iterator **)&jarg1; 
  result = std_map_Sl_std_string_Sc_int_Sg__iterator_getNextUnchecked(arg1);
  *(std::map< std::string,int,std::less< std::string > >::iterator **)&jresult = new std::map< std::string,int,std::less< std::string > >::iterator((const std::map< std::string,int,std::less< std::string > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_IntegerMap_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::map< std::string,int >::iterator *arg1 = (std::map< std::string,int >::iterator *) 0 ;
  std::map< std::string,int >::iterator arg2 ;
  std::map< std::string,int >::iterator *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< std::string,int >::iterator **)&jarg1; 
  argp2 = *(std::map< std::string,int >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< std::string,int >::iterator");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)std_map_Sl_std_string_Sc_int_Sg__iterator_isNot((std::map< std::string,int >::iterator const *)arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_net_jami_daemon_JamiServiceJNI_IntegerMap_1Iterator_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::map< std::string,int >::iterator *arg1 = (std::map< std::string,int >::iterator *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int >::iterator **)&jarg1; 
  result = std_map_Sl_std_string_Sc_int_Sg__iterator_getKey((std::map< std::string,int >::iterator const *)arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_jami_daemon_JamiServiceJNI_IntegerMap_1Iterator_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::map< std::string,int >::iterator *arg1 = (std::map< std::string,int >::iterator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int >::iterator **)&jarg1; 
  result = (int)std_map_Sl_std_string_Sc_int_Sg__iterator_getValue((std::map< std::string,int >::iterator const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_IntegerMap_1Iterator_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::map< std::string,int >::iterator *arg1 = (std::map< std::string,int >::iterator *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int >::iterator **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  std_map_Sl_std_string_Sc_int_Sg__iterator_setValue(arg1,(int const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_delete_1IntegerMap_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< std::string,int >::iterator *arg1 = (std::map< std::string,int >::iterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< std::string,int >::iterator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_IntegerMap_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  result = (bool)((std::map< std::string,int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_IntegerMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_IntegerMap_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,int >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->find((std::string const &)*arg2);
  *(std::map< std::string,int >::iterator **)&jresult = new std::map< std::string,int >::iterator((const std::map< std::string,int >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_IntegerMap_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::map< std::string,int >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  result = (arg1)->begin();
  *(std::map< std::string,int >::iterator **)&jresult = new std::map< std::string,int >::iterator((const std::map< std::string,int >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_IntegerMap_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::map< std::string,int >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  result = (arg1)->end();
  *(std::map< std::string,int >::iterator **)&jresult = new std::map< std::string,int >::iterator((const std::map< std::string,int >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_jami_daemon_JamiServiceJNI_IntegerMap_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  try {
    result = std_map_Sl_std_string_Sc_int_Sg__sizeImpl((std::map< std::string,int > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_IntegerMap_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)std_map_Sl_std_string_Sc_int_Sg__containsImpl(arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_IntegerMap_1putUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::string *arg2 = 0 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  std_map_Sl_std_string_Sc_int_Sg__putUnchecked(arg1,(std::string const &)*arg2,(int const &)*arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_IntegerMap_1removeUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::map< std::string,int,std::less< std::string > >::iterator arg2 ;
  std::map< std::string,int,std::less< std::string > >::iterator const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  argp2 = *(std::map< std::string,int,std::less< std::string > >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< std::string,int,std::less< std::string > >::iterator const");
    return ;
  }
  arg2 = *argp2; 
  std_map_Sl_std_string_Sc_int_Sg__removeUnchecked(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_delete_1IntegerMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_new_1IntVect_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< int32_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< int32_t > *)new std::vector< int32_t >();
  *(std::vector< int32_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_new_1IntVect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int32_t > *arg1 = 0 ;
  std::vector< int32_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int32_t > const & reference is null");
    return 0;
  } 
  result = (std::vector< int32_t > *)new std::vector< int32_t >((std::vector< int32_t > const &)*arg1);
  *(std::vector< int32_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_IntVect_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  result = ((std::vector< int32_t > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_IntVect_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_IntVect_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  result = (bool)((std::vector< int32_t > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_IntVect_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_new_1IntVect_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  jint arg1 ;
  int *arg2 = 0 ;
  int temp2 ;
  std::vector< int32_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::vector< int32_t > *)new_std_vector_Sl_int32_t_Sg___SWIG_2(arg1,(int const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< int32_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_jami_daemon_JamiServiceJNI_IntVect_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  try {
    result = std_vector_Sl_int32_t_Sg__doSize((std::vector< int > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_IntVect_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  temp2 = (std::vector< int >::value_type)jarg2; 
  arg2 = &temp2; 
  std_vector_Sl_int32_t_Sg__doAdd__SWIG_0(arg1,(int const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_IntVect_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  jint arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int32_t_Sg__doAdd__SWIG_1(arg1,arg2,(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jint JNICALL Java_net_jami_daemon_JamiServiceJNI_IntVect_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  jint arg2 ;
  std::vector< int >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< int >::value_type)std_vector_Sl_int32_t_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_jami_daemon_JamiServiceJNI_IntVect_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  jint arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int32_t_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_jami_daemon_JamiServiceJNI_IntVect_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  jint arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  std::vector< int >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    result = (std::vector< int >::value_type)std_vector_Sl_int32_t_Sg__doSet(arg1,arg2,(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_IntVect_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_int32_t_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_delete_1IntVect(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_new_1UintVect_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< uint32_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< uint32_t > *)new std::vector< uint32_t >();
  *(std::vector< uint32_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_new_1UintVect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< uint32_t > *arg1 = 0 ;
  std::vector< uint32_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint32_t > const & reference is null");
    return 0;
  } 
  result = (std::vector< uint32_t > *)new std::vector< uint32_t >((std::vector< uint32_t > const &)*arg1);
  *(std::vector< uint32_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_UintVect_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  result = ((std::vector< uint32_t > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_UintVect_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  arg2 = (std::vector< unsigned int >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_UintVect_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  result = (bool)((std::vector< uint32_t > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_UintVect_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_new_1UintVect_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  jint arg1 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  std::vector< uint32_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::vector< uint32_t > *)new_std_vector_Sl_uint32_t_Sg___SWIG_2(arg1,(unsigned int const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< uint32_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_jami_daemon_JamiServiceJNI_UintVect_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  try {
    result = std_vector_Sl_uint32_t_Sg__doSize((std::vector< unsigned int > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_UintVect_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::value_type *arg2 = 0 ;
  std::vector< unsigned int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  temp2 = (std::vector< unsigned int >::value_type)jarg2; 
  arg2 = &temp2; 
  std_vector_Sl_uint32_t_Sg__doAdd__SWIG_0(arg1,(unsigned int const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_UintVect_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned int >::value_type *arg3 = 0 ;
  std::vector< unsigned int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< unsigned int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_uint32_t_Sg__doAdd__SWIG_1(arg1,arg2,(unsigned int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_UintVect_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned int >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< unsigned int >::value_type)std_vector_Sl_uint32_t_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_UintVect_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< unsigned int >::value_type *) &std_vector_Sl_uint32_t_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_UintVect_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned int >::value_type *arg3 = 0 ;
  std::vector< unsigned int >::value_type temp3 ;
  std::vector< unsigned int >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< unsigned int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    result = (std::vector< unsigned int >::value_type)std_vector_Sl_uint32_t_Sg__doSet(arg1,arg2,(unsigned int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_UintVect_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_uint32_t_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_delete_1UintVect(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_new_1Blob_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< uint8_t > *)new std::vector< uint8_t >();
  *(std::vector< uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_new_1Blob_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< uint8_t > *arg1 = 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint8_t > const & reference is null");
    return 0;
  } 
  result = (std::vector< uint8_t > *)new std::vector< uint8_t >((std::vector< uint8_t > const &)*arg1);
  *(std::vector< uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_Blob_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  result = ((std::vector< uint8_t > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Blob_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = (std::vector< unsigned char >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_Blob_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  result = (bool)((std::vector< uint8_t > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Blob_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_new_1Blob_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jbyte jarg2) {
  jlong jresult = 0 ;
  jint arg1 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  std::vector< uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::vector< uint8_t > *)new_std_vector_Sl_uint8_t_Sg___SWIG_2(arg1,(unsigned char const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_jami_daemon_JamiServiceJNI_Blob_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  try {
    result = std_vector_Sl_uint8_t_Sg__doSize((std::vector< unsigned char > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Blob_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyte jarg2) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::value_type *arg2 = 0 ;
  std::vector< unsigned char >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  temp2 = (std::vector< unsigned char >::value_type)jarg2; 
  arg2 = &temp2; 
  std_vector_Sl_uint8_t_Sg__doAdd__SWIG_0(arg1,(unsigned char const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Blob_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jbyte jarg3) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned char >::value_type *arg3 = 0 ;
  std::vector< unsigned char >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< unsigned char >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_uint8_t_Sg__doAdd__SWIG_1(arg1,arg2,(unsigned char const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jbyte JNICALL Java_net_jami_daemon_JamiServiceJNI_Blob_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jbyte jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned char >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< unsigned char >::value_type)std_vector_Sl_uint8_t_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jbyte)result; 
  return jresult;
}


SWIGEXPORT jbyte JNICALL Java_net_jami_daemon_JamiServiceJNI_Blob_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jbyte jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned char >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< unsigned char >::value_type *) &std_vector_Sl_uint8_t_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jbyte)*result; 
  return jresult;
}


SWIGEXPORT jbyte JNICALL Java_net_jami_daemon_JamiServiceJNI_Blob_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jbyte jarg3) {
  jbyte jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned char >::value_type *arg3 = 0 ;
  std::vector< unsigned char >::value_type temp3 ;
  std::vector< unsigned char >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< unsigned char >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    result = (std::vector< unsigned char >::value_type)std_vector_Sl_uint8_t_Sg__doSet(arg1,arg2,(unsigned char const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jbyte)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Blob_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_uint8_t_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_delete_1Blob(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_new_1FloatVect_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< float > *)new std::vector< float >();
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_new_1FloatVect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< float > *arg1 = 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< float > const & reference is null");
    return 0;
  } 
  result = (std::vector< float > *)new std::vector< float >((std::vector< float > const &)*arg1);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_FloatVect_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  result = ((std::vector< float > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_FloatVect_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  arg2 = (std::vector< float >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_FloatVect_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  result = (bool)((std::vector< float > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_FloatVect_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_new_1FloatVect_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  jint arg1 ;
  float *arg2 = 0 ;
  float temp2 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::vector< float > *)new_std_vector_Sl_float_Sg___SWIG_2(arg1,(float const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_jami_daemon_JamiServiceJNI_FloatVect_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  try {
    result = std_vector_Sl_float_Sg__doSize((std::vector< float > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_FloatVect_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::value_type *arg2 = 0 ;
  std::vector< float >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  temp2 = (std::vector< float >::value_type)jarg2; 
  arg2 = &temp2; 
  std_vector_Sl_float_Sg__doAdd__SWIG_0(arg1,(float const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_FloatVect_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  jint arg2 ;
  std::vector< float >::value_type *arg3 = 0 ;
  std::vector< float >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< float >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_float_Sg__doAdd__SWIG_1(arg1,arg2,(float const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jfloat JNICALL Java_net_jami_daemon_JamiServiceJNI_FloatVect_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  jint arg2 ;
  std::vector< float >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< float >::value_type)std_vector_Sl_float_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_net_jami_daemon_JamiServiceJNI_FloatVect_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  jint arg2 ;
  std::vector< float >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< float >::value_type *) &std_vector_Sl_float_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jfloat)*result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_net_jami_daemon_JamiServiceJNI_FloatVect_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  jfloat jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  jint arg2 ;
  std::vector< float >::value_type *arg3 = 0 ;
  std::vector< float >::value_type temp3 ;
  std::vector< float >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< float >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    result = (std::vector< float >::value_type)std_vector_Sl_float_Sg__doSet(arg1,arg2,(float const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_FloatVect_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_float_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_delete_1FloatVect(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< float > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_fini(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  DRing::fini();
}


SWIGEXPORT jstring JNICALL Java_net_jami_daemon_JamiServiceJNI_placeCall(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg3 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::map< std::string,std::string,std::less< std::string > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string,std::less< std::string > > const & reference is null");
    return 0;
  } 
  result = DRing::placeCall((std::string const &)*arg1,(std::string const &)*arg2,(std::map< std::string,std::string,std::less< std::string > > const &)*arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_refuse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::refuse((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_accept(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::accept((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_hangUp(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::hangUp((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_hold(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::hold((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_unhold(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::unhold((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_muteLocalMedia(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (bool)DRing::muteLocalMedia((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_transfer(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)DRing::transfer((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_attendedTransfer(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)DRing::attendedTransfer((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getCallDetails(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getCallDetails((std::string const &)*arg1);
  *(std::map< std::string,std::string,std::less< std::string > > **)&jresult = new std::map< std::string,std::string,std::less< std::string > >((const std::map< std::string,std::string,std::less< std::string > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getCallList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getCallList();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_removeConference(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  DRing::removeConference((std::string const &)*arg1);
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_joinParticipant(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)DRing::joinParticipant((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_createConfFromParticipantList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return ;
  } 
  DRing::createConfFromParticipantList((std::vector< std::string > const &)*arg1);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_setConferenceLayout(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  std::string *arg1 = 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  DRing::setConferenceLayout((std::string const &)*arg1,arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_setActiveParticipant(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  DRing::setActiveParticipant((std::string const &)*arg1,(std::string const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_isConferenceParticipant(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::isConferenceParticipant((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_addParticipant(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)DRing::addParticipant((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_addMainParticipant(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::addMainParticipant((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_detachParticipant(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::detachParticipant((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_joinConference(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)DRing::joinConference((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_hangUpConference(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::hangUpConference((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_holdConference(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::holdConference((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_unholdConference(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::unholdConference((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getConferenceList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getConferenceList();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getParticipantList(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getParticipantList((std::string const &)*arg1);
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getDisplayNames(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getDisplayNames((std::string const &)*arg1);
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_net_jami_daemon_JamiServiceJNI_getConferenceId(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getConferenceId((std::string const &)*arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getConferenceDetails(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getConferenceDetails((std::string const &)*arg1);
  *(std::map< std::string,std::string,std::less< std::string > > **)&jresult = new std::map< std::string,std::string,std::less< std::string > >((const std::map< std::string,std::string,std::less< std::string > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getConferenceInfos(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::vector< std::map< std::string,std::string,std::less< std::string > > > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getConferenceInfos((std::string const &)*arg1);
  *(std::vector< std::map< std::string,std::string,std::less< std::string > > > **)&jresult = new std::vector< std::map< std::string,std::string,std::less< std::string > > >((const std::vector< std::map< std::string,std::string,std::less< std::string > > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_setModerator(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jboolean jarg3) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool *arg3 = 0 ;
  bool temp3 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  DRing::setModerator((std::string const &)*arg1,(std::string const &)*arg2,(bool const &)*arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_muteParticipant(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jboolean jarg3) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool *arg3 = 0 ;
  bool temp3 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  DRing::muteParticipant((std::string const &)*arg1,(std::string const &)*arg2,(bool const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_startRecordedFilePlayback(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::startRecordedFilePlayback((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_stopRecordedFilePlayback(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  DRing::stopRecordedFilePlayback();
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_toggleRecording(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::toggleRecording((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_setRecording(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  DRing::setRecording((std::string const &)*arg1);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_recordPlaybackSeek(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  double arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  DRing::recordPlaybackSeek(arg1);
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_getIsRecording(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::getIsRecording((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_net_jami_daemon_JamiServiceJNI_getCurrentAudioCodecName(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getCurrentAudioCodecName((std::string const &)*arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_playDTMF(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  DRing::playDTMF((std::string const &)*arg1);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_startTone(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  int32_t arg1 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32_t)jarg1; 
  arg2 = (int32_t)jarg2; 
  DRing::startTone(arg1,arg2);
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_switchInput_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)DRing::switchInput((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_sendTextMessage(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jstring jarg3, jboolean jarg4) {
  std::string *arg1 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool *arg4 = 0 ;
  bool temp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::map< std::string,std::string,std::less< std::string > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string,std::less< std::string > > const & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  temp4 = jarg4 ? true : false; 
  arg4 = &temp4; 
  DRing::sendTextMessage((std::string const &)*arg1,(std::map< std::string,std::string,std::less< std::string > > const &)*arg2,(std::string const &)*arg3,(bool const &)*arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_delete_1Callback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Callback *arg1 = (Callback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Callback **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1callStateChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  (arg1)->callStateChanged((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1callStateChangedSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  (arg1)->Callback::callStateChanged((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1transferFailed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Callback *arg1 = (Callback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  (arg1)->transferFailed();
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1transferFailedSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Callback *arg1 = (Callback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  (arg1)->Callback::transferFailed();
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1transferSucceeded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Callback *arg1 = (Callback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  (arg1)->transferSucceeded();
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1transferSucceededSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Callback *arg1 = (Callback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  (arg1)->Callback::transferSucceeded();
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1recordPlaybackStopped(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->recordPlaybackStopped((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1recordPlaybackStoppedSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->Callback::recordPlaybackStopped((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1voiceMailNotify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jint jarg5) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->voiceMailNotify((std::string const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1voiceMailNotifySwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jint jarg5) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->Callback::voiceMailNotify((std::string const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1incomingMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(std::map< std::string,std::string,std::less< std::string > > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string,std::less< std::string > > const & reference is null");
    return ;
  } 
  (arg1)->incomingMessage((std::string const &)*arg2,(std::string const &)*arg3,(std::map< std::string,std::string,std::less< std::string > > const &)*arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1incomingMessageSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(std::map< std::string,std::string,std::less< std::string > > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string,std::less< std::string > > const & reference is null");
    return ;
  } 
  (arg1)->Callback::incomingMessage((std::string const &)*arg2,(std::string const &)*arg3,(std::map< std::string,std::string,std::less< std::string > > const &)*arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1incomingCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->incomingCall((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1incomingCallSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->Callback::incomingCall((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1recordPlaybackFilepath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->recordPlaybackFilepath((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1recordPlaybackFilepathSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->Callback::recordPlaybackFilepath((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1conferenceCreated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->conferenceCreated((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1conferenceCreatedSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->Callback::conferenceCreated((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1conferenceChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->conferenceChanged((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1conferenceChangedSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->Callback::conferenceChanged((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1conferenceRemoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->conferenceRemoved((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1conferenceRemovedSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->Callback::conferenceRemoved((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1updatePlaybackScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->updatePlaybackScale((std::string const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1updatePlaybackScaleSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->Callback::updatePlaybackScale((std::string const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1newCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->newCall((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1newCallSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->Callback::newCall((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1sipCallStateChange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  (arg1)->sipCallStateChange((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1sipCallStateChangeSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  (arg1)->Callback::sipCallStateChange((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1recordingStateChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  (arg1)->recordingStateChanged((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1recordingStateChangedSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  (arg1)->Callback::recordingStateChanged((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1recordStateChange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  (arg1)->recordStateChange((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1recordStateChangeSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  (arg1)->Callback::recordStateChange((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1onRtcpReportReceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,int,std::less< std::string > > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::map< std::string,int,std::less< std::string > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,int,std::less< std::string > > const & reference is null");
    return ;
  } 
  (arg1)->onRtcpReportReceived((std::string const &)*arg2,(std::map< std::string,int,std::less< std::string > > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1onRtcpReportReceivedSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,int,std::less< std::string > > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::map< std::string,int,std::less< std::string > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,int,std::less< std::string > > const & reference is null");
    return ;
  } 
  (arg1)->Callback::onRtcpReportReceived((std::string const &)*arg2,(std::map< std::string,int,std::less< std::string > > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1onConferenceInfosUpdated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::map< std::string,std::string,std::less< std::string > > > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< std::map< std::string,std::string,std::less< std::string > > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::map< std::string,std::string,std::less< std::string > > > const & reference is null");
    return ;
  } 
  (arg1)->onConferenceInfosUpdated((std::string const &)*arg2,(std::vector< std::map< std::string,std::string,std::less< std::string > > > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1onConferenceInfosUpdatedSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::map< std::string,std::string,std::less< std::string > > > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< std::map< std::string,std::string,std::less< std::string > > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::map< std::string,std::string,std::less< std::string > > > const & reference is null");
    return ;
  } 
  (arg1)->Callback::onConferenceInfosUpdated((std::string const &)*arg2,(std::vector< std::map< std::string,std::string,std::less< std::string > > > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1peerHold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  (arg1)->peerHold((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1peerHoldSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  (arg1)->Callback::peerHold((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1connectionUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  (arg1)->connectionUpdate((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1connectionUpdateSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  (arg1)->Callback::connectionUpdate((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1remoteRecordingChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  (arg1)->remoteRecordingChanged((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1remoteRecordingChangedSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  (arg1)->Callback::remoteRecordingChanged((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_new_1Callback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Callback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Callback *)new SwigDirector_Callback(jenv);
  *(Callback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  Callback *obj = *((Callback **)&objarg);
  (void)jcls;
  SwigDirector_Callback *director = static_cast<SwigDirector_Callback *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Callback_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  Callback *obj = *((Callback **)&objarg);
  SwigDirector_Callback *director = dynamic_cast<SwigDirector_Callback *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_new_1MessageVect_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< DRing::Message > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< DRing::Message > *)new std::vector< DRing::Message >();
  *(std::vector< DRing::Message > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_new_1MessageVect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< DRing::Message > *arg1 = 0 ;
  std::vector< DRing::Message > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< DRing::Message > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< DRing::Message > const & reference is null");
    return 0;
  } 
  result = (std::vector< DRing::Message > *)new std::vector< DRing::Message >((std::vector< DRing::Message > const &)*arg1);
  *(std::vector< DRing::Message > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_MessageVect_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< DRing::Message > *arg1 = (std::vector< DRing::Message > *) 0 ;
  std::vector< DRing::Message >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< DRing::Message > **)&jarg1; 
  result = ((std::vector< DRing::Message > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_MessageVect_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< DRing::Message > *arg1 = (std::vector< DRing::Message > *) 0 ;
  std::vector< DRing::Message >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< DRing::Message > **)&jarg1; 
  arg2 = (std::vector< DRing::Message >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_MessageVect_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< DRing::Message > *arg1 = (std::vector< DRing::Message > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< DRing::Message > **)&jarg1; 
  result = (bool)((std::vector< DRing::Message > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_MessageVect_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< DRing::Message > *arg1 = (std::vector< DRing::Message > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< DRing::Message > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_new_1MessageVect_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  DRing::Message *arg2 = 0 ;
  std::vector< DRing::Message > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(DRing::Message **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DRing::Message const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< DRing::Message > *)new_std_vector_Sl_DRing_Message_Sg___SWIG_2(arg1,(DRing::Message const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< DRing::Message > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_jami_daemon_JamiServiceJNI_MessageVect_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< DRing::Message > *arg1 = (std::vector< DRing::Message > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< DRing::Message > **)&jarg1; 
  try {
    result = std_vector_Sl_DRing_Message_Sg__doSize((std::vector< DRing::Message > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_MessageVect_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< DRing::Message > *arg1 = (std::vector< DRing::Message > *) 0 ;
  std::vector< DRing::Message >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< DRing::Message > **)&jarg1; 
  arg2 = *(std::vector< DRing::Message >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< DRing::Message >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_DRing_Message_Sg__doAdd__SWIG_0(arg1,(DRing::Message const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_MessageVect_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< DRing::Message > *arg1 = (std::vector< DRing::Message > *) 0 ;
  jint arg2 ;
  std::vector< DRing::Message >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< DRing::Message > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< DRing::Message >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< DRing::Message >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_DRing_Message_Sg__doAdd__SWIG_1(arg1,arg2,(DRing::Message const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_MessageVect_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< DRing::Message > *arg1 = (std::vector< DRing::Message > *) 0 ;
  jint arg2 ;
  std::vector< DRing::Message >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< DRing::Message > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_DRing_Message_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< DRing::Message >::value_type **)&jresult = new std::vector< DRing::Message >::value_type((const std::vector< DRing::Message >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_MessageVect_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< DRing::Message > *arg1 = (std::vector< DRing::Message > *) 0 ;
  jint arg2 ;
  std::vector< DRing::Message >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< DRing::Message > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< DRing::Message >::value_type *) &std_vector_Sl_DRing_Message_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< DRing::Message >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_MessageVect_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< DRing::Message > *arg1 = (std::vector< DRing::Message > *) 0 ;
  jint arg2 ;
  std::vector< DRing::Message >::value_type *arg3 = 0 ;
  std::vector< DRing::Message >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< DRing::Message > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< DRing::Message >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< DRing::Message >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_DRing_Message_Sg__doSet(arg1,arg2,(DRing::Message const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< DRing::Message >::value_type **)&jresult = new std::vector< DRing::Message >::value_type((const std::vector< DRing::Message >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_MessageVect_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< DRing::Message > *arg1 = (std::vector< DRing::Message > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< DRing::Message > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_DRing_Message_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_delete_1MessageVect(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< DRing::Message > *arg1 = (std::vector< DRing::Message > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< DRing::Message > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Message_1from_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  DRing::Message *arg1 = (DRing::Message *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DRing::Message **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->from = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_jami_daemon_JamiServiceJNI_Message_1from_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  DRing::Message *arg1 = (DRing::Message *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DRing::Message **)&jarg1; 
  result = (std::string *) & ((arg1)->from);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Message_1payloads_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DRing::Message *arg1 = (DRing::Message *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = (std::map< std::string,std::string,std::less< std::string > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DRing::Message **)&jarg1; 
  arg2 = *(std::map< std::string,std::string,std::less< std::string > > **)&jarg2; 
  if (arg1) (arg1)->payloads = *arg2;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_Message_1payloads_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DRing::Message *arg1 = (DRing::Message *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DRing::Message **)&jarg1; 
  result = (std::map< std::string,std::string,std::less< std::string > > *)& ((arg1)->payloads);
  *(std::map< std::string,std::string,std::less< std::string > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_Message_1received_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  DRing::Message *arg1 = (DRing::Message *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DRing::Message **)&jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->received = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_Message_1received_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DRing::Message *arg1 = (DRing::Message *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DRing::Message **)&jarg1; 
  result = (uint64_t) ((arg1)->received);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_new_1Message(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DRing::Message *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DRing::Message *)new DRing::Message();
  *(DRing::Message **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_delete_1Message(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DRing::Message *arg1 = (DRing::Message *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DRing::Message **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getAccountDetails(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getAccountDetails((std::string const &)*arg1);
  *(std::map< std::string,std::string,std::less< std::string > > **)&jresult = new std::map< std::string,std::string,std::less< std::string > >((const std::map< std::string,std::string,std::less< std::string > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getVolatileAccountDetails(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getVolatileAccountDetails((std::string const &)*arg1);
  *(std::map< std::string,std::string,std::less< std::string > > **)&jresult = new std::map< std::string,std::string,std::less< std::string > >((const std::map< std::string,std::string,std::less< std::string > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_setAccountDetails(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::map< std::string,std::string,std::less< std::string > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string,std::less< std::string > > const & reference is null");
    return ;
  } 
  DRing::setAccountDetails((std::string const &)*arg1,(std::map< std::string,std::string,std::less< std::string > > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_setAccountActive(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  std::string *arg1 = 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  DRing::setAccountActive((std::string const &)*arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getAccountTemplate(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getAccountTemplate((std::string const &)*arg1);
  *(std::map< std::string,std::string,std::less< std::string > > **)&jresult = new std::map< std::string,std::string,std::less< std::string > >((const std::map< std::string,std::string,std::less< std::string > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_monitor(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  DRing::monitor(arg1);
}


SWIGEXPORT jstring JNICALL Java_net_jami_daemon_JamiServiceJNI_addAccount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string,std::less< std::string > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string,std::less< std::string > > const & reference is null");
    return 0;
  } 
  result = DRing::addAccount((std::map< std::string,std::string,std::less< std::string > > const &)*arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_removeAccount(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  DRing::removeAccount((std::string const &)*arg1);
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getAccountList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getAccountList();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_sendRegister(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  std::string *arg1 = 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  DRing::sendRegister((std::string const &)*arg1,arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_registerAllAccounts(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  DRing::registerAllAccounts();
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_sendAccountTextMessage(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg3 = 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::map< std::string,std::string,std::less< std::string > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string,std::less< std::string > > const & reference is null");
    return 0;
  } 
  result = (uint64_t)DRing::sendAccountTextMessage((std::string const &)*arg1,(std::string const &)*arg2,(std::map< std::string,std::string,std::less< std::string > > const &)*arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getLastMessages(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  uint64_t arg2 ;
  std::vector< DRing::Message > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (uint64_t)jarg2; 
  result = DRing::getLastMessages((std::string const &)*arg1,arg2);
  *(std::vector< DRing::Message > **)&jresult = new std::vector< DRing::Message >((const std::vector< DRing::Message > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_jami_daemon_JamiServiceJNI_getMessageStatus_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  uint64_t arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint64_t)jarg1; 
  result = (int)DRing::getMessageStatus(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_jami_daemon_JamiServiceJNI_getMessageStatus_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  uint64_t arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (uint64_t)jarg2; 
  result = (int)DRing::getMessageStatus((std::string const &)*arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_cancelMessage(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  uint64_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (uint64_t)jarg2; 
  result = (bool)DRing::cancelMessage((std::string const &)*arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_setIsComposing(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jboolean jarg3) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  DRing::setIsComposing((std::string const &)*arg1,(std::string const &)*arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_setMessageDisplayed(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  result = (bool)DRing::setMessageDisplayed((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_changeAccountPassword(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)DRing::changeAccountPassword((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_lookupName(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)DRing::lookupName((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_lookupAddress(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)DRing::lookupAddress((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_registerName(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)DRing::registerName((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_searchUser(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)DRing::searchUser((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getCodecList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< unsigned int > result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getCodecList();
  *(std::vector< unsigned int > **)&jresult = new std::vector< unsigned int >((const std::vector< unsigned int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getSupportedTlsMethod(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getSupportedTlsMethod();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getSupportedCiphers(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getSupportedCiphers((std::string const &)*arg1);
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getCodecDetails(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  result = DRing::getCodecDetails((std::string const &)*arg1,(unsigned int const &)*arg2);
  *(std::map< std::string,std::string,std::less< std::string > > **)&jresult = new std::map< std::string,std::string,std::less< std::string > >((const std::map< std::string,std::string,std::less< std::string > > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_setCodecDetails(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  unsigned int *arg2 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg3 = 0 ;
  unsigned int temp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  arg3 = *(std::map< std::string,std::string,std::less< std::string > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string,std::less< std::string > > const & reference is null");
    return 0;
  } 
  result = (bool)DRing::setCodecDetails((std::string const &)*arg1,(unsigned int const &)*arg2,(std::map< std::string,std::string,std::less< std::string > > const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getActiveCodecList(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::vector< unsigned int > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getActiveCodecList((std::string const &)*arg1);
  *(std::vector< unsigned int > **)&jresult = new std::vector< unsigned int >((const std::vector< unsigned int > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_exportOnRing(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)DRing::exportOnRing((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_exportToFile(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)DRing::exportToFile((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getKnownRingDevices(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getKnownRingDevices((std::string const &)*arg1);
  *(std::map< std::string,std::string,std::less< std::string > > **)&jresult = new std::map< std::string,std::string,std::less< std::string > >((const std::map< std::string,std::string,std::less< std::string > > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_revokeDevice(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)DRing::revokeDevice((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_setActiveCodecList(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  std::vector< unsigned int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::vector< unsigned int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned int > const & reference is null");
    return ;
  } 
  DRing::setActiveCodecList((std::string const &)*arg1,(std::vector< unsigned int > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getAudioPluginList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getAudioPluginList();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_setAudioPlugin(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  DRing::setAudioPlugin((std::string const &)*arg1);
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getAudioOutputDeviceList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getAudioOutputDeviceList();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_setAudioOutputDevice(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int32_t arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32_t)jarg1; 
  DRing::setAudioOutputDevice(arg1);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_setAudioInputDevice(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int32_t arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32_t)jarg1; 
  DRing::setAudioInputDevice(arg1);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_setAudioRingtoneDevice(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int32_t arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32_t)jarg1; 
  DRing::setAudioRingtoneDevice(arg1);
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getAudioInputDeviceList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getAudioInputDeviceList();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getCurrentAudioDevicesIndex(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getCurrentAudioDevicesIndex();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_jami_daemon_JamiServiceJNI_getAudioInputDeviceIndex(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (int32_t)DRing::getAudioInputDeviceIndex((std::string const &)*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_jami_daemon_JamiServiceJNI_getAudioOutputDeviceIndex(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (int32_t)DRing::getAudioOutputDeviceIndex((std::string const &)*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_net_jami_daemon_JamiServiceJNI_getCurrentAudioOutputPlugin(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getCurrentAudioOutputPlugin();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_getNoiseSuppressState(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)DRing::getNoiseSuppressState();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_setNoiseSuppressState(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  DRing::setNoiseSuppressState(arg1);
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_isAgcEnabled(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)DRing::isAgcEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_setAgcState(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  DRing::setAgcState(arg1);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_muteDtmf(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  DRing::muteDtmf(arg1);
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_isDtmfMuted(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)DRing::isDtmfMuted();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_isCaptureMuted(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)DRing::isCaptureMuted();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_muteCapture(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  DRing::muteCapture(arg1);
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_isPlaybackMuted(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)DRing::isPlaybackMuted();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_mutePlayback(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  DRing::mutePlayback(arg1);
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_isRingtoneMuted(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)DRing::isRingtoneMuted();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_muteRingtone(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  DRing::muteRingtone(arg1);
}


SWIGEXPORT jstring JNICALL Java_net_jami_daemon_JamiServiceJNI_getAudioManager(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getAudioManager();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_setAudioManager(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::setAudioManager((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_net_jami_daemon_JamiServiceJNI_getRecordPath(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getRecordPath();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_setRecordPath(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  DRing::setRecordPath((std::string const &)*arg1);
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_getIsAlwaysRecording(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)DRing::getIsAlwaysRecording();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_setIsAlwaysRecording(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  DRing::setIsAlwaysRecording(arg1);
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_getRecordPreview(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)DRing::getRecordPreview();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_setRecordPreview(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  DRing::setRecordPreview(arg1);
}


SWIGEXPORT jint JNICALL Java_net_jami_daemon_JamiServiceJNI_getRecordQuality(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (int32_t)DRing::getRecordQuality();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_setRecordQuality(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int32_t arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32_t)jarg1; 
  DRing::setRecordQuality(arg1);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_setHistoryLimit(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int32_t arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32_t)jarg1; 
  DRing::setHistoryLimit(arg1);
}


SWIGEXPORT jint JNICALL Java_net_jami_daemon_JamiServiceJNI_getHistoryLimit(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (int32_t)DRing::getHistoryLimit();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_setRingingTimeout(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int32_t arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32_t)jarg1; 
  DRing::setRingingTimeout(arg1);
}


SWIGEXPORT jint JNICALL Java_net_jami_daemon_JamiServiceJNI_getRingingTimeout(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (int32_t)DRing::getRingingTimeout();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_setAccountsOrder(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  DRing::setAccountsOrder((std::string const &)*arg1);
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getCredentials(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::vector< std::map< std::string,std::string,std::less< std::string > > > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getCredentials((std::string const &)*arg1);
  *(std::vector< std::map< std::string,std::string,std::less< std::string > > > **)&jresult = new std::vector< std::map< std::string,std::string,std::less< std::string > > >((const std::vector< std::map< std::string,std::string,std::less< std::string > > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_setCredentials(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  std::vector< std::map< std::string,std::string,std::less< std::string > > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::vector< std::map< std::string,std::string,std::less< std::string > > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::map< std::string,std::string,std::less< std::string > > > const & reference is null");
    return ;
  } 
  DRing::setCredentials((std::string const &)*arg1,(std::vector< std::map< std::string,std::string,std::less< std::string > > > const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_net_jami_daemon_JamiServiceJNI_getAddrFromInterfaceName(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getAddrFromInterfaceName((std::string const &)*arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getAllIpInterface(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getAllIpInterface();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getAllIpInterfaceByName(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getAllIpInterfaceByName();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getShortcuts(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getShortcuts();
  *(std::map< std::string,std::string,std::less< std::string > > **)&jresult = new std::map< std::string,std::string,std::less< std::string > >((const std::map< std::string,std::string,std::less< std::string > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_setShortcuts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< std::string,std::string,std::less< std::string > > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string,std::less< std::string > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string,std::less< std::string > > const & reference is null");
    return ;
  } 
  DRing::setShortcuts((std::map< std::string,std::string,std::less< std::string > > const &)*arg1);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_setVolume(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2) {
  std::string *arg1 = 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (double)jarg2; 
  DRing::setVolume((std::string const &)*arg1,arg2);
}


SWIGEXPORT jdouble JNICALL Java_net_jami_daemon_JamiServiceJNI_getVolume(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jdouble jresult = 0 ;
  std::string *arg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (double)DRing::getVolume((std::string const &)*arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_validateCertificatePath(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = DRing::validateCertificatePath((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  *(std::map< std::string,std::string,std::less< std::string > > **)&jresult = new std::map< std::string,std::string,std::less< std::string > >((const std::map< std::string,std::string,std::less< std::string > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_validateCertificate(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = DRing::validateCertificate((std::string const &)*arg1,(std::string const &)*arg2);
  *(std::map< std::string,std::string,std::less< std::string > > **)&jresult = new std::map< std::string,std::string,std::less< std::string > >((const std::map< std::string,std::string,std::less< std::string > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getCertificateDetails(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getCertificateDetails((std::string const &)*arg1);
  *(std::map< std::string,std::string,std::less< std::string > > **)&jresult = new std::map< std::string,std::string,std::less< std::string > >((const std::map< std::string,std::string,std::less< std::string > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getCertificateDetailsPath(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = DRing::getCertificateDetailsPath((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  *(std::map< std::string,std::string,std::less< std::string > > **)&jresult = new std::map< std::string,std::string,std::less< std::string > >((const std::map< std::string,std::string,std::less< std::string > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getPinnedCertificates(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getPinnedCertificates();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_pinCertificate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  std::vector< uint8_t > *arg1 = 0 ;
  bool arg2 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint8_t > const & reference is null");
    return 0;
  } 
  arg2 = jarg2 ? true : false; 
  result = DRing::pinCertificate((std::vector< unsigned char > const &)*arg1,arg2);
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_unpinCertificate(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::unpinCertificate((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_pinCertificatePath(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  DRing::pinCertificatePath((std::string const &)*arg1);
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_unpinCertificatePath(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (unsigned int)DRing::unpinCertificatePath((std::string const &)*arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_pinRemoteCertificate(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)DRing::pinRemoteCertificate((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_setCertificateStatus(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)DRing::setCertificateStatus((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getCertificatesByStatus(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = DRing::getCertificatesByStatus((std::string const &)*arg1,(std::string const &)*arg2);
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getTrustRequests(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::vector< std::map< std::string,std::string,std::less< std::string > > > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getTrustRequests((std::string const &)*arg1);
  *(std::vector< std::map< std::string,std::string,std::less< std::string > > > **)&jresult = new std::vector< std::map< std::string,std::string,std::less< std::string > > >((const std::vector< std::map< std::string,std::string,std::less< std::string > > > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_acceptTrustRequest(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)DRing::acceptTrustRequest((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_discardTrustRequest(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)DRing::discardTrustRequest((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_sendTrustRequest(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< uint8_t > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< uint8_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint8_t > const & reference is null");
    return ;
  } 
  DRing::sendTrustRequest((std::string const &)*arg1,(std::string const &)*arg2,(std::vector< unsigned char > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_addContact(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  DRing::addContact((std::string const &)*arg1,(std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_removeContact(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jboolean jarg3) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool *arg3 = 0 ;
  bool temp3 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  DRing::removeContact((std::string const &)*arg1,(std::string const &)*arg2,(bool const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getContacts(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::vector< std::map< std::string,std::string,std::less< std::string > > > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getContacts((std::string const &)*arg1);
  *(std::vector< std::map< std::string,std::string,std::less< std::string > > > **)&jresult = new std::vector< std::map< std::string,std::string,std::less< std::string > > >((const std::vector< std::map< std::string,std::string,std::less< std::string > > > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_jami_daemon_JamiServiceJNI_exportAccounts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  std::vector< std::string > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)DRing::exportAccounts((std::vector< std::string > const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_jami_daemon_JamiServiceJNI_importAccounts(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)DRing::importAccounts((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_connectivityChanged(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  DRing::connectivityChanged();
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_enableProxyClient(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  std::string *arg1 = 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  DRing::enableProxyClient((std::string const &)*arg1,arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_setPushNotificationToken(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  DRing::setPushNotificationToken((std::string const &)*arg1);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_pushNotificationReceived(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::map< std::string,std::string,std::less< std::string > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string,std::less< std::string > > const & reference is null");
    return ;
  } 
  DRing::pushNotificationReceived((std::string const &)*arg1,(std::map< std::string,std::string,std::less< std::string > > const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_isAudioMeterActive(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::isAudioMeterActive((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_setAudioMeterState(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  std::string *arg1 = 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  DRing::setAudioMeterState((std::string const &)*arg1,arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_setDefaultModerator(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jboolean jarg3) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  DRing::setDefaultModerator((std::string const &)*arg1,(std::string const &)*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getDefaultModerators(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getDefaultModerators((std::string const &)*arg1);
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_enableLocalModerators(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  std::string *arg1 = 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  DRing::enableLocalModerators((std::string const &)*arg1,arg2);
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_isLocalModeratorsEnabled(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::isLocalModeratorsEnabled((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_setAllModerators(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  std::string *arg1 = 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  DRing::setAllModerators((std::string const &)*arg1,arg2);
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_isAllModerators(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::isAllModerators((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_delete_1ConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1volumeChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  (arg1)->volumeChanged((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1volumeChangedSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  (arg1)->ConfigurationCallback::volumeChanged((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1accountsChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  (arg1)->accountsChanged();
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1accountsChangedSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  (arg1)->ConfigurationCallback::accountsChanged();
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1historyChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  (arg1)->historyChanged();
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1historyChangedSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  (arg1)->ConfigurationCallback::historyChanged();
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1stunStatusFailure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->stunStatusFailure((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1stunStatusFailureSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->ConfigurationCallback::stunStatusFailure((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1accountDetailsChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::map< std::string,std::string,std::less< std::string > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string,std::less< std::string > > const & reference is null");
    return ;
  } 
  (arg1)->accountDetailsChanged((std::string const &)*arg2,(std::map< std::string,std::string,std::less< std::string > > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1accountDetailsChangedSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::map< std::string,std::string,std::less< std::string > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string,std::less< std::string > > const & reference is null");
    return ;
  } 
  (arg1)->ConfigurationCallback::accountDetailsChanged((std::string const &)*arg2,(std::map< std::string,std::string,std::less< std::string > > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1profileReceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->profileReceived((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1profileReceivedSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->ConfigurationCallback::profileReceived((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1registrationStateChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jstring jarg5) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  std::string *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  (arg1)->registrationStateChanged((std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1registrationStateChangedSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jstring jarg5) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  std::string *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  (arg1)->ConfigurationCallback::registrationStateChanged((std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1volatileAccountDetailsChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::map< std::string,std::string,std::less< std::string > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string,std::less< std::string > > const & reference is null");
    return ;
  } 
  (arg1)->volatileAccountDetailsChanged((std::string const &)*arg2,(std::map< std::string,std::string,std::less< std::string > > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1volatileAccountDetailsChangedSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::map< std::string,std::string,std::less< std::string > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string,std::less< std::string > > const & reference is null");
    return ;
  } 
  (arg1)->ConfigurationCallback::volatileAccountDetailsChanged((std::string const &)*arg2,(std::map< std::string,std::string,std::less< std::string > > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1incomingAccountMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = *(std::map< std::string,std::string,std::less< std::string > > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string,std::less< std::string > > const & reference is null");
    return ;
  } 
  (arg1)->incomingAccountMessage((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::map< std::string,std::string,std::less< std::string > > const &)*arg5);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1incomingAccountMessageSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = *(std::map< std::string,std::string,std::less< std::string > > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string,std::less< std::string > > const & reference is null");
    return ;
  } 
  (arg1)->ConfigurationCallback::incomingAccountMessage((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::map< std::string,std::string,std::less< std::string > > const &)*arg5);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1accountMessageStatusChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jint jarg6) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  arg6 = (int)jarg6; 
  (arg1)->accountMessageStatusChanged((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1accountMessageStatusChangedSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jint jarg6) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  arg6 = (int)jarg6; 
  (arg1)->ConfigurationCallback::accountMessageStatusChanged((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1composingStatusChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jint jarg5) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int)jarg5; 
  (arg1)->composingStatusChanged((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1composingStatusChangedSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jint jarg5) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int)jarg5; 
  (arg1)->ConfigurationCallback::composingStatusChanged((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1knownDevicesChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::map< std::string,std::string,std::less< std::string > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string,std::less< std::string > > const & reference is null");
    return ;
  } 
  (arg1)->knownDevicesChanged((std::string const &)*arg2,(std::map< std::string,std::string,std::less< std::string > > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1knownDevicesChangedSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::map< std::string,std::string,std::less< std::string > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string,std::less< std::string > > const & reference is null");
    return ;
  } 
  (arg1)->ConfigurationCallback::knownDevicesChanged((std::string const &)*arg2,(std::map< std::string,std::string,std::less< std::string > > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1exportOnRingEnded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->exportOnRingEnded((std::string const &)*arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1exportOnRingEndedSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->ConfigurationCallback::exportOnRingEnded((std::string const &)*arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1incomingTrustRequest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jobject jarg5_, jlong jarg6) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::vector< uint8_t > *arg5 = 0 ;
  time_t arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = *(std::vector< uint8_t > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint8_t > const & reference is null");
    return ;
  } 
  arg6 = (time_t)jarg6; 
  (arg1)->incomingTrustRequest((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::vector< uint8_t > const &)*arg5,arg6);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1incomingTrustRequestSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jobject jarg5_, jlong jarg6) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::vector< uint8_t > *arg5 = 0 ;
  time_t arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = *(std::vector< uint8_t > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint8_t > const & reference is null");
    return ;
  } 
  arg6 = (time_t)jarg6; 
  (arg1)->ConfigurationCallback::incomingTrustRequest((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::vector< uint8_t > const &)*arg5,arg6);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1contactAdded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  (arg1)->contactAdded((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1contactAddedSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  (arg1)->ConfigurationCallback::contactAdded((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1contactRemoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  (arg1)->contactRemoved((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1contactRemovedSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  (arg1)->ConfigurationCallback::contactRemoved((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1certificatePinned(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->certificatePinned((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1certificatePinnedSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->ConfigurationCallback::certificatePinned((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1certificatePathPinned(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< std::string > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return ;
  } 
  (arg1)->certificatePathPinned((std::string const &)*arg2,(std::vector< std::string > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1certificatePathPinnedSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< std::string > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return ;
  } 
  (arg1)->ConfigurationCallback::certificatePathPinned((std::string const &)*arg2,(std::vector< std::string > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1certificateExpired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->certificateExpired((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1certificateExpiredSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->ConfigurationCallback::certificateExpired((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1certificateStateChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->certificateStateChanged((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1certificateStateChangedSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->ConfigurationCallback::certificateStateChanged((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1errorAlert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->errorAlert(arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1errorAlertSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->ConfigurationCallback::errorAlert(arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1getHardwareAudioFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::vector< int32_t > *arg2 = (std::vector< int32_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  arg2 = *(std::vector< int32_t > **)&jarg2; 
  (arg1)->getHardwareAudioFormat(arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1getHardwareAudioFormatSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::vector< int32_t > *arg2 = (std::vector< int32_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  arg2 = *(std::vector< int32_t > **)&jarg2; 
  (arg1)->ConfigurationCallback::getHardwareAudioFormat(arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1getAppDataPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *arg3 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< std::string > **)&jarg3; 
  (arg1)->getAppDataPath((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1getAppDataPathSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *arg3 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< std::string > **)&jarg3; 
  (arg1)->ConfigurationCallback::getAppDataPath((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1getDeviceName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  (arg1)->getDeviceName(arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1getDeviceNameSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  (arg1)->ConfigurationCallback::getDeviceName(arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1nameRegistrationEnded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->nameRegistrationEnded((std::string const &)*arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1nameRegistrationEndedSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->ConfigurationCallback::nameRegistrationEnded((std::string const &)*arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1registeredNameFound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4, jstring jarg5) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  (arg1)->registeredNameFound((std::string const &)*arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1registeredNameFoundSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4, jstring jarg5) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  (arg1)->ConfigurationCallback::registeredNameFound((std::string const &)*arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1userSearchEnded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  std::vector< std::map< std::string,std::string,std::less< std::string > > > *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = *(std::vector< std::map< std::string,std::string,std::less< std::string > > > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::map< std::string,std::string,std::less< std::string > > > const & reference is null");
    return ;
  } 
  (arg1)->userSearchEnded((std::string const &)*arg2,arg3,(std::string const &)*arg4,(std::vector< std::map< std::string,std::string,std::less< std::string > > > const &)*arg5);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1userSearchEndedSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  std::vector< std::map< std::string,std::string,std::less< std::string > > > *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = *(std::vector< std::map< std::string,std::string,std::less< std::string > > > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::map< std::string,std::string,std::less< std::string > > > const & reference is null");
    return ;
  } 
  (arg1)->ConfigurationCallback::userSearchEnded((std::string const &)*arg2,arg3,(std::string const &)*arg4,(std::vector< std::map< std::string,std::string,std::less< std::string > > > const &)*arg5);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1migrationEnded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->migrationEnded((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1migrationEndedSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->ConfigurationCallback::migrationEnded((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1deviceRevocationEnded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  (arg1)->deviceRevocationEnded((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1deviceRevocationEndedSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  (arg1)->ConfigurationCallback::deviceRevocationEnded((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1accountProfileReceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->accountProfileReceived((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1accountProfileReceivedSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->ConfigurationCallback::accountProfileReceived((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1hardwareDecodingChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->hardwareDecodingChanged(arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1hardwareDecodingChangedSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->ConfigurationCallback::hardwareDecodingChanged(arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1hardwareEncodingChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->hardwareEncodingChanged(arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1hardwareEncodingChangedSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->ConfigurationCallback::hardwareEncodingChanged(arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1audioMeter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (float)jarg3; 
  (arg1)->audioMeter((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1audioMeterSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (float)jarg3; 
  (arg1)->ConfigurationCallback::audioMeter((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1messageSend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->messageSend((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1messageSendSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->ConfigurationCallback::messageSend((std::string const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_new_1ConfigurationCallback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ConfigurationCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ConfigurationCallback *)new SwigDirector_ConfigurationCallback(jenv);
  *(ConfigurationCallback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  ConfigurationCallback *obj = *((ConfigurationCallback **)&objarg);
  (void)jcls;
  SwigDirector_ConfigurationCallback *director = static_cast<SwigDirector_ConfigurationCallback *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  ConfigurationCallback *obj = *((ConfigurationCallback **)&objarg);
  SwigDirector_ConfigurationCallback *director = dynamic_cast<SwigDirector_ConfigurationCallback *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1accountId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  DRing::DataTransferInfo *arg1 = (DRing::DataTransferInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DRing::DataTransferInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->accountId = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1accountId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  DRing::DataTransferInfo *arg1 = (DRing::DataTransferInfo *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DRing::DataTransferInfo **)&jarg1; 
  result = (std::string *) & ((arg1)->accountId);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1lastEvent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  DRing::DataTransferInfo *arg1 = (DRing::DataTransferInfo *) 0 ;
  DRing::DataTransferEventCode arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DRing::DataTransferInfo **)&jarg1; 
  arg2 = (DRing::DataTransferEventCode)jarg2; 
  if (arg1) (arg1)->lastEvent = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1lastEvent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DRing::DataTransferInfo *arg1 = (DRing::DataTransferInfo *) 0 ;
  DRing::DataTransferEventCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DRing::DataTransferInfo **)&jarg1; 
  result =  ((arg1)->lastEvent);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  DRing::DataTransferInfo *arg1 = (DRing::DataTransferInfo *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DRing::DataTransferInfo **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DRing::DataTransferInfo *arg1 = (DRing::DataTransferInfo *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DRing::DataTransferInfo **)&jarg1; 
  result = (uint32_t) ((arg1)->flags);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1totalSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  DRing::DataTransferInfo *arg1 = (DRing::DataTransferInfo *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DRing::DataTransferInfo **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->totalSize = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1totalSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DRing::DataTransferInfo *arg1 = (DRing::DataTransferInfo *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DRing::DataTransferInfo **)&jarg1; 
  result = (int64_t) ((arg1)->totalSize);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1bytesProgress_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  DRing::DataTransferInfo *arg1 = (DRing::DataTransferInfo *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DRing::DataTransferInfo **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->bytesProgress = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1bytesProgress_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DRing::DataTransferInfo *arg1 = (DRing::DataTransferInfo *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DRing::DataTransferInfo **)&jarg1; 
  result = (int64_t) ((arg1)->bytesProgress);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1author_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  DRing::DataTransferInfo *arg1 = (DRing::DataTransferInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DRing::DataTransferInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->author = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1author_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  DRing::DataTransferInfo *arg1 = (DRing::DataTransferInfo *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DRing::DataTransferInfo **)&jarg1; 
  result = (std::string *) & ((arg1)->author);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1peer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  DRing::DataTransferInfo *arg1 = (DRing::DataTransferInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DRing::DataTransferInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->peer = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1peer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  DRing::DataTransferInfo *arg1 = (DRing::DataTransferInfo *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DRing::DataTransferInfo **)&jarg1; 
  result = (std::string *) & ((arg1)->peer);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1conversationId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  DRing::DataTransferInfo *arg1 = (DRing::DataTransferInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DRing::DataTransferInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->conversationId = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1conversationId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  DRing::DataTransferInfo *arg1 = (DRing::DataTransferInfo *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DRing::DataTransferInfo **)&jarg1; 
  result = (std::string *) & ((arg1)->conversationId);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1displayName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  DRing::DataTransferInfo *arg1 = (DRing::DataTransferInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DRing::DataTransferInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->displayName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1displayName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  DRing::DataTransferInfo *arg1 = (DRing::DataTransferInfo *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DRing::DataTransferInfo **)&jarg1; 
  result = (std::string *) & ((arg1)->displayName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1path_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  DRing::DataTransferInfo *arg1 = (DRing::DataTransferInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DRing::DataTransferInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->path = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1path_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  DRing::DataTransferInfo *arg1 = (DRing::DataTransferInfo *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DRing::DataTransferInfo **)&jarg1; 
  result = (std::string *) & ((arg1)->path);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1mimetype_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  DRing::DataTransferInfo *arg1 = (DRing::DataTransferInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DRing::DataTransferInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->mimetype = *arg2;
}


SWIGEXPORT jstring JNICALL Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1mimetype_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  DRing::DataTransferInfo *arg1 = (DRing::DataTransferInfo *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DRing::DataTransferInfo **)&jarg1; 
  result = (std::string *) & ((arg1)->mimetype);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_new_1DataTransferInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DRing::DataTransferInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DRing::DataTransferInfo *)new DRing::DataTransferInfo();
  *(DRing::DataTransferInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_delete_1DataTransferInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DRing::DataTransferInfo *arg1 = (DRing::DataTransferInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DRing::DataTransferInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_sendFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2) {
  jlong jresult = 0 ;
  DRing::DataTransferInfo arg1 ;
  DRing::DataTransferId *arg2 = 0 ;
  DRing::DataTransferInfo const *argp1 ;
  DRing::DataTransferError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(DRing::DataTransferInfo **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null DRing::DataTransferInfo const");
    return 0;
  }
  arg1 = *argp1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    arg2 = (DRing::DataTransferId *) jenv->GetLongArrayElements(jarg2, 0); 
  }
  result = DRing::sendFile(arg1,*arg2);
  jresult = (jlong)result; 
  {
    jenv->ReleaseLongArrayElements(jarg2, (jlong *)arg2, 0); 
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_acceptFileTransfer(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jstring jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  DRing::DataTransferId arg3 ;
  std::string arg4 ;
  int64_t arg5 ;
  DRing::DataTransferError result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (DRing::DataTransferId)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int64_t)jarg5; 
  result = DRing::acceptFileTransfer((std::string const &)*arg1,(std::string const &)*arg2,arg3,arg4,arg5);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_cancelDataTransfer(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  DRing::DataTransferId arg3 ;
  DRing::DataTransferError result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (DRing::DataTransferId)jarg3; 
  result = DRing::cancelDataTransfer((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_dataTransferInfo(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  DRing::DataTransferId arg3 ;
  DRing::DataTransferInfo *arg4 = 0 ;
  DRing::DataTransferError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (DRing::DataTransferId)jarg3; 
  arg4 = *(DRing::DataTransferInfo **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DRing::DataTransferInfo & reference is null");
    return 0;
  } 
  result = DRing::dataTransferInfo((std::string const &)*arg1,(std::string const &)*arg2,arg3,*arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_dataTransferBytesProgress(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  DRing::DataTransferId arg3 ;
  int64_t *arg4 = 0 ;
  int64_t *arg5 = 0 ;
  DRing::DataTransferError result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (DRing::DataTransferId)jarg3; 
  arg4 = *(int64_t **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int64_t & reference is null");
    return 0;
  } 
  arg5 = *(int64_t **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int64_t & reference is null");
    return 0;
  } 
  result = DRing::dataTransferBytesProgress((std::string const &)*arg1,(std::string const &)*arg2,arg3,*arg4,*arg5);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_delete_1DataTransferCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DataTransferCallback *arg1 = (DataTransferCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataTransferCallback **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_DataTransferCallback_1dataTransferEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jint jarg5) {
  DataTransferCallback *arg1 = (DataTransferCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  DRing::DataTransferId arg4 ;
  int arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataTransferCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (DRing::DataTransferId)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->dataTransferEvent((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_DataTransferCallback_1dataTransferEventSwigExplicitDataTransferCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jint jarg5) {
  DataTransferCallback *arg1 = (DataTransferCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  DRing::DataTransferId arg4 ;
  int arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataTransferCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (DRing::DataTransferId)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->DataTransferCallback::dataTransferEvent((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5);
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_new_1DataTransferCallback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DataTransferCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DataTransferCallback *)new SwigDirector_DataTransferCallback(jenv);
  *(DataTransferCallback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_DataTransferCallback_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  DataTransferCallback *obj = *((DataTransferCallback **)&objarg);
  (void)jcls;
  SwigDirector_DataTransferCallback *director = static_cast<SwigDirector_DataTransferCallback *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_DataTransferCallback_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  DataTransferCallback *obj = *((DataTransferCallback **)&objarg);
  SwigDirector_DataTransferCallback *director = dynamic_cast<SwigDirector_DataTransferCallback *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_publish(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jstring jarg3) {
  std::string *arg1 = 0 ;
  bool arg2 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  DRing::publish((std::string const &)*arg1,arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_answerServerRequest(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  std::string *arg1 = 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  DRing::answerServerRequest((std::string const &)*arg1,arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_subscribeBuddy(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jboolean jarg3) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  DRing::subscribeBuddy((std::string const &)*arg1,(std::string const &)*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getSubscriptions(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::vector< std::map< std::string,std::string,std::less< std::string > > > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getSubscriptions((std::string const &)*arg1);
  *(std::vector< std::map< std::string,std::string,std::less< std::string > > > **)&jresult = new std::vector< std::map< std::string,std::string,std::less< std::string > > >((const std::vector< std::map< std::string,std::string,std::less< std::string > > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_setSubscriptions(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return ;
  } 
  DRing::setSubscriptions((std::string const &)*arg1,(std::vector< std::string > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_delete_1PresenceCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PresenceCallback *arg1 = (PresenceCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PresenceCallback **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_PresenceCallback_1newServerSubscriptionRequest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  PresenceCallback *arg1 = (PresenceCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PresenceCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->newServerSubscriptionRequest((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_PresenceCallback_1newServerSubscriptionRequestSwigExplicitPresenceCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  PresenceCallback *arg1 = (PresenceCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PresenceCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->PresenceCallback::newServerSubscriptionRequest((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_PresenceCallback_1serverError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  PresenceCallback *arg1 = (PresenceCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PresenceCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->serverError((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_PresenceCallback_1serverErrorSwigExplicitPresenceCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  PresenceCallback *arg1 = (PresenceCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PresenceCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->PresenceCallback::serverError((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_PresenceCallback_1newBuddyNotification(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jstring jarg5) {
  PresenceCallback *arg1 = (PresenceCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  std::string *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PresenceCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  (arg1)->newBuddyNotification((std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_PresenceCallback_1newBuddyNotificationSwigExplicitPresenceCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jstring jarg5) {
  PresenceCallback *arg1 = (PresenceCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  std::string *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PresenceCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  (arg1)->PresenceCallback::newBuddyNotification((std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_PresenceCallback_1nearbyPeerNotification(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jstring jarg5) {
  PresenceCallback *arg1 = (PresenceCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  std::string *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PresenceCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  (arg1)->nearbyPeerNotification((std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_PresenceCallback_1nearbyPeerNotificationSwigExplicitPresenceCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jstring jarg5) {
  PresenceCallback *arg1 = (PresenceCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  std::string *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PresenceCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  (arg1)->PresenceCallback::nearbyPeerNotification((std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_PresenceCallback_1subscriptionStateChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  PresenceCallback *arg1 = (PresenceCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PresenceCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  (arg1)->subscriptionStateChanged((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_PresenceCallback_1subscriptionStateChangedSwigExplicitPresenceCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  PresenceCallback *arg1 = (PresenceCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PresenceCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  (arg1)->PresenceCallback::subscriptionStateChanged((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_new_1PresenceCallback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  PresenceCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (PresenceCallback *)new SwigDirector_PresenceCallback(jenv);
  *(PresenceCallback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_PresenceCallback_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  PresenceCallback *obj = *((PresenceCallback **)&objarg);
  (void)jcls;
  SwigDirector_PresenceCallback *director = static_cast<SwigDirector_PresenceCallback *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_PresenceCallback_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  PresenceCallback *obj = *((PresenceCallback **)&objarg);
  SwigDirector_PresenceCallback *director = dynamic_cast<SwigDirector_PresenceCallback *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_setDefaultDevice(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  DRing::setDefaultDevice((std::string const &)*arg1);
}


SWIGEXPORT jstring JNICALL Java_net_jami_daemon_JamiServiceJNI_getDefaultDevice(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getDefaultDevice();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_startCamera(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  DRing::startCamera();
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_stopCamera(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  DRing::stopCamera();
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_hasCameraStarted(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)DRing::hasCameraStarted();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_startAudioDevice(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  DRing::startAudioDevice();
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_stopAudioDevice(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  DRing::stopAudioDevice();
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_switchInput_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::switchInput((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_switchToCamera(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)DRing::switchToCamera();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getSettings(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getSettings((std::string const &)*arg1);
  *(std::map< std::string,std::string,std::less< std::string > > **)&jresult = new std::map< std::string,std::string,std::less< std::string > >((const std::map< std::string,std::string,std::less< std::string > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_applySettings(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::map< std::string,std::string,std::less< std::string > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string,std::less< std::string > > const & reference is null");
    return ;
  } 
  DRing::applySettings((std::string const &)*arg1,(std::map< std::string,std::string,std::less< std::string > > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_addVideoDevice(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  DRing::addVideoDevice((std::string const &)*arg1);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_removeVideoDevice(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  DRing::removeVideoDevice((std::string const &)*arg1);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_setDeviceOrientation(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  std::string *arg1 = 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  DRing::setDeviceOrientation((std::string const &)*arg1,arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_registerSinkTarget(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  std::string *arg1 = 0 ;
  DRing::SinkTarget *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(DRing::SinkTarget **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DRing::SinkTarget const & reference is null");
    return ;
  } 
  DRing::registerSinkTarget((std::string const &)*arg1,(DRing::SinkTarget const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_net_jami_daemon_JamiServiceJNI_startLocalRecorder(JNIEnv *jenv, jclass jcls, jboolean jarg1, jstring jarg2) {
  jstring jresult = 0 ;
  bool *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool temp1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  temp1 = jarg1 ? true : false; 
  arg1 = &temp1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = DRing::startLocalRecorder((bool const &)*arg1,(std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_stopLocalRecorder(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  DRing::stopLocalRecorder((std::string const &)*arg1);
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_getDecodingAccelerated(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)DRing::getDecodingAccelerated();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_setDecodingAccelerated(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  DRing::setDecodingAccelerated(arg1);
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_getEncodingAccelerated(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)DRing::getEncodingAccelerated();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_setEncodingAccelerated(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  DRing::setEncodingAccelerated(arg1);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_delete_1VideoCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  VideoCallback *arg1 = (VideoCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(VideoCallback **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_VideoCallback_1getCameraInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  VideoCallback *arg1 = (VideoCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< int > *arg3 = (std::vector< int > *) 0 ;
  std::vector< unsigned int > *arg4 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int > *arg5 = (std::vector< unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(VideoCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< int > **)&jarg3; 
  arg4 = *(std::vector< unsigned int > **)&jarg4; 
  arg5 = *(std::vector< unsigned int > **)&jarg5; 
  (arg1)->getCameraInfo((std::string const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_VideoCallback_1getCameraInfoSwigExplicitVideoCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  VideoCallback *arg1 = (VideoCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< int > *arg3 = (std::vector< int > *) 0 ;
  std::vector< unsigned int > *arg4 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int > *arg5 = (std::vector< unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(VideoCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< int > **)&jarg3; 
  arg4 = *(std::vector< unsigned int > **)&jarg4; 
  arg5 = *(std::vector< unsigned int > **)&jarg5; 
  (arg1)->VideoCallback::getCameraInfo((std::string const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_VideoCallback_1setParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6) {
  VideoCallback *arg1 = (VideoCallback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  (arg1)->setParameters((std::string const &)*arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_VideoCallback_1setParametersSwigExplicitVideoCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6) {
  VideoCallback *arg1 = (VideoCallback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  (arg1)->VideoCallback::setParameters((std::string const &)*arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_VideoCallback_1setBitrate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  VideoCallback *arg1 = (VideoCallback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  (arg1)->setBitrate((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_VideoCallback_1setBitrateSwigExplicitVideoCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  VideoCallback *arg1 = (VideoCallback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  (arg1)->VideoCallback::setBitrate((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_VideoCallback_1requestKeyFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  VideoCallback *arg1 = (VideoCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoCallback **)&jarg1; 
  (arg1)->requestKeyFrame();
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_VideoCallback_1requestKeyFrameSwigExplicitVideoCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  VideoCallback *arg1 = (VideoCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoCallback **)&jarg1; 
  (arg1)->VideoCallback::requestKeyFrame();
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_VideoCallback_1startCapture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  VideoCallback *arg1 = (VideoCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->startCapture((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_VideoCallback_1startCaptureSwigExplicitVideoCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  VideoCallback *arg1 = (VideoCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->VideoCallback::startCapture((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_VideoCallback_1stopCapture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  VideoCallback *arg1 = (VideoCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoCallback **)&jarg1; 
  (arg1)->stopCapture();
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_VideoCallback_1stopCaptureSwigExplicitVideoCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  VideoCallback *arg1 = (VideoCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoCallback **)&jarg1; 
  (arg1)->VideoCallback::stopCapture();
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_VideoCallback_1decodingStarted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jint jarg5, jboolean jarg6) {
  VideoCallback *arg1 = (VideoCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->decodingStarted((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_VideoCallback_1decodingStartedSwigExplicitVideoCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jint jarg5, jboolean jarg6) {
  VideoCallback *arg1 = (VideoCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->VideoCallback::decodingStarted((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_VideoCallback_1decodingStopped(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  VideoCallback *arg1 = (VideoCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  (arg1)->decodingStopped((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_VideoCallback_1decodingStoppedSwigExplicitVideoCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  VideoCallback *arg1 = (VideoCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  (arg1)->VideoCallback::decodingStopped((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_new_1VideoCallback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  VideoCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (VideoCallback *)new SwigDirector_VideoCallback(jenv);
  *(VideoCallback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_VideoCallback_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  VideoCallback *obj = *((VideoCallback **)&objarg);
  (void)jcls;
  SwigDirector_VideoCallback *director = static_cast<SwigDirector_VideoCallback *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_VideoCallback_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  VideoCallback *obj = *((VideoCallback **)&objarg);
  SwigDirector_VideoCallback *director = dynamic_cast<SwigDirector_VideoCallback *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_loadPlugin(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::loadPlugin((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_unloadPlugin(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::unloadPlugin((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getPluginDetails(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getPluginDetails((std::string const &)*arg1);
  *(std::map< std::string,std::string,std::less< std::string > > **)&jresult = new std::map< std::string,std::string,std::less< std::string > >((const std::map< std::string,std::string,std::less< std::string > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getPluginPreferences(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::vector< std::map< std::string,std::string,std::less< std::string > > > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getPluginPreferences((std::string const &)*arg1);
  *(std::vector< std::map< std::string,std::string,std::less< std::string > > > **)&jresult = new std::vector< std::map< std::string,std::string,std::less< std::string > > >((const std::vector< std::map< std::string,std::string,std::less< std::string > > > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_setPluginPreference(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)DRing::setPluginPreference((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getPluginPreferencesValues(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getPluginPreferencesValues((std::string const &)*arg1);
  *(std::map< std::string,std::string,std::less< std::string > > **)&jresult = new std::map< std::string,std::string,std::less< std::string > >((const std::map< std::string,std::string,std::less< std::string > > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_resetPluginPreferencesValues(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::resetPluginPreferencesValues((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getInstalledPlugins(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getInstalledPlugins();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getLoadedPlugins(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getLoadedPlugins();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_jami_daemon_JamiServiceJNI_installPlugin(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  result = (int)DRing::installPlugin((std::string const &)*arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_jami_daemon_JamiServiceJNI_uninstallPlugin(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (int)DRing::uninstallPlugin((std::string const &)*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getCallMediaHandlers(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getCallMediaHandlers();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getChatHandlers(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getChatHandlers();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_toggleCallMediaHandler(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jboolean jarg3) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  DRing::toggleCallMediaHandler((std::string const &)*arg1,(std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_toggleChatHandler(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jboolean jarg4) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  DRing::toggleChatHandler((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getCallMediaHandlerDetails(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getCallMediaHandlerDetails((std::string const &)*arg1);
  *(std::map< std::string,std::string,std::less< std::string > > **)&jresult = new std::map< std::string,std::string,std::less< std::string > >((const std::map< std::string,std::string,std::less< std::string > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getCallMediaHandlerStatus(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getCallMediaHandlerStatus((std::string const &)*arg1);
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getChatHandlerDetails(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getChatHandlerDetails((std::string const &)*arg1);
  *(std::map< std::string,std::string,std::less< std::string > > **)&jresult = new std::map< std::string,std::string,std::less< std::string > >((const std::map< std::string,std::string,std::less< std::string > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getChatHandlerStatus(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = DRing::getChatHandlerStatus((std::string const &)*arg1,(std::string const &)*arg2);
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_getPluginsEnabled(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)DRing::getPluginsEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_setPluginsEnabled(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  DRing::setPluginsEnabled(arg1);
}


SWIGEXPORT jstring JNICALL Java_net_jami_daemon_JamiServiceJNI_startConversation(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::startConversation((std::string const &)*arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_acceptConversationRequest(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  DRing::acceptConversationRequest((std::string const &)*arg1,(std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_declineConversationRequest(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  DRing::declineConversationRequest((std::string const &)*arg1,(std::string const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_net_jami_daemon_JamiServiceJNI_removeConversation(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)DRing::removeConversation((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getConversations(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getConversations((std::string const &)*arg1);
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getConversationRequests(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::vector< std::map< std::string,std::string,std::less< std::string > > > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getConversationRequests((std::string const &)*arg1);
  *(std::vector< std::map< std::string,std::string,std::less< std::string > > > **)&jresult = new std::vector< std::map< std::string,std::string,std::less< std::string > > >((const std::vector< std::map< std::string,std::string,std::less< std::string > > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_updateConversationInfos(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::map< std::string,std::string,std::less< std::string > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string,std::less< std::string > > const & reference is null");
    return ;
  } 
  DRing::updateConversationInfos((std::string const &)*arg1,(std::string const &)*arg2,(std::map< std::string,std::string,std::less< std::string > > const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_conversationInfos(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = DRing::conversationInfos((std::string const &)*arg1,(std::string const &)*arg2);
  *(std::map< std::string,std::string,std::less< std::string > > **)&jresult = new std::map< std::string,std::string,std::less< std::string > >((const std::map< std::string,std::string,std::less< std::string > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_addConversationMember(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  DRing::addConversationMember((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_removeConversationMember(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  DRing::removeConversationMember((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_getConversationMembers(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::map< std::string,std::string,std::less< std::string > > > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = DRing::getConversationMembers((std::string const &)*arg1,(std::string const &)*arg2);
  *(std::vector< std::map< std::string,std::string,std::less< std::string > > > **)&jresult = new std::vector< std::map< std::string,std::string,std::less< std::string > > >((const std::vector< std::map< std::string,std::string,std::less< std::string > > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_sendMessage(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  DRing::sendMessage((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_loadConversationMessages(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  size_t arg4 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (size_t)jarg4; 
  result = (uint32_t)DRing::loadConversationMessages((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_delete_1ConversationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ConversationCallback *arg1 = (ConversationCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ConversationCallback **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConversationCallback_1conversationLoaded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  ConversationCallback *arg1 = (ConversationCallback *) 0 ;
  uint32_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::vector< std::map< std::string,std::string,std::less< std::string > > > arg5 ;
  std::vector< std::map< std::string,std::string,std::less< std::string > > > *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(ConversationCallback **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  argp5 = *(std::vector< std::map< std::string,std::string,std::less< std::string > > > **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::map< std::string,std::string,std::less< std::string > > >");
    return ;
  }
  arg5 = *argp5; 
  (arg1)->conversationLoaded(arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConversationCallback_1conversationLoadedSwigExplicitConversationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  ConversationCallback *arg1 = (ConversationCallback *) 0 ;
  uint32_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::vector< std::map< std::string,std::string,std::less< std::string > > > arg5 ;
  std::vector< std::map< std::string,std::string,std::less< std::string > > > *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(ConversationCallback **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  argp5 = *(std::vector< std::map< std::string,std::string,std::less< std::string > > > **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::map< std::string,std::string,std::less< std::string > > >");
    return ;
  }
  arg5 = *argp5; 
  (arg1)->ConversationCallback::conversationLoaded(arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConversationCallback_1messageReceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  ConversationCallback *arg1 = (ConversationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > arg4 ;
  std::map< std::string,std::string,std::less< std::string > > *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ConversationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  argp4 = *(std::map< std::string,std::string,std::less< std::string > > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< std::string,std::string,std::less< std::string > >");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->messageReceived((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConversationCallback_1messageReceivedSwigExplicitConversationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  ConversationCallback *arg1 = (ConversationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > arg4 ;
  std::map< std::string,std::string,std::less< std::string > > *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ConversationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  argp4 = *(std::map< std::string,std::string,std::less< std::string > > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< std::string,std::string,std::less< std::string > >");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->ConversationCallback::messageReceived((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConversationCallback_1conversationRequestReceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  ConversationCallback *arg1 = (ConversationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > arg4 ;
  std::map< std::string,std::string,std::less< std::string > > *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ConversationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  argp4 = *(std::map< std::string,std::string,std::less< std::string > > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< std::string,std::string,std::less< std::string > >");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->conversationRequestReceived((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConversationCallback_1conversationRequestReceivedSwigExplicitConversationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  ConversationCallback *arg1 = (ConversationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > arg4 ;
  std::map< std::string,std::string,std::less< std::string > > *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ConversationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  argp4 = *(std::map< std::string,std::string,std::less< std::string > > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< std::string,std::string,std::less< std::string > >");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->ConversationCallback::conversationRequestReceived((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConversationCallback_1conversationReady(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  ConversationCallback *arg1 = (ConversationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->conversationReady((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConversationCallback_1conversationReadySwigExplicitConversationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  ConversationCallback *arg1 = (ConversationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->ConversationCallback::conversationReady((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConversationCallback_1conversationRemoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  ConversationCallback *arg1 = (ConversationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->conversationRemoved((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConversationCallback_1conversationRemovedSwigExplicitConversationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  ConversationCallback *arg1 = (ConversationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->ConversationCallback::conversationRemoved((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConversationCallback_1conversationMemberEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jint jarg5) {
  ConversationCallback *arg1 = (ConversationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int)jarg5; 
  (arg1)->conversationMemberEvent((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConversationCallback_1conversationMemberEventSwigExplicitConversationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jint jarg5) {
  ConversationCallback *arg1 = (ConversationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int)jarg5; 
  (arg1)->ConversationCallback::conversationMemberEvent((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConversationCallback_1onConversationError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jstring jarg5) {
  ConversationCallback *arg1 = (ConversationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  uint32_t arg4 ;
  std::string *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (uint32_t)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  (arg1)->onConversationError((std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConversationCallback_1onConversationErrorSwigExplicitConversationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jstring jarg5) {
  ConversationCallback *arg1 = (ConversationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  uint32_t arg4 ;
  std::string *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (uint32_t)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  (arg1)->ConversationCallback::onConversationError((std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
}


SWIGEXPORT jlong JNICALL Java_net_jami_daemon_JamiServiceJNI_new_1ConversationCallback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ConversationCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ConversationCallback *)new SwigDirector_ConversationCallback(jenv);
  *(ConversationCallback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConversationCallback_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  ConversationCallback *obj = *((ConversationCallback **)&objarg);
  (void)jcls;
  SwigDirector_ConversationCallback *director = static_cast<SwigDirector_ConversationCallback *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_ConversationCallback_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  ConversationCallback *obj = *((ConversationCallback **)&objarg);
  SwigDirector_ConversationCallback *director = dynamic_cast<SwigDirector_ConversationCallback *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  Callback *arg2 = (Callback *) 0 ;
  PresenceCallback *arg3 = (PresenceCallback *) 0 ;
  DataTransferCallback *arg4 = (DataTransferCallback *) 0 ;
  VideoCallback *arg5 = (VideoCallback *) 0 ;
  ConversationCallback *arg6 = (ConversationCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  arg2 = *(Callback **)&jarg2; 
  arg3 = *(PresenceCallback **)&jarg3; 
  arg4 = *(DataTransferCallback **)&jarg4; 
  arg5 = *(VideoCallback **)&jarg5; 
  arg6 = *(ConversationCallback **)&jarg6; 
  init(arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_net_jami_daemon_JamiServiceJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[76] = {
    {
      "SwigDirector_Callback_callStateChanged", "(Lnet/jami/daemon/Callback;Ljava/lang/String;Ljava/lang/String;I)V" 
    },
    {
      "SwigDirector_Callback_transferFailed", "(Lnet/jami/daemon/Callback;)V" 
    },
    {
      "SwigDirector_Callback_transferSucceeded", "(Lnet/jami/daemon/Callback;)V" 
    },
    {
      "SwigDirector_Callback_recordPlaybackStopped", "(Lnet/jami/daemon/Callback;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_Callback_voiceMailNotify", "(Lnet/jami/daemon/Callback;Ljava/lang/String;III)V" 
    },
    {
      "SwigDirector_Callback_incomingMessage", "(Lnet/jami/daemon/Callback;Ljava/lang/String;Ljava/lang/String;J)V" 
    },
    {
      "SwigDirector_Callback_incomingCall", "(Lnet/jami/daemon/Callback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_Callback_recordPlaybackFilepath", "(Lnet/jami/daemon/Callback;Ljava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_Callback_conferenceCreated", "(Lnet/jami/daemon/Callback;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_Callback_conferenceChanged", "(Lnet/jami/daemon/Callback;Ljava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_Callback_conferenceRemoved", "(Lnet/jami/daemon/Callback;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_Callback_updatePlaybackScale", "(Lnet/jami/daemon/Callback;Ljava/lang/String;II)V" 
    },
    {
      "SwigDirector_Callback_newCall", "(Lnet/jami/daemon/Callback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_Callback_sipCallStateChange", "(Lnet/jami/daemon/Callback;Ljava/lang/String;Ljava/lang/String;I)V" 
    },
    {
      "SwigDirector_Callback_recordingStateChanged", "(Lnet/jami/daemon/Callback;Ljava/lang/String;I)V" 
    },
    {
      "SwigDirector_Callback_recordStateChange", "(Lnet/jami/daemon/Callback;Ljava/lang/String;I)V" 
    },
    {
      "SwigDirector_Callback_onRtcpReportReceived", "(Lnet/jami/daemon/Callback;Ljava/lang/String;J)V" 
    },
    {
      "SwigDirector_Callback_onConferenceInfosUpdated", "(Lnet/jami/daemon/Callback;Ljava/lang/String;J)V" 
    },
    {
      "SwigDirector_Callback_peerHold", "(Lnet/jami/daemon/Callback;Ljava/lang/String;Z)V" 
    },
    {
      "SwigDirector_Callback_connectionUpdate", "(Lnet/jami/daemon/Callback;Ljava/lang/String;I)V" 
    },
    {
      "SwigDirector_Callback_remoteRecordingChanged", "(Lnet/jami/daemon/Callback;Ljava/lang/String;Ljava/lang/String;Z)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_volumeChanged", "(Lnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;I)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_accountsChanged", "(Lnet/jami/daemon/ConfigurationCallback;)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_historyChanged", "(Lnet/jami/daemon/ConfigurationCallback;)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_stunStatusFailure", "(Lnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_accountDetailsChanged", "(Lnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;J)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_profileReceived", "(Lnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_registrationStateChanged", "(Lnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_volatileAccountDetailsChanged", "(Lnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;J)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_incomingAccountMessage", "(Lnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_accountMessageStatusChanged", "(Lnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_composingStatusChanged", "(Lnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_knownDevicesChanged", "(Lnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;J)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_exportOnRingEnded", "(Lnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;ILjava/lang/String;)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_incomingTrustRequest", "(Lnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;JJ)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_contactAdded", "(Lnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;Z)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_contactRemoved", "(Lnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;Z)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_certificatePinned", "(Lnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_certificatePathPinned", "(Lnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;J)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_certificateExpired", "(Lnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_certificateStateChanged", "(Lnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_errorAlert", "(Lnet/jami/daemon/ConfigurationCallback;I)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_getHardwareAudioFormat", "(Lnet/jami/daemon/ConfigurationCallback;J)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_getAppDataPath", "(Lnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;J)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_getDeviceName", "(Lnet/jami/daemon/ConfigurationCallback;J)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_nameRegistrationEnded", "(Lnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;ILjava/lang/String;)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_registeredNameFound", "(Lnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_userSearchEnded", "(Lnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;ILjava/lang/String;J)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_migrationEnded", "(Lnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_deviceRevocationEnded", "(Lnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;I)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_accountProfileReceived", "(Lnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_hardwareDecodingChanged", "(Lnet/jami/daemon/ConfigurationCallback;Z)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_hardwareEncodingChanged", "(Lnet/jami/daemon/ConfigurationCallback;Z)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_audioMeter", "(Lnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;F)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_messageSend", "(Lnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_DataTransferCallback_dataTransferEvent", "(Lnet/jami/daemon/DataTransferCallback;Ljava/lang/String;Ljava/lang/String;JI)V" 
    },
    {
      "SwigDirector_PresenceCallback_newServerSubscriptionRequest", "(Lnet/jami/daemon/PresenceCallback;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_PresenceCallback_serverError", "(Lnet/jami/daemon/PresenceCallback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_PresenceCallback_newBuddyNotification", "(Lnet/jami/daemon/PresenceCallback;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V" 
    },
    {
      "SwigDirector_PresenceCallback_nearbyPeerNotification", "(Lnet/jami/daemon/PresenceCallback;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V" 
    },
    {
      "SwigDirector_PresenceCallback_subscriptionStateChanged", "(Lnet/jami/daemon/PresenceCallback;Ljava/lang/String;Ljava/lang/String;I)V" 
    },
    {
      "SwigDirector_VideoCallback_getCameraInfo", "(Lnet/jami/daemon/VideoCallback;Ljava/lang/String;JJJ)V" 
    },
    {
      "SwigDirector_VideoCallback_setParameters", "(Lnet/jami/daemon/VideoCallback;Ljava/lang/String;IIII)V" 
    },
    {
      "SwigDirector_VideoCallback_setBitrate", "(Lnet/jami/daemon/VideoCallback;Ljava/lang/String;I)V" 
    },
    {
      "SwigDirector_VideoCallback_requestKeyFrame", "(Lnet/jami/daemon/VideoCallback;)V" 
    },
    {
      "SwigDirector_VideoCallback_startCapture", "(Lnet/jami/daemon/VideoCallback;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_VideoCallback_stopCapture", "(Lnet/jami/daemon/VideoCallback;)V" 
    },
    {
      "SwigDirector_VideoCallback_decodingStarted", "(Lnet/jami/daemon/VideoCallback;Ljava/lang/String;Ljava/lang/String;IIZ)V" 
    },
    {
      "SwigDirector_VideoCallback_decodingStopped", "(Lnet/jami/daemon/VideoCallback;Ljava/lang/String;Ljava/lang/String;Z)V" 
    },
    {
      "SwigDirector_ConversationCallback_conversationLoaded", "(Lnet/jami/daemon/ConversationCallback;JLjava/lang/String;Ljava/lang/String;J)V" 
    },
    {
      "SwigDirector_ConversationCallback_messageReceived", "(Lnet/jami/daemon/ConversationCallback;Ljava/lang/String;Ljava/lang/String;J)V" 
    },
    {
      "SwigDirector_ConversationCallback_conversationRequestReceived", "(Lnet/jami/daemon/ConversationCallback;Ljava/lang/String;Ljava/lang/String;J)V" 
    },
    {
      "SwigDirector_ConversationCallback_conversationReady", "(Lnet/jami/daemon/ConversationCallback;Ljava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ConversationCallback_conversationRemoved", "(Lnet/jami/daemon/ConversationCallback;Ljava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ConversationCallback_conversationMemberEvent", "(Lnet/jami/daemon/ConversationCallback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V" 
    },
    {
      "SwigDirector_ConversationCallback_onConversationError", "(Lnet/jami/daemon/ConversationCallback;Ljava/lang/String;Ljava/lang/String;JLjava/lang/String;)V" 
    }
  };
  Swig::jclass_JamiServiceJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_JamiServiceJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_method_ids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_method_ids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

/*
 *  Copyright (C) 2004-2021 Savoir-faire Linux Inc.
 *
 *  Author: Emeric Vigier <emeric.vigier@savoirfairelinux.com>
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include "logger.h"
extern "C" {
#include "libavcodec/jni.h"
}

JavaVM *gJavaVM;
const char *kjamiservicePath = "net/jami/daemon/JamiServiceJNI";

void deinitClassHelper(JNIEnv *env, jobject obj) {
	JAMI_INFO("deinitClassHelper");

	/* delete cached object instances */
    env->DeleteGlobalRef(obj);
	JAMI_INFO("deinitClassHelper: object %p deleted", obj);
}

JNIEXPORT jint JNI_OnLoad(JavaVM *vm, void *reserved) {
	JNIEnv *env;
	jclass clazz;
	jint r;

    JAMI_INFO("JNI_OnLoad");

	if (av_jni_set_java_vm(vm, reserved)) {
        JAMI_ERR("JNI_OnLoad: av_jni_set_java_vm failed");
	}

	//Assume it is c++
	r = vm->GetEnv ((void **) &env, JNI_VERSION_1_6);
    if (r != JNI_OK) {
		JAMI_ERR("JNI_OnLoad: failed to get the environment using GetEnv()");
        return -1;
    }
	JAMI_INFO("JNI_Onload: GetEnv %p", env);

	clazz = env->FindClass (kjamiservicePath);
	if (!clazz) {
        JAMI_ERR("JNI_Onload: whoops, %s class not found!", kjamiservicePath);
	}
	gJavaVM = vm;
	JAMI_INFO("JNI_Onload: JavaVM %p", gJavaVM);

	/* put instances of class object we need into cache */
    //initClassHelper(env, kManagerPath, &gManagerObject);

	JNINativeMethod methods[] = {

	{"new_StringMap__SWIG_0", "()J", (void*)& Java_net_jami_daemon_JamiServiceJNI_new_1StringMap_1_1SWIG_10},
{"new_StringMap__SWIG_1", "(JLnet/jami/daemon/StringMap;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_new_1StringMap_1_1SWIG_11},
{"StringMap_Iterator_getNextUnchecked", "(JLnet/jami/daemon/StringMap$Iterator;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_StringMap_1Iterator_1getNextUnchecked},
{"StringMap_Iterator_isNot", "(JLnet/jami/daemon/StringMap$Iterator;JLnet/jami/daemon/StringMap$Iterator;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_StringMap_1Iterator_1isNot},
{"StringMap_Iterator_getKey", "(JLnet/jami/daemon/StringMap$Iterator;)Ljava/lang/String;", (void*)& Java_net_jami_daemon_JamiServiceJNI_StringMap_1Iterator_1getKey},
{"StringMap_Iterator_getValue", "(JLnet/jami/daemon/StringMap$Iterator;)Ljava/lang/String;", (void*)& Java_net_jami_daemon_JamiServiceJNI_StringMap_1Iterator_1getValue},
{"StringMap_Iterator_setValue", "(JLnet/jami/daemon/StringMap$Iterator;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_StringMap_1Iterator_1setValue},
{"delete_StringMap_Iterator", "(J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_delete_1StringMap_1Iterator},
{"StringMap_isEmpty", "(JLnet/jami/daemon/StringMap;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_StringMap_1isEmpty},
{"StringMap_clear", "(JLnet/jami/daemon/StringMap;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_StringMap_1clear},
{"StringMap_find", "(JLnet/jami/daemon/StringMap;Ljava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_StringMap_1find},
{"StringMap_begin", "(JLnet/jami/daemon/StringMap;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_StringMap_1begin},
{"StringMap_end", "(JLnet/jami/daemon/StringMap;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_StringMap_1end},
{"StringMap_sizeImpl", "(JLnet/jami/daemon/StringMap;)I", (void*)& Java_net_jami_daemon_JamiServiceJNI_StringMap_1sizeImpl},
{"StringMap_containsImpl", "(JLnet/jami/daemon/StringMap;Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_StringMap_1containsImpl},
{"StringMap_putUnchecked", "(JLnet/jami/daemon/StringMap;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_StringMap_1putUnchecked},
{"StringMap_removeUnchecked", "(JLnet/jami/daemon/StringMap;JLnet/jami/daemon/StringMap$Iterator;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_StringMap_1removeUnchecked},
{"StringMap_keys", "(JLnet/jami/daemon/StringMap;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_StringMap_1keys},
{"StringMap_setRaw", "(JLnet/jami/daemon/StringMap;Ljava/lang/String;JLnet/jami/daemon/Blob;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_StringMap_1setRaw},
{"StringMap_getRaw", "(JLnet/jami/daemon/StringMap;Ljava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_StringMap_1getRaw},
{"delete_StringMap", "(J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_delete_1StringMap},
{"new_StringVect__SWIG_0", "()J", (void*)& Java_net_jami_daemon_JamiServiceJNI_new_1StringVect_1_1SWIG_10},
{"new_StringVect__SWIG_1", "(JLnet/jami/daemon/StringVect;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_new_1StringVect_1_1SWIG_11},
{"StringVect_capacity", "(JLnet/jami/daemon/StringVect;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_StringVect_1capacity},
{"StringVect_reserve", "(JLnet/jami/daemon/StringVect;J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_StringVect_1reserve},
{"StringVect_isEmpty", "(JLnet/jami/daemon/StringVect;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_StringVect_1isEmpty},
{"StringVect_clear", "(JLnet/jami/daemon/StringVect;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_StringVect_1clear},
{"new_StringVect__SWIG_2", "(ILjava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_new_1StringVect_1_1SWIG_12},
{"StringVect_doSize", "(JLnet/jami/daemon/StringVect;)I", (void*)& Java_net_jami_daemon_JamiServiceJNI_StringVect_1doSize},
{"StringVect_doAdd__SWIG_0", "(JLnet/jami/daemon/StringVect;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_StringVect_1doAdd_1_1SWIG_10},
{"StringVect_doAdd__SWIG_1", "(JLnet/jami/daemon/StringVect;ILjava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_StringVect_1doAdd_1_1SWIG_11},
{"StringVect_doRemove", "(JLnet/jami/daemon/StringVect;I)Ljava/lang/String;", (void*)& Java_net_jami_daemon_JamiServiceJNI_StringVect_1doRemove},
{"StringVect_doGet", "(JLnet/jami/daemon/StringVect;I)Ljava/lang/String;", (void*)& Java_net_jami_daemon_JamiServiceJNI_StringVect_1doGet},
{"StringVect_doSet", "(JLnet/jami/daemon/StringVect;ILjava/lang/String;)Ljava/lang/String;", (void*)& Java_net_jami_daemon_JamiServiceJNI_StringVect_1doSet},
{"StringVect_doRemoveRange", "(JLnet/jami/daemon/StringVect;II)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_StringVect_1doRemoveRange},
{"delete_StringVect", "(J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_delete_1StringVect},
{"new_VectMap__SWIG_0", "()J", (void*)& Java_net_jami_daemon_JamiServiceJNI_new_1VectMap_1_1SWIG_10},
{"new_VectMap__SWIG_1", "(JLnet/jami/daemon/VectMap;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_new_1VectMap_1_1SWIG_11},
{"VectMap_capacity", "(JLnet/jami/daemon/VectMap;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_VectMap_1capacity},
{"VectMap_reserve", "(JLnet/jami/daemon/VectMap;J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_VectMap_1reserve},
{"VectMap_isEmpty", "(JLnet/jami/daemon/VectMap;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_VectMap_1isEmpty},
{"VectMap_clear", "(JLnet/jami/daemon/VectMap;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_VectMap_1clear},
{"new_VectMap__SWIG_2", "(IJLnet/jami/daemon/StringMap;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_new_1VectMap_1_1SWIG_12},
{"VectMap_doSize", "(JLnet/jami/daemon/VectMap;)I", (void*)& Java_net_jami_daemon_JamiServiceJNI_VectMap_1doSize},
{"VectMap_doAdd__SWIG_0", "(JLnet/jami/daemon/VectMap;JLnet/jami/daemon/StringMap;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_VectMap_1doAdd_1_1SWIG_10},
{"VectMap_doAdd__SWIG_1", "(JLnet/jami/daemon/VectMap;IJLnet/jami/daemon/StringMap;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_VectMap_1doAdd_1_1SWIG_11},
{"VectMap_doRemove", "(JLnet/jami/daemon/VectMap;I)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_VectMap_1doRemove},
{"VectMap_doGet", "(JLnet/jami/daemon/VectMap;I)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_VectMap_1doGet},
{"VectMap_doSet", "(JLnet/jami/daemon/VectMap;IJLnet/jami/daemon/StringMap;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_VectMap_1doSet},
{"VectMap_doRemoveRange", "(JLnet/jami/daemon/VectMap;II)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_VectMap_1doRemoveRange},
{"delete_VectMap", "(J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_delete_1VectMap},
{"new_IntegerMap__SWIG_0", "()J", (void*)& Java_net_jami_daemon_JamiServiceJNI_new_1IntegerMap_1_1SWIG_10},
{"new_IntegerMap__SWIG_1", "(JLnet/jami/daemon/IntegerMap;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_new_1IntegerMap_1_1SWIG_11},
{"IntegerMap_Iterator_getNextUnchecked", "(JLnet/jami/daemon/IntegerMap$Iterator;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_IntegerMap_1Iterator_1getNextUnchecked},
{"IntegerMap_Iterator_isNot", "(JLnet/jami/daemon/IntegerMap$Iterator;JLnet/jami/daemon/IntegerMap$Iterator;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_IntegerMap_1Iterator_1isNot},
{"IntegerMap_Iterator_getKey", "(JLnet/jami/daemon/IntegerMap$Iterator;)Ljava/lang/String;", (void*)& Java_net_jami_daemon_JamiServiceJNI_IntegerMap_1Iterator_1getKey},
{"IntegerMap_Iterator_getValue", "(JLnet/jami/daemon/IntegerMap$Iterator;)I", (void*)& Java_net_jami_daemon_JamiServiceJNI_IntegerMap_1Iterator_1getValue},
{"IntegerMap_Iterator_setValue", "(JLnet/jami/daemon/IntegerMap$Iterator;I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_IntegerMap_1Iterator_1setValue},
{"delete_IntegerMap_Iterator", "(J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_delete_1IntegerMap_1Iterator},
{"IntegerMap_isEmpty", "(JLnet/jami/daemon/IntegerMap;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_IntegerMap_1isEmpty},
{"IntegerMap_clear", "(JLnet/jami/daemon/IntegerMap;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_IntegerMap_1clear},
{"IntegerMap_find", "(JLnet/jami/daemon/IntegerMap;Ljava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_IntegerMap_1find},
{"IntegerMap_begin", "(JLnet/jami/daemon/IntegerMap;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_IntegerMap_1begin},
{"IntegerMap_end", "(JLnet/jami/daemon/IntegerMap;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_IntegerMap_1end},
{"IntegerMap_sizeImpl", "(JLnet/jami/daemon/IntegerMap;)I", (void*)& Java_net_jami_daemon_JamiServiceJNI_IntegerMap_1sizeImpl},
{"IntegerMap_containsImpl", "(JLnet/jami/daemon/IntegerMap;Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_IntegerMap_1containsImpl},
{"IntegerMap_putUnchecked", "(JLnet/jami/daemon/IntegerMap;Ljava/lang/String;I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_IntegerMap_1putUnchecked},
{"IntegerMap_removeUnchecked", "(JLnet/jami/daemon/IntegerMap;JLnet/jami/daemon/IntegerMap$Iterator;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_IntegerMap_1removeUnchecked},
{"delete_IntegerMap", "(J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_delete_1IntegerMap},
{"new_IntVect__SWIG_0", "()J", (void*)& Java_net_jami_daemon_JamiServiceJNI_new_1IntVect_1_1SWIG_10},
{"new_IntVect__SWIG_1", "(JLnet/jami/daemon/IntVect;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_new_1IntVect_1_1SWIG_11},
{"IntVect_capacity", "(JLnet/jami/daemon/IntVect;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_IntVect_1capacity},
{"IntVect_reserve", "(JLnet/jami/daemon/IntVect;J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_IntVect_1reserve},
{"IntVect_isEmpty", "(JLnet/jami/daemon/IntVect;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_IntVect_1isEmpty},
{"IntVect_clear", "(JLnet/jami/daemon/IntVect;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_IntVect_1clear},
{"new_IntVect__SWIG_2", "(II)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_new_1IntVect_1_1SWIG_12},
{"IntVect_doSize", "(JLnet/jami/daemon/IntVect;)I", (void*)& Java_net_jami_daemon_JamiServiceJNI_IntVect_1doSize},
{"IntVect_doAdd__SWIG_0", "(JLnet/jami/daemon/IntVect;I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_IntVect_1doAdd_1_1SWIG_10},
{"IntVect_doAdd__SWIG_1", "(JLnet/jami/daemon/IntVect;II)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_IntVect_1doAdd_1_1SWIG_11},
{"IntVect_doRemove", "(JLnet/jami/daemon/IntVect;I)I", (void*)& Java_net_jami_daemon_JamiServiceJNI_IntVect_1doRemove},
{"IntVect_doGet", "(JLnet/jami/daemon/IntVect;I)I", (void*)& Java_net_jami_daemon_JamiServiceJNI_IntVect_1doGet},
{"IntVect_doSet", "(JLnet/jami/daemon/IntVect;II)I", (void*)& Java_net_jami_daemon_JamiServiceJNI_IntVect_1doSet},
{"IntVect_doRemoveRange", "(JLnet/jami/daemon/IntVect;II)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_IntVect_1doRemoveRange},
{"delete_IntVect", "(J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_delete_1IntVect},
{"new_UintVect__SWIG_0", "()J", (void*)& Java_net_jami_daemon_JamiServiceJNI_new_1UintVect_1_1SWIG_10},
{"new_UintVect__SWIG_1", "(JLnet/jami/daemon/UintVect;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_new_1UintVect_1_1SWIG_11},
{"UintVect_capacity", "(JLnet/jami/daemon/UintVect;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_UintVect_1capacity},
{"UintVect_reserve", "(JLnet/jami/daemon/UintVect;J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_UintVect_1reserve},
{"UintVect_isEmpty", "(JLnet/jami/daemon/UintVect;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_UintVect_1isEmpty},
{"UintVect_clear", "(JLnet/jami/daemon/UintVect;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_UintVect_1clear},
{"new_UintVect__SWIG_2", "(IJ)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_new_1UintVect_1_1SWIG_12},
{"UintVect_doSize", "(JLnet/jami/daemon/UintVect;)I", (void*)& Java_net_jami_daemon_JamiServiceJNI_UintVect_1doSize},
{"UintVect_doAdd__SWIG_0", "(JLnet/jami/daemon/UintVect;J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_UintVect_1doAdd_1_1SWIG_10},
{"UintVect_doAdd__SWIG_1", "(JLnet/jami/daemon/UintVect;IJ)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_UintVect_1doAdd_1_1SWIG_11},
{"UintVect_doRemove", "(JLnet/jami/daemon/UintVect;I)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_UintVect_1doRemove},
{"UintVect_doGet", "(JLnet/jami/daemon/UintVect;I)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_UintVect_1doGet},
{"UintVect_doSet", "(JLnet/jami/daemon/UintVect;IJ)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_UintVect_1doSet},
{"UintVect_doRemoveRange", "(JLnet/jami/daemon/UintVect;II)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_UintVect_1doRemoveRange},
{"delete_UintVect", "(J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_delete_1UintVect},
{"new_Blob__SWIG_0", "()J", (void*)& Java_net_jami_daemon_JamiServiceJNI_new_1Blob_1_1SWIG_10},
{"new_Blob__SWIG_1", "(JLnet/jami/daemon/Blob;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_new_1Blob_1_1SWIG_11},
{"Blob_capacity", "(JLnet/jami/daemon/Blob;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_Blob_1capacity},
{"Blob_reserve", "(JLnet/jami/daemon/Blob;J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Blob_1reserve},
{"Blob_isEmpty", "(JLnet/jami/daemon/Blob;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_Blob_1isEmpty},
{"Blob_clear", "(JLnet/jami/daemon/Blob;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Blob_1clear},
{"new_Blob__SWIG_2", "(IB)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_new_1Blob_1_1SWIG_12},
{"Blob_doSize", "(JLnet/jami/daemon/Blob;)I", (void*)& Java_net_jami_daemon_JamiServiceJNI_Blob_1doSize},
{"Blob_doAdd__SWIG_0", "(JLnet/jami/daemon/Blob;B)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Blob_1doAdd_1_1SWIG_10},
{"Blob_doAdd__SWIG_1", "(JLnet/jami/daemon/Blob;IB)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Blob_1doAdd_1_1SWIG_11},
{"Blob_doRemove", "(JLnet/jami/daemon/Blob;I)B", (void*)& Java_net_jami_daemon_JamiServiceJNI_Blob_1doRemove},
{"Blob_doGet", "(JLnet/jami/daemon/Blob;I)B", (void*)& Java_net_jami_daemon_JamiServiceJNI_Blob_1doGet},
{"Blob_doSet", "(JLnet/jami/daemon/Blob;IB)B", (void*)& Java_net_jami_daemon_JamiServiceJNI_Blob_1doSet},
{"Blob_doRemoveRange", "(JLnet/jami/daemon/Blob;II)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Blob_1doRemoveRange},
{"delete_Blob", "(J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_delete_1Blob},
{"new_FloatVect__SWIG_0", "()J", (void*)& Java_net_jami_daemon_JamiServiceJNI_new_1FloatVect_1_1SWIG_10},
{"new_FloatVect__SWIG_1", "(JLnet/jami/daemon/FloatVect;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_new_1FloatVect_1_1SWIG_11},
{"FloatVect_capacity", "(JLnet/jami/daemon/FloatVect;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_FloatVect_1capacity},
{"FloatVect_reserve", "(JLnet/jami/daemon/FloatVect;J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_FloatVect_1reserve},
{"FloatVect_isEmpty", "(JLnet/jami/daemon/FloatVect;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_FloatVect_1isEmpty},
{"FloatVect_clear", "(JLnet/jami/daemon/FloatVect;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_FloatVect_1clear},
{"new_FloatVect__SWIG_2", "(IF)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_new_1FloatVect_1_1SWIG_12},
{"FloatVect_doSize", "(JLnet/jami/daemon/FloatVect;)I", (void*)& Java_net_jami_daemon_JamiServiceJNI_FloatVect_1doSize},
{"FloatVect_doAdd__SWIG_0", "(JLnet/jami/daemon/FloatVect;F)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_FloatVect_1doAdd_1_1SWIG_10},
{"FloatVect_doAdd__SWIG_1", "(JLnet/jami/daemon/FloatVect;IF)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_FloatVect_1doAdd_1_1SWIG_11},
{"FloatVect_doRemove", "(JLnet/jami/daemon/FloatVect;I)F", (void*)& Java_net_jami_daemon_JamiServiceJNI_FloatVect_1doRemove},
{"FloatVect_doGet", "(JLnet/jami/daemon/FloatVect;I)F", (void*)& Java_net_jami_daemon_JamiServiceJNI_FloatVect_1doGet},
{"FloatVect_doSet", "(JLnet/jami/daemon/FloatVect;IF)F", (void*)& Java_net_jami_daemon_JamiServiceJNI_FloatVect_1doSet},
{"FloatVect_doRemoveRange", "(JLnet/jami/daemon/FloatVect;II)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_FloatVect_1doRemoveRange},
{"delete_FloatVect", "(J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_delete_1FloatVect},
{"fini", "()V", (void*)& Java_net_jami_daemon_JamiServiceJNI_fini},
{"placeCall", "(Ljava/lang/String;Ljava/lang/String;JLnet/jami/daemon/StringMap;)Ljava/lang/String;", (void*)& Java_net_jami_daemon_JamiServiceJNI_placeCall},
{"refuse", "(Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_refuse},
{"accept", "(Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_accept},
{"hangUp", "(Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_hangUp},
{"hold", "(Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_hold},
{"unhold", "(Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_unhold},
{"muteLocalMedia", "(Ljava/lang/String;Ljava/lang/String;Z)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_muteLocalMedia},
{"transfer", "(Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_transfer},
{"attendedTransfer", "(Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_attendedTransfer},
{"getCallDetails", "(Ljava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getCallDetails},
{"getCallList", "()J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getCallList},
{"removeConference", "(Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_removeConference},
{"joinParticipant", "(Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_joinParticipant},
{"createConfFromParticipantList", "(JLnet/jami/daemon/StringVect;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_createConfFromParticipantList},
{"setConferenceLayout", "(Ljava/lang/String;I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_setConferenceLayout},
{"setActiveParticipant", "(Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_setActiveParticipant},
{"isConferenceParticipant", "(Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_isConferenceParticipant},
{"addParticipant", "(Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_addParticipant},
{"addMainParticipant", "(Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_addMainParticipant},
{"detachParticipant", "(Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_detachParticipant},
{"joinConference", "(Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_joinConference},
{"hangUpConference", "(Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_hangUpConference},
{"holdConference", "(Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_holdConference},
{"unholdConference", "(Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_unholdConference},
{"getConferenceList", "()J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getConferenceList},
{"getParticipantList", "(Ljava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getParticipantList},
{"getDisplayNames", "(Ljava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getDisplayNames},
{"getConferenceId", "(Ljava/lang/String;)Ljava/lang/String;", (void*)& Java_net_jami_daemon_JamiServiceJNI_getConferenceId},
{"getConferenceDetails", "(Ljava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getConferenceDetails},
{"getConferenceInfos", "(Ljava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getConferenceInfos},
{"setModerator", "(Ljava/lang/String;Ljava/lang/String;Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_setModerator},
{"muteParticipant", "(Ljava/lang/String;Ljava/lang/String;Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_muteParticipant},
{"startRecordedFilePlayback", "(Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_startRecordedFilePlayback},
{"stopRecordedFilePlayback", "()V", (void*)& Java_net_jami_daemon_JamiServiceJNI_stopRecordedFilePlayback},
{"toggleRecording", "(Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_toggleRecording},
{"setRecording", "(Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_setRecording},
{"recordPlaybackSeek", "(D)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_recordPlaybackSeek},
{"getIsRecording", "(Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_getIsRecording},
{"getCurrentAudioCodecName", "(Ljava/lang/String;)Ljava/lang/String;", (void*)& Java_net_jami_daemon_JamiServiceJNI_getCurrentAudioCodecName},
{"playDTMF", "(Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_playDTMF},
{"startTone", "(II)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_startTone},
{"switchInput__SWIG_0", "(Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_switchInput_1_1SWIG_10},
{"sendTextMessage", "(Ljava/lang/String;JLnet/jami/daemon/StringMap;Ljava/lang/String;Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_sendTextMessage},
{"delete_Callback", "(J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_delete_1Callback},
{"Callback_callStateChanged", "(JLnet/jami/daemon/Callback;Ljava/lang/String;Ljava/lang/String;I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1callStateChanged},
{"Callback_callStateChangedSwigExplicitCallback", "(JLnet/jami/daemon/Callback;Ljava/lang/String;Ljava/lang/String;I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1callStateChangedSwigExplicitCallback},
{"Callback_transferFailed", "(JLnet/jami/daemon/Callback;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1transferFailed},
{"Callback_transferFailedSwigExplicitCallback", "(JLnet/jami/daemon/Callback;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1transferFailedSwigExplicitCallback},
{"Callback_transferSucceeded", "(JLnet/jami/daemon/Callback;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1transferSucceeded},
{"Callback_transferSucceededSwigExplicitCallback", "(JLnet/jami/daemon/Callback;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1transferSucceededSwigExplicitCallback},
{"Callback_recordPlaybackStopped", "(JLnet/jami/daemon/Callback;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1recordPlaybackStopped},
{"Callback_recordPlaybackStoppedSwigExplicitCallback", "(JLnet/jami/daemon/Callback;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1recordPlaybackStoppedSwigExplicitCallback},
{"Callback_voiceMailNotify", "(JLnet/jami/daemon/Callback;Ljava/lang/String;III)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1voiceMailNotify},
{"Callback_voiceMailNotifySwigExplicitCallback", "(JLnet/jami/daemon/Callback;Ljava/lang/String;III)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1voiceMailNotifySwigExplicitCallback},
{"Callback_incomingMessage", "(JLnet/jami/daemon/Callback;Ljava/lang/String;Ljava/lang/String;JLnet/jami/daemon/StringMap;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1incomingMessage},
{"Callback_incomingMessageSwigExplicitCallback", "(JLnet/jami/daemon/Callback;Ljava/lang/String;Ljava/lang/String;JLnet/jami/daemon/StringMap;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1incomingMessageSwigExplicitCallback},
{"Callback_incomingCall", "(JLnet/jami/daemon/Callback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1incomingCall},
{"Callback_incomingCallSwigExplicitCallback", "(JLnet/jami/daemon/Callback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1incomingCallSwigExplicitCallback},
{"Callback_recordPlaybackFilepath", "(JLnet/jami/daemon/Callback;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1recordPlaybackFilepath},
{"Callback_recordPlaybackFilepathSwigExplicitCallback", "(JLnet/jami/daemon/Callback;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1recordPlaybackFilepathSwigExplicitCallback},
{"Callback_conferenceCreated", "(JLnet/jami/daemon/Callback;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1conferenceCreated},
{"Callback_conferenceCreatedSwigExplicitCallback", "(JLnet/jami/daemon/Callback;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1conferenceCreatedSwigExplicitCallback},
{"Callback_conferenceChanged", "(JLnet/jami/daemon/Callback;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1conferenceChanged},
{"Callback_conferenceChangedSwigExplicitCallback", "(JLnet/jami/daemon/Callback;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1conferenceChangedSwigExplicitCallback},
{"Callback_conferenceRemoved", "(JLnet/jami/daemon/Callback;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1conferenceRemoved},
{"Callback_conferenceRemovedSwigExplicitCallback", "(JLnet/jami/daemon/Callback;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1conferenceRemovedSwigExplicitCallback},
{"Callback_updatePlaybackScale", "(JLnet/jami/daemon/Callback;Ljava/lang/String;II)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1updatePlaybackScale},
{"Callback_updatePlaybackScaleSwigExplicitCallback", "(JLnet/jami/daemon/Callback;Ljava/lang/String;II)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1updatePlaybackScaleSwigExplicitCallback},
{"Callback_newCall", "(JLnet/jami/daemon/Callback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1newCall},
{"Callback_newCallSwigExplicitCallback", "(JLnet/jami/daemon/Callback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1newCallSwigExplicitCallback},
{"Callback_sipCallStateChange", "(JLnet/jami/daemon/Callback;Ljava/lang/String;Ljava/lang/String;I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1sipCallStateChange},
{"Callback_sipCallStateChangeSwigExplicitCallback", "(JLnet/jami/daemon/Callback;Ljava/lang/String;Ljava/lang/String;I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1sipCallStateChangeSwigExplicitCallback},
{"Callback_recordingStateChanged", "(JLnet/jami/daemon/Callback;Ljava/lang/String;I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1recordingStateChanged},
{"Callback_recordingStateChangedSwigExplicitCallback", "(JLnet/jami/daemon/Callback;Ljava/lang/String;I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1recordingStateChangedSwigExplicitCallback},
{"Callback_recordStateChange", "(JLnet/jami/daemon/Callback;Ljava/lang/String;I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1recordStateChange},
{"Callback_recordStateChangeSwigExplicitCallback", "(JLnet/jami/daemon/Callback;Ljava/lang/String;I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1recordStateChangeSwigExplicitCallback},
{"Callback_onRtcpReportReceived", "(JLnet/jami/daemon/Callback;Ljava/lang/String;JLnet/jami/daemon/IntegerMap;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1onRtcpReportReceived},
{"Callback_onRtcpReportReceivedSwigExplicitCallback", "(JLnet/jami/daemon/Callback;Ljava/lang/String;JLnet/jami/daemon/IntegerMap;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1onRtcpReportReceivedSwigExplicitCallback},
{"Callback_onConferenceInfosUpdated", "(JLnet/jami/daemon/Callback;Ljava/lang/String;JLnet/jami/daemon/VectMap;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1onConferenceInfosUpdated},
{"Callback_onConferenceInfosUpdatedSwigExplicitCallback", "(JLnet/jami/daemon/Callback;Ljava/lang/String;JLnet/jami/daemon/VectMap;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1onConferenceInfosUpdatedSwigExplicitCallback},
{"Callback_peerHold", "(JLnet/jami/daemon/Callback;Ljava/lang/String;Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1peerHold},
{"Callback_peerHoldSwigExplicitCallback", "(JLnet/jami/daemon/Callback;Ljava/lang/String;Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1peerHoldSwigExplicitCallback},
{"Callback_connectionUpdate", "(JLnet/jami/daemon/Callback;Ljava/lang/String;I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1connectionUpdate},
{"Callback_connectionUpdateSwigExplicitCallback", "(JLnet/jami/daemon/Callback;Ljava/lang/String;I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1connectionUpdateSwigExplicitCallback},
{"Callback_remoteRecordingChanged", "(JLnet/jami/daemon/Callback;Ljava/lang/String;Ljava/lang/String;Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1remoteRecordingChanged},
{"Callback_remoteRecordingChangedSwigExplicitCallback", "(JLnet/jami/daemon/Callback;Ljava/lang/String;Ljava/lang/String;Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1remoteRecordingChangedSwigExplicitCallback},
{"new_Callback", "()J", (void*)& Java_net_jami_daemon_JamiServiceJNI_new_1Callback},
{"Callback_director_connect", "(Lnet/jami/daemon/Callback;JZZ)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1director_1connect},
{"Callback_change_ownership", "(Lnet/jami/daemon/Callback;JZ)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Callback_1change_1ownership},
{"new_MessageVect__SWIG_0", "()J", (void*)& Java_net_jami_daemon_JamiServiceJNI_new_1MessageVect_1_1SWIG_10},
{"new_MessageVect__SWIG_1", "(JLnet/jami/daemon/MessageVect;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_new_1MessageVect_1_1SWIG_11},
{"MessageVect_capacity", "(JLnet/jami/daemon/MessageVect;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_MessageVect_1capacity},
{"MessageVect_reserve", "(JLnet/jami/daemon/MessageVect;J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_MessageVect_1reserve},
{"MessageVect_isEmpty", "(JLnet/jami/daemon/MessageVect;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_MessageVect_1isEmpty},
{"MessageVect_clear", "(JLnet/jami/daemon/MessageVect;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_MessageVect_1clear},
{"new_MessageVect__SWIG_2", "(IJLnet/jami/daemon/Message;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_new_1MessageVect_1_1SWIG_12},
{"MessageVect_doSize", "(JLnet/jami/daemon/MessageVect;)I", (void*)& Java_net_jami_daemon_JamiServiceJNI_MessageVect_1doSize},
{"MessageVect_doAdd__SWIG_0", "(JLnet/jami/daemon/MessageVect;JLnet/jami/daemon/Message;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_MessageVect_1doAdd_1_1SWIG_10},
{"MessageVect_doAdd__SWIG_1", "(JLnet/jami/daemon/MessageVect;IJLnet/jami/daemon/Message;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_MessageVect_1doAdd_1_1SWIG_11},
{"MessageVect_doRemove", "(JLnet/jami/daemon/MessageVect;I)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_MessageVect_1doRemove},
{"MessageVect_doGet", "(JLnet/jami/daemon/MessageVect;I)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_MessageVect_1doGet},
{"MessageVect_doSet", "(JLnet/jami/daemon/MessageVect;IJLnet/jami/daemon/Message;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_MessageVect_1doSet},
{"MessageVect_doRemoveRange", "(JLnet/jami/daemon/MessageVect;II)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_MessageVect_1doRemoveRange},
{"delete_MessageVect", "(J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_delete_1MessageVect},
{"Message_from_set", "(JLnet/jami/daemon/Message;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Message_1from_1set},
{"Message_from_get", "(JLnet/jami/daemon/Message;)Ljava/lang/String;", (void*)& Java_net_jami_daemon_JamiServiceJNI_Message_1from_1get},
{"Message_payloads_set", "(JLnet/jami/daemon/Message;JLnet/jami/daemon/StringMap;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Message_1payloads_1set},
{"Message_payloads_get", "(JLnet/jami/daemon/Message;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_Message_1payloads_1get},
{"Message_received_set", "(JLnet/jami/daemon/Message;J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_Message_1received_1set},
{"Message_received_get", "(JLnet/jami/daemon/Message;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_Message_1received_1get},
{"new_Message", "()J", (void*)& Java_net_jami_daemon_JamiServiceJNI_new_1Message},
{"delete_Message", "(J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_delete_1Message},
{"getAccountDetails", "(Ljava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getAccountDetails},
{"getVolatileAccountDetails", "(Ljava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getVolatileAccountDetails},
{"setAccountDetails", "(Ljava/lang/String;JLnet/jami/daemon/StringMap;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_setAccountDetails},
{"setAccountActive", "(Ljava/lang/String;Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_setAccountActive},
{"getAccountTemplate", "(Ljava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getAccountTemplate},
{"monitor", "(Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_monitor},
{"addAccount", "(JLnet/jami/daemon/StringMap;)Ljava/lang/String;", (void*)& Java_net_jami_daemon_JamiServiceJNI_addAccount},
{"removeAccount", "(Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_removeAccount},
{"getAccountList", "()J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getAccountList},
{"sendRegister", "(Ljava/lang/String;Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_sendRegister},
{"registerAllAccounts", "()V", (void*)& Java_net_jami_daemon_JamiServiceJNI_registerAllAccounts},
{"sendAccountTextMessage", "(Ljava/lang/String;Ljava/lang/String;JLnet/jami/daemon/StringMap;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_sendAccountTextMessage},
{"getLastMessages", "(Ljava/lang/String;J)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getLastMessages},
{"getMessageStatus__SWIG_0", "(J)I", (void*)& Java_net_jami_daemon_JamiServiceJNI_getMessageStatus_1_1SWIG_10},
{"getMessageStatus__SWIG_1", "(Ljava/lang/String;J)I", (void*)& Java_net_jami_daemon_JamiServiceJNI_getMessageStatus_1_1SWIG_11},
{"cancelMessage", "(Ljava/lang/String;J)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_cancelMessage},
{"setIsComposing", "(Ljava/lang/String;Ljava/lang/String;Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_setIsComposing},
{"setMessageDisplayed", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_setMessageDisplayed},
{"changeAccountPassword", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_changeAccountPassword},
{"lookupName", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_lookupName},
{"lookupAddress", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_lookupAddress},
{"registerName", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_registerName},
{"searchUser", "(Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_searchUser},
{"getCodecList", "()J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getCodecList},
{"getSupportedTlsMethod", "()J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getSupportedTlsMethod},
{"getSupportedCiphers", "(Ljava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getSupportedCiphers},
{"getCodecDetails", "(Ljava/lang/String;J)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getCodecDetails},
{"setCodecDetails", "(Ljava/lang/String;JJLnet/jami/daemon/StringMap;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_setCodecDetails},
{"getActiveCodecList", "(Ljava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getActiveCodecList},
{"exportOnRing", "(Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_exportOnRing},
{"exportToFile", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_exportToFile},
{"getKnownRingDevices", "(Ljava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getKnownRingDevices},
{"revokeDevice", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_revokeDevice},
{"setActiveCodecList", "(Ljava/lang/String;JLnet/jami/daemon/UintVect;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_setActiveCodecList},
{"getAudioPluginList", "()J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getAudioPluginList},
{"setAudioPlugin", "(Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_setAudioPlugin},
{"getAudioOutputDeviceList", "()J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getAudioOutputDeviceList},
{"setAudioOutputDevice", "(I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_setAudioOutputDevice},
{"setAudioInputDevice", "(I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_setAudioInputDevice},
{"setAudioRingtoneDevice", "(I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_setAudioRingtoneDevice},
{"getAudioInputDeviceList", "()J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getAudioInputDeviceList},
{"getCurrentAudioDevicesIndex", "()J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getCurrentAudioDevicesIndex},
{"getAudioInputDeviceIndex", "(Ljava/lang/String;)I", (void*)& Java_net_jami_daemon_JamiServiceJNI_getAudioInputDeviceIndex},
{"getAudioOutputDeviceIndex", "(Ljava/lang/String;)I", (void*)& Java_net_jami_daemon_JamiServiceJNI_getAudioOutputDeviceIndex},
{"getCurrentAudioOutputPlugin", "()Ljava/lang/String;", (void*)& Java_net_jami_daemon_JamiServiceJNI_getCurrentAudioOutputPlugin},
{"getNoiseSuppressState", "()Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_getNoiseSuppressState},
{"setNoiseSuppressState", "(Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_setNoiseSuppressState},
{"isAgcEnabled", "()Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_isAgcEnabled},
{"setAgcState", "(Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_setAgcState},
{"muteDtmf", "(Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_muteDtmf},
{"isDtmfMuted", "()Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_isDtmfMuted},
{"isCaptureMuted", "()Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_isCaptureMuted},
{"muteCapture", "(Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_muteCapture},
{"isPlaybackMuted", "()Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_isPlaybackMuted},
{"mutePlayback", "(Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_mutePlayback},
{"isRingtoneMuted", "()Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_isRingtoneMuted},
{"muteRingtone", "(Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_muteRingtone},
{"getAudioManager", "()Ljava/lang/String;", (void*)& Java_net_jami_daemon_JamiServiceJNI_getAudioManager},
{"setAudioManager", "(Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_setAudioManager},
{"getRecordPath", "()Ljava/lang/String;", (void*)& Java_net_jami_daemon_JamiServiceJNI_getRecordPath},
{"setRecordPath", "(Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_setRecordPath},
{"getIsAlwaysRecording", "()Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_getIsAlwaysRecording},
{"setIsAlwaysRecording", "(Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_setIsAlwaysRecording},
{"getRecordPreview", "()Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_getRecordPreview},
{"setRecordPreview", "(Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_setRecordPreview},
{"getRecordQuality", "()I", (void*)& Java_net_jami_daemon_JamiServiceJNI_getRecordQuality},
{"setRecordQuality", "(I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_setRecordQuality},
{"setHistoryLimit", "(I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_setHistoryLimit},
{"getHistoryLimit", "()I", (void*)& Java_net_jami_daemon_JamiServiceJNI_getHistoryLimit},
{"setRingingTimeout", "(I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_setRingingTimeout},
{"getRingingTimeout", "()I", (void*)& Java_net_jami_daemon_JamiServiceJNI_getRingingTimeout},
{"setAccountsOrder", "(Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_setAccountsOrder},
{"getCredentials", "(Ljava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getCredentials},
{"setCredentials", "(Ljava/lang/String;JLnet/jami/daemon/VectMap;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_setCredentials},
{"getAddrFromInterfaceName", "(Ljava/lang/String;)Ljava/lang/String;", (void*)& Java_net_jami_daemon_JamiServiceJNI_getAddrFromInterfaceName},
{"getAllIpInterface", "()J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getAllIpInterface},
{"getAllIpInterfaceByName", "()J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getAllIpInterfaceByName},
{"getShortcuts", "()J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getShortcuts},
{"setShortcuts", "(JLnet/jami/daemon/StringMap;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_setShortcuts},
{"setVolume", "(Ljava/lang/String;D)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_setVolume},
{"getVolume", "(Ljava/lang/String;)D", (void*)& Java_net_jami_daemon_JamiServiceJNI_getVolume},
{"validateCertificatePath", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_validateCertificatePath},
{"validateCertificate", "(Ljava/lang/String;Ljava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_validateCertificate},
{"getCertificateDetails", "(Ljava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getCertificateDetails},
{"getCertificateDetailsPath", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getCertificateDetailsPath},
{"getPinnedCertificates", "()J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getPinnedCertificates},
{"pinCertificate", "(JLnet/jami/daemon/Blob;Z)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_pinCertificate},
{"unpinCertificate", "(Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_unpinCertificate},
{"pinCertificatePath", "(Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_pinCertificatePath},
{"unpinCertificatePath", "(Ljava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_unpinCertificatePath},
{"pinRemoteCertificate", "(Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_pinRemoteCertificate},
{"setCertificateStatus", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_setCertificateStatus},
{"getCertificatesByStatus", "(Ljava/lang/String;Ljava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getCertificatesByStatus},
{"getTrustRequests", "(Ljava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getTrustRequests},
{"acceptTrustRequest", "(Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_acceptTrustRequest},
{"discardTrustRequest", "(Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_discardTrustRequest},
{"sendTrustRequest", "(Ljava/lang/String;Ljava/lang/String;JLnet/jami/daemon/Blob;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_sendTrustRequest},
{"addContact", "(Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_addContact},
{"removeContact", "(Ljava/lang/String;Ljava/lang/String;Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_removeContact},
{"getContacts", "(Ljava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getContacts},
{"exportAccounts", "(JLnet/jami/daemon/StringVect;Ljava/lang/String;Ljava/lang/String;)I", (void*)& Java_net_jami_daemon_JamiServiceJNI_exportAccounts},
{"importAccounts", "(Ljava/lang/String;Ljava/lang/String;)I", (void*)& Java_net_jami_daemon_JamiServiceJNI_importAccounts},
{"connectivityChanged", "()V", (void*)& Java_net_jami_daemon_JamiServiceJNI_connectivityChanged},
{"enableProxyClient", "(Ljava/lang/String;Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_enableProxyClient},
{"setPushNotificationToken", "(Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_setPushNotificationToken},
{"pushNotificationReceived", "(Ljava/lang/String;JLnet/jami/daemon/StringMap;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_pushNotificationReceived},
{"isAudioMeterActive", "(Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_isAudioMeterActive},
{"setAudioMeterState", "(Ljava/lang/String;Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_setAudioMeterState},
{"setDefaultModerator", "(Ljava/lang/String;Ljava/lang/String;Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_setDefaultModerator},
{"getDefaultModerators", "(Ljava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getDefaultModerators},
{"enableLocalModerators", "(Ljava/lang/String;Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_enableLocalModerators},
{"isLocalModeratorsEnabled", "(Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_isLocalModeratorsEnabled},
{"setAllModerators", "(Ljava/lang/String;Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_setAllModerators},
{"isAllModerators", "(Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_isAllModerators},
{"delete_ConfigurationCallback", "(J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_delete_1ConfigurationCallback},
{"ConfigurationCallback_volumeChanged", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1volumeChanged},
{"ConfigurationCallback_volumeChangedSwigExplicitConfigurationCallback", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1volumeChangedSwigExplicitConfigurationCallback},
{"ConfigurationCallback_accountsChanged", "(JLnet/jami/daemon/ConfigurationCallback;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1accountsChanged},
{"ConfigurationCallback_accountsChangedSwigExplicitConfigurationCallback", "(JLnet/jami/daemon/ConfigurationCallback;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1accountsChangedSwigExplicitConfigurationCallback},
{"ConfigurationCallback_historyChanged", "(JLnet/jami/daemon/ConfigurationCallback;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1historyChanged},
{"ConfigurationCallback_historyChangedSwigExplicitConfigurationCallback", "(JLnet/jami/daemon/ConfigurationCallback;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1historyChangedSwigExplicitConfigurationCallback},
{"ConfigurationCallback_stunStatusFailure", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1stunStatusFailure},
{"ConfigurationCallback_stunStatusFailureSwigExplicitConfigurationCallback", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1stunStatusFailureSwigExplicitConfigurationCallback},
{"ConfigurationCallback_accountDetailsChanged", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;JLnet/jami/daemon/StringMap;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1accountDetailsChanged},
{"ConfigurationCallback_accountDetailsChangedSwigExplicitConfigurationCallback", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;JLnet/jami/daemon/StringMap;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1accountDetailsChangedSwigExplicitConfigurationCallback},
{"ConfigurationCallback_profileReceived", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1profileReceived},
{"ConfigurationCallback_profileReceivedSwigExplicitConfigurationCallback", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1profileReceivedSwigExplicitConfigurationCallback},
{"ConfigurationCallback_registrationStateChanged", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1registrationStateChanged},
{"ConfigurationCallback_registrationStateChangedSwigExplicitConfigurationCallback", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1registrationStateChangedSwigExplicitConfigurationCallback},
{"ConfigurationCallback_volatileAccountDetailsChanged", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;JLnet/jami/daemon/StringMap;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1volatileAccountDetailsChanged},
{"ConfigurationCallback_volatileAccountDetailsChangedSwigExplicitConfigurationCallback", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;JLnet/jami/daemon/StringMap;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1volatileAccountDetailsChangedSwigExplicitConfigurationCallback},
{"ConfigurationCallback_incomingAccountMessage", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;JLnet/jami/daemon/StringMap;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1incomingAccountMessage},
{"ConfigurationCallback_incomingAccountMessageSwigExplicitConfigurationCallback", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;JLnet/jami/daemon/StringMap;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1incomingAccountMessageSwigExplicitConfigurationCallback},
{"ConfigurationCallback_accountMessageStatusChanged", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1accountMessageStatusChanged},
{"ConfigurationCallback_accountMessageStatusChangedSwigExplicitConfigurationCallback", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1accountMessageStatusChangedSwigExplicitConfigurationCallback},
{"ConfigurationCallback_composingStatusChanged", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1composingStatusChanged},
{"ConfigurationCallback_composingStatusChangedSwigExplicitConfigurationCallback", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1composingStatusChangedSwigExplicitConfigurationCallback},
{"ConfigurationCallback_knownDevicesChanged", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;JLnet/jami/daemon/StringMap;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1knownDevicesChanged},
{"ConfigurationCallback_knownDevicesChangedSwigExplicitConfigurationCallback", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;JLnet/jami/daemon/StringMap;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1knownDevicesChangedSwigExplicitConfigurationCallback},
{"ConfigurationCallback_exportOnRingEnded", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;ILjava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1exportOnRingEnded},
{"ConfigurationCallback_exportOnRingEndedSwigExplicitConfigurationCallback", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;ILjava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1exportOnRingEndedSwigExplicitConfigurationCallback},
{"ConfigurationCallback_incomingTrustRequest", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;JLnet/jami/daemon/Blob;J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1incomingTrustRequest},
{"ConfigurationCallback_incomingTrustRequestSwigExplicitConfigurationCallback", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;JLnet/jami/daemon/Blob;J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1incomingTrustRequestSwigExplicitConfigurationCallback},
{"ConfigurationCallback_contactAdded", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1contactAdded},
{"ConfigurationCallback_contactAddedSwigExplicitConfigurationCallback", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1contactAddedSwigExplicitConfigurationCallback},
{"ConfigurationCallback_contactRemoved", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1contactRemoved},
{"ConfigurationCallback_contactRemovedSwigExplicitConfigurationCallback", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1contactRemovedSwigExplicitConfigurationCallback},
{"ConfigurationCallback_certificatePinned", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1certificatePinned},
{"ConfigurationCallback_certificatePinnedSwigExplicitConfigurationCallback", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1certificatePinnedSwigExplicitConfigurationCallback},
{"ConfigurationCallback_certificatePathPinned", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;JLnet/jami/daemon/StringVect;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1certificatePathPinned},
{"ConfigurationCallback_certificatePathPinnedSwigExplicitConfigurationCallback", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;JLnet/jami/daemon/StringVect;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1certificatePathPinnedSwigExplicitConfigurationCallback},
{"ConfigurationCallback_certificateExpired", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1certificateExpired},
{"ConfigurationCallback_certificateExpiredSwigExplicitConfigurationCallback", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1certificateExpiredSwigExplicitConfigurationCallback},
{"ConfigurationCallback_certificateStateChanged", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1certificateStateChanged},
{"ConfigurationCallback_certificateStateChangedSwigExplicitConfigurationCallback", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1certificateStateChangedSwigExplicitConfigurationCallback},
{"ConfigurationCallback_errorAlert", "(JLnet/jami/daemon/ConfigurationCallback;I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1errorAlert},
{"ConfigurationCallback_errorAlertSwigExplicitConfigurationCallback", "(JLnet/jami/daemon/ConfigurationCallback;I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1errorAlertSwigExplicitConfigurationCallback},
{"ConfigurationCallback_getHardwareAudioFormat", "(JLnet/jami/daemon/ConfigurationCallback;JLnet/jami/daemon/IntVect;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1getHardwareAudioFormat},
{"ConfigurationCallback_getHardwareAudioFormatSwigExplicitConfigurationCallback", "(JLnet/jami/daemon/ConfigurationCallback;JLnet/jami/daemon/IntVect;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1getHardwareAudioFormatSwigExplicitConfigurationCallback},
{"ConfigurationCallback_getAppDataPath", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;JLnet/jami/daemon/StringVect;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1getAppDataPath},
{"ConfigurationCallback_getAppDataPathSwigExplicitConfigurationCallback", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;JLnet/jami/daemon/StringVect;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1getAppDataPathSwigExplicitConfigurationCallback},
{"ConfigurationCallback_getDeviceName", "(JLnet/jami/daemon/ConfigurationCallback;JLnet/jami/daemon/StringVect;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1getDeviceName},
{"ConfigurationCallback_getDeviceNameSwigExplicitConfigurationCallback", "(JLnet/jami/daemon/ConfigurationCallback;JLnet/jami/daemon/StringVect;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1getDeviceNameSwigExplicitConfigurationCallback},
{"ConfigurationCallback_nameRegistrationEnded", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;ILjava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1nameRegistrationEnded},
{"ConfigurationCallback_nameRegistrationEndedSwigExplicitConfigurationCallback", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;ILjava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1nameRegistrationEndedSwigExplicitConfigurationCallback},
{"ConfigurationCallback_registeredNameFound", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1registeredNameFound},
{"ConfigurationCallback_registeredNameFoundSwigExplicitConfigurationCallback", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1registeredNameFoundSwigExplicitConfigurationCallback},
{"ConfigurationCallback_userSearchEnded", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;ILjava/lang/String;JLnet/jami/daemon/VectMap;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1userSearchEnded},
{"ConfigurationCallback_userSearchEndedSwigExplicitConfigurationCallback", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;ILjava/lang/String;JLnet/jami/daemon/VectMap;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1userSearchEndedSwigExplicitConfigurationCallback},
{"ConfigurationCallback_migrationEnded", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1migrationEnded},
{"ConfigurationCallback_migrationEndedSwigExplicitConfigurationCallback", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1migrationEndedSwigExplicitConfigurationCallback},
{"ConfigurationCallback_deviceRevocationEnded", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1deviceRevocationEnded},
{"ConfigurationCallback_deviceRevocationEndedSwigExplicitConfigurationCallback", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1deviceRevocationEndedSwigExplicitConfigurationCallback},
{"ConfigurationCallback_accountProfileReceived", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1accountProfileReceived},
{"ConfigurationCallback_accountProfileReceivedSwigExplicitConfigurationCallback", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1accountProfileReceivedSwigExplicitConfigurationCallback},
{"ConfigurationCallback_hardwareDecodingChanged", "(JLnet/jami/daemon/ConfigurationCallback;Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1hardwareDecodingChanged},
{"ConfigurationCallback_hardwareDecodingChangedSwigExplicitConfigurationCallback", "(JLnet/jami/daemon/ConfigurationCallback;Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1hardwareDecodingChangedSwigExplicitConfigurationCallback},
{"ConfigurationCallback_hardwareEncodingChanged", "(JLnet/jami/daemon/ConfigurationCallback;Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1hardwareEncodingChanged},
{"ConfigurationCallback_hardwareEncodingChangedSwigExplicitConfigurationCallback", "(JLnet/jami/daemon/ConfigurationCallback;Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1hardwareEncodingChangedSwigExplicitConfigurationCallback},
{"ConfigurationCallback_audioMeter", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;F)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1audioMeter},
{"ConfigurationCallback_audioMeterSwigExplicitConfigurationCallback", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;F)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1audioMeterSwigExplicitConfigurationCallback},
{"ConfigurationCallback_messageSend", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1messageSend},
{"ConfigurationCallback_messageSendSwigExplicitConfigurationCallback", "(JLnet/jami/daemon/ConfigurationCallback;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1messageSendSwigExplicitConfigurationCallback},
{"new_ConfigurationCallback", "()J", (void*)& Java_net_jami_daemon_JamiServiceJNI_new_1ConfigurationCallback},
{"ConfigurationCallback_director_connect", "(Lnet/jami/daemon/ConfigurationCallback;JZZ)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1director_1connect},
{"ConfigurationCallback_change_ownership", "(Lnet/jami/daemon/ConfigurationCallback;JZ)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConfigurationCallback_1change_1ownership},
{"DataTransferInfo_accountId_set", "(JLnet/jami/daemon/DataTransferInfo;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1accountId_1set},
{"DataTransferInfo_accountId_get", "(JLnet/jami/daemon/DataTransferInfo;)Ljava/lang/String;", (void*)& Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1accountId_1get},
{"DataTransferInfo_lastEvent_set", "(JLnet/jami/daemon/DataTransferInfo;J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1lastEvent_1set},
{"DataTransferInfo_lastEvent_get", "(JLnet/jami/daemon/DataTransferInfo;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1lastEvent_1get},
{"DataTransferInfo_flags_set", "(JLnet/jami/daemon/DataTransferInfo;J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1flags_1set},
{"DataTransferInfo_flags_get", "(JLnet/jami/daemon/DataTransferInfo;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1flags_1get},
{"DataTransferInfo_totalSize_set", "(JLnet/jami/daemon/DataTransferInfo;J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1totalSize_1set},
{"DataTransferInfo_totalSize_get", "(JLnet/jami/daemon/DataTransferInfo;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1totalSize_1get},
{"DataTransferInfo_bytesProgress_set", "(JLnet/jami/daemon/DataTransferInfo;J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1bytesProgress_1set},
{"DataTransferInfo_bytesProgress_get", "(JLnet/jami/daemon/DataTransferInfo;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1bytesProgress_1get},
{"DataTransferInfo_author_set", "(JLnet/jami/daemon/DataTransferInfo;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1author_1set},
{"DataTransferInfo_author_get", "(JLnet/jami/daemon/DataTransferInfo;)Ljava/lang/String;", (void*)& Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1author_1get},
{"DataTransferInfo_peer_set", "(JLnet/jami/daemon/DataTransferInfo;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1peer_1set},
{"DataTransferInfo_peer_get", "(JLnet/jami/daemon/DataTransferInfo;)Ljava/lang/String;", (void*)& Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1peer_1get},
{"DataTransferInfo_conversationId_set", "(JLnet/jami/daemon/DataTransferInfo;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1conversationId_1set},
{"DataTransferInfo_conversationId_get", "(JLnet/jami/daemon/DataTransferInfo;)Ljava/lang/String;", (void*)& Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1conversationId_1get},
{"DataTransferInfo_displayName_set", "(JLnet/jami/daemon/DataTransferInfo;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1displayName_1set},
{"DataTransferInfo_displayName_get", "(JLnet/jami/daemon/DataTransferInfo;)Ljava/lang/String;", (void*)& Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1displayName_1get},
{"DataTransferInfo_path_set", "(JLnet/jami/daemon/DataTransferInfo;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1path_1set},
{"DataTransferInfo_path_get", "(JLnet/jami/daemon/DataTransferInfo;)Ljava/lang/String;", (void*)& Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1path_1get},
{"DataTransferInfo_mimetype_set", "(JLnet/jami/daemon/DataTransferInfo;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1mimetype_1set},
{"DataTransferInfo_mimetype_get", "(JLnet/jami/daemon/DataTransferInfo;)Ljava/lang/String;", (void*)& Java_net_jami_daemon_JamiServiceJNI_DataTransferInfo_1mimetype_1get},
{"new_DataTransferInfo", "()J", (void*)& Java_net_jami_daemon_JamiServiceJNI_new_1DataTransferInfo},
{"delete_DataTransferInfo", "(J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_delete_1DataTransferInfo},
{"sendFile", "(JLnet/jami/daemon/DataTransferInfo;[J)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_sendFile},
{"acceptFileTransfer", "(Ljava/lang/String;Ljava/lang/String;JLjava/lang/String;J)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_acceptFileTransfer},
{"cancelDataTransfer", "(Ljava/lang/String;Ljava/lang/String;J)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_cancelDataTransfer},
{"dataTransferInfo", "(Ljava/lang/String;Ljava/lang/String;JJLnet/jami/daemon/DataTransferInfo;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_dataTransferInfo},
{"dataTransferBytesProgress", "(Ljava/lang/String;Ljava/lang/String;JJJ)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_dataTransferBytesProgress},
{"delete_DataTransferCallback", "(J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_delete_1DataTransferCallback},
{"DataTransferCallback_dataTransferEvent", "(JLnet/jami/daemon/DataTransferCallback;Ljava/lang/String;Ljava/lang/String;JI)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_DataTransferCallback_1dataTransferEvent},
{"DataTransferCallback_dataTransferEventSwigExplicitDataTransferCallback", "(JLnet/jami/daemon/DataTransferCallback;Ljava/lang/String;Ljava/lang/String;JI)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_DataTransferCallback_1dataTransferEventSwigExplicitDataTransferCallback},
{"new_DataTransferCallback", "()J", (void*)& Java_net_jami_daemon_JamiServiceJNI_new_1DataTransferCallback},
{"DataTransferCallback_director_connect", "(Lnet/jami/daemon/DataTransferCallback;JZZ)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_DataTransferCallback_1director_1connect},
{"DataTransferCallback_change_ownership", "(Lnet/jami/daemon/DataTransferCallback;JZ)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_DataTransferCallback_1change_1ownership},
{"publish", "(Ljava/lang/String;ZLjava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_publish},
{"answerServerRequest", "(Ljava/lang/String;Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_answerServerRequest},
{"subscribeBuddy", "(Ljava/lang/String;Ljava/lang/String;Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_subscribeBuddy},
{"getSubscriptions", "(Ljava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getSubscriptions},
{"setSubscriptions", "(Ljava/lang/String;JLnet/jami/daemon/StringVect;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_setSubscriptions},
{"delete_PresenceCallback", "(J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_delete_1PresenceCallback},
{"PresenceCallback_newServerSubscriptionRequest", "(JLnet/jami/daemon/PresenceCallback;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_PresenceCallback_1newServerSubscriptionRequest},
{"PresenceCallback_newServerSubscriptionRequestSwigExplicitPresenceCallback", "(JLnet/jami/daemon/PresenceCallback;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_PresenceCallback_1newServerSubscriptionRequestSwigExplicitPresenceCallback},
{"PresenceCallback_serverError", "(JLnet/jami/daemon/PresenceCallback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_PresenceCallback_1serverError},
{"PresenceCallback_serverErrorSwigExplicitPresenceCallback", "(JLnet/jami/daemon/PresenceCallback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_PresenceCallback_1serverErrorSwigExplicitPresenceCallback},
{"PresenceCallback_newBuddyNotification", "(JLnet/jami/daemon/PresenceCallback;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_PresenceCallback_1newBuddyNotification},
{"PresenceCallback_newBuddyNotificationSwigExplicitPresenceCallback", "(JLnet/jami/daemon/PresenceCallback;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_PresenceCallback_1newBuddyNotificationSwigExplicitPresenceCallback},
{"PresenceCallback_nearbyPeerNotification", "(JLnet/jami/daemon/PresenceCallback;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_PresenceCallback_1nearbyPeerNotification},
{"PresenceCallback_nearbyPeerNotificationSwigExplicitPresenceCallback", "(JLnet/jami/daemon/PresenceCallback;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_PresenceCallback_1nearbyPeerNotificationSwigExplicitPresenceCallback},
{"PresenceCallback_subscriptionStateChanged", "(JLnet/jami/daemon/PresenceCallback;Ljava/lang/String;Ljava/lang/String;I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_PresenceCallback_1subscriptionStateChanged},
{"PresenceCallback_subscriptionStateChangedSwigExplicitPresenceCallback", "(JLnet/jami/daemon/PresenceCallback;Ljava/lang/String;Ljava/lang/String;I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_PresenceCallback_1subscriptionStateChangedSwigExplicitPresenceCallback},
{"new_PresenceCallback", "()J", (void*)& Java_net_jami_daemon_JamiServiceJNI_new_1PresenceCallback},
{"PresenceCallback_director_connect", "(Lnet/jami/daemon/PresenceCallback;JZZ)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_PresenceCallback_1director_1connect},
{"PresenceCallback_change_ownership", "(Lnet/jami/daemon/PresenceCallback;JZ)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_PresenceCallback_1change_1ownership},
{"setVideoFrame", "([BIJIII)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_setVideoFrame},
{"acquireNativeWindow", "(Ljava/lang/Object;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_acquireNativeWindow},
{"releaseNativeWindow", "(J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_releaseNativeWindow},
{"setNativeWindowGeometry", "(JII)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_setNativeWindowGeometry},
{"registerVideoCallback", "(Ljava/lang/String;J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_registerVideoCallback},
{"unregisterVideoCallback", "(Ljava/lang/String;J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_unregisterVideoCallback},
{"captureVideoFrame", "(Ljava/lang/Object;I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_captureVideoFrame},
{"captureVideoPacket", "(Ljava/lang/Object;IIZJI)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_captureVideoPacket},
{"setDefaultDevice", "(Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_setDefaultDevice},
{"getDefaultDevice", "()Ljava/lang/String;", (void*)& Java_net_jami_daemon_JamiServiceJNI_getDefaultDevice},
{"startCamera", "()V", (void*)& Java_net_jami_daemon_JamiServiceJNI_startCamera},
{"stopCamera", "()V", (void*)& Java_net_jami_daemon_JamiServiceJNI_stopCamera},
{"hasCameraStarted", "()Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_hasCameraStarted},
{"startAudioDevice", "()V", (void*)& Java_net_jami_daemon_JamiServiceJNI_startAudioDevice},
{"stopAudioDevice", "()V", (void*)& Java_net_jami_daemon_JamiServiceJNI_stopAudioDevice},
{"switchInput__SWIG_1", "(Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_switchInput_1_1SWIG_11},
{"switchToCamera", "()Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_switchToCamera},
{"getSettings", "(Ljava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getSettings},
{"applySettings", "(Ljava/lang/String;JLnet/jami/daemon/StringMap;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_applySettings},
{"addVideoDevice", "(Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_addVideoDevice},
{"removeVideoDevice", "(Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_removeVideoDevice},
{"setDeviceOrientation", "(Ljava/lang/String;I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_setDeviceOrientation},
{"registerSinkTarget", "(Ljava/lang/String;J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_registerSinkTarget},
{"startLocalRecorder", "(ZLjava/lang/String;)Ljava/lang/String;", (void*)& Java_net_jami_daemon_JamiServiceJNI_startLocalRecorder},
{"stopLocalRecorder", "(Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_stopLocalRecorder},
{"getDecodingAccelerated", "()Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_getDecodingAccelerated},
{"setDecodingAccelerated", "(Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_setDecodingAccelerated},
{"getEncodingAccelerated", "()Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_getEncodingAccelerated},
{"setEncodingAccelerated", "(Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_setEncodingAccelerated},
{"delete_VideoCallback", "(J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_delete_1VideoCallback},
{"VideoCallback_getCameraInfo", "(JLnet/jami/daemon/VideoCallback;Ljava/lang/String;JLnet/jami/daemon/IntVect;JLnet/jami/daemon/UintVect;JLnet/jami/daemon/UintVect;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_VideoCallback_1getCameraInfo},
{"VideoCallback_getCameraInfoSwigExplicitVideoCallback", "(JLnet/jami/daemon/VideoCallback;Ljava/lang/String;JLnet/jami/daemon/IntVect;JLnet/jami/daemon/UintVect;JLnet/jami/daemon/UintVect;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_VideoCallback_1getCameraInfoSwigExplicitVideoCallback},
{"VideoCallback_setParameters", "(JLnet/jami/daemon/VideoCallback;Ljava/lang/String;IIII)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_VideoCallback_1setParameters},
{"VideoCallback_setParametersSwigExplicitVideoCallback", "(JLnet/jami/daemon/VideoCallback;Ljava/lang/String;IIII)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_VideoCallback_1setParametersSwigExplicitVideoCallback},
{"VideoCallback_setBitrate", "(JLnet/jami/daemon/VideoCallback;Ljava/lang/String;I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_VideoCallback_1setBitrate},
{"VideoCallback_setBitrateSwigExplicitVideoCallback", "(JLnet/jami/daemon/VideoCallback;Ljava/lang/String;I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_VideoCallback_1setBitrateSwigExplicitVideoCallback},
{"VideoCallback_requestKeyFrame", "(JLnet/jami/daemon/VideoCallback;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_VideoCallback_1requestKeyFrame},
{"VideoCallback_requestKeyFrameSwigExplicitVideoCallback", "(JLnet/jami/daemon/VideoCallback;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_VideoCallback_1requestKeyFrameSwigExplicitVideoCallback},
{"VideoCallback_startCapture", "(JLnet/jami/daemon/VideoCallback;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_VideoCallback_1startCapture},
{"VideoCallback_startCaptureSwigExplicitVideoCallback", "(JLnet/jami/daemon/VideoCallback;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_VideoCallback_1startCaptureSwigExplicitVideoCallback},
{"VideoCallback_stopCapture", "(JLnet/jami/daemon/VideoCallback;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_VideoCallback_1stopCapture},
{"VideoCallback_stopCaptureSwigExplicitVideoCallback", "(JLnet/jami/daemon/VideoCallback;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_VideoCallback_1stopCaptureSwigExplicitVideoCallback},
{"VideoCallback_decodingStarted", "(JLnet/jami/daemon/VideoCallback;Ljava/lang/String;Ljava/lang/String;IIZ)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_VideoCallback_1decodingStarted},
{"VideoCallback_decodingStartedSwigExplicitVideoCallback", "(JLnet/jami/daemon/VideoCallback;Ljava/lang/String;Ljava/lang/String;IIZ)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_VideoCallback_1decodingStartedSwigExplicitVideoCallback},
{"VideoCallback_decodingStopped", "(JLnet/jami/daemon/VideoCallback;Ljava/lang/String;Ljava/lang/String;Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_VideoCallback_1decodingStopped},
{"VideoCallback_decodingStoppedSwigExplicitVideoCallback", "(JLnet/jami/daemon/VideoCallback;Ljava/lang/String;Ljava/lang/String;Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_VideoCallback_1decodingStoppedSwigExplicitVideoCallback},
{"new_VideoCallback", "()J", (void*)& Java_net_jami_daemon_JamiServiceJNI_new_1VideoCallback},
{"VideoCallback_director_connect", "(Lnet/jami/daemon/VideoCallback;JZZ)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_VideoCallback_1director_1connect},
{"VideoCallback_change_ownership", "(Lnet/jami/daemon/VideoCallback;JZ)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_VideoCallback_1change_1ownership},
{"loadPlugin", "(Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_loadPlugin},
{"unloadPlugin", "(Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_unloadPlugin},
{"getPluginDetails", "(Ljava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getPluginDetails},
{"getPluginPreferences", "(Ljava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getPluginPreferences},
{"setPluginPreference", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_setPluginPreference},
{"getPluginPreferencesValues", "(Ljava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getPluginPreferencesValues},
{"resetPluginPreferencesValues", "(Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_resetPluginPreferencesValues},
{"getInstalledPlugins", "()J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getInstalledPlugins},
{"getLoadedPlugins", "()J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getLoadedPlugins},
{"installPlugin", "(Ljava/lang/String;Z)I", (void*)& Java_net_jami_daemon_JamiServiceJNI_installPlugin},
{"uninstallPlugin", "(Ljava/lang/String;)I", (void*)& Java_net_jami_daemon_JamiServiceJNI_uninstallPlugin},
{"getCallMediaHandlers", "()J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getCallMediaHandlers},
{"getChatHandlers", "()J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getChatHandlers},
{"toggleCallMediaHandler", "(Ljava/lang/String;Ljava/lang/String;Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_toggleCallMediaHandler},
{"toggleChatHandler", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_toggleChatHandler},
{"getCallMediaHandlerDetails", "(Ljava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getCallMediaHandlerDetails},
{"getCallMediaHandlerStatus", "(Ljava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getCallMediaHandlerStatus},
{"getChatHandlerDetails", "(Ljava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getChatHandlerDetails},
{"getChatHandlerStatus", "(Ljava/lang/String;Ljava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getChatHandlerStatus},
{"getPluginsEnabled", "()Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_getPluginsEnabled},
{"setPluginsEnabled", "(Z)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_setPluginsEnabled},
{"startConversation", "(Ljava/lang/String;)Ljava/lang/String;", (void*)& Java_net_jami_daemon_JamiServiceJNI_startConversation},
{"acceptConversationRequest", "(Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_acceptConversationRequest},
{"declineConversationRequest", "(Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_declineConversationRequest},
{"removeConversation", "(Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_net_jami_daemon_JamiServiceJNI_removeConversation},
{"getConversations", "(Ljava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getConversations},
{"getConversationRequests", "(Ljava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getConversationRequests},
{"updateConversationInfos", "(Ljava/lang/String;Ljava/lang/String;JLnet/jami/daemon/StringMap;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_updateConversationInfos},
{"conversationInfos", "(Ljava/lang/String;Ljava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_conversationInfos},
{"addConversationMember", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_addConversationMember},
{"removeConversationMember", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_removeConversationMember},
{"getConversationMembers", "(Ljava/lang/String;Ljava/lang/String;)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_getConversationMembers},
{"sendMessage", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_sendMessage},
{"loadConversationMessages", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)J", (void*)& Java_net_jami_daemon_JamiServiceJNI_loadConversationMessages},
{"delete_ConversationCallback", "(J)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_delete_1ConversationCallback},
{"ConversationCallback_conversationLoaded", "(JLnet/jami/daemon/ConversationCallback;JLjava/lang/String;Ljava/lang/String;JLnet/jami/daemon/VectMap;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConversationCallback_1conversationLoaded},
{"ConversationCallback_conversationLoadedSwigExplicitConversationCallback", "(JLnet/jami/daemon/ConversationCallback;JLjava/lang/String;Ljava/lang/String;JLnet/jami/daemon/VectMap;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConversationCallback_1conversationLoadedSwigExplicitConversationCallback},
{"ConversationCallback_messageReceived", "(JLnet/jami/daemon/ConversationCallback;Ljava/lang/String;Ljava/lang/String;JLnet/jami/daemon/StringMap;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConversationCallback_1messageReceived},
{"ConversationCallback_messageReceivedSwigExplicitConversationCallback", "(JLnet/jami/daemon/ConversationCallback;Ljava/lang/String;Ljava/lang/String;JLnet/jami/daemon/StringMap;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConversationCallback_1messageReceivedSwigExplicitConversationCallback},
{"ConversationCallback_conversationRequestReceived", "(JLnet/jami/daemon/ConversationCallback;Ljava/lang/String;Ljava/lang/String;JLnet/jami/daemon/StringMap;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConversationCallback_1conversationRequestReceived},
{"ConversationCallback_conversationRequestReceivedSwigExplicitConversationCallback", "(JLnet/jami/daemon/ConversationCallback;Ljava/lang/String;Ljava/lang/String;JLnet/jami/daemon/StringMap;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConversationCallback_1conversationRequestReceivedSwigExplicitConversationCallback},
{"ConversationCallback_conversationReady", "(JLnet/jami/daemon/ConversationCallback;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConversationCallback_1conversationReady},
{"ConversationCallback_conversationReadySwigExplicitConversationCallback", "(JLnet/jami/daemon/ConversationCallback;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConversationCallback_1conversationReadySwigExplicitConversationCallback},
{"ConversationCallback_conversationRemoved", "(JLnet/jami/daemon/ConversationCallback;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConversationCallback_1conversationRemoved},
{"ConversationCallback_conversationRemovedSwigExplicitConversationCallback", "(JLnet/jami/daemon/ConversationCallback;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConversationCallback_1conversationRemovedSwigExplicitConversationCallback},
{"ConversationCallback_conversationMemberEvent", "(JLnet/jami/daemon/ConversationCallback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConversationCallback_1conversationMemberEvent},
{"ConversationCallback_conversationMemberEventSwigExplicitConversationCallback", "(JLnet/jami/daemon/ConversationCallback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConversationCallback_1conversationMemberEventSwigExplicitConversationCallback},
{"ConversationCallback_onConversationError", "(JLnet/jami/daemon/ConversationCallback;Ljava/lang/String;Ljava/lang/String;JLjava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConversationCallback_1onConversationError},
{"ConversationCallback_onConversationErrorSwigExplicitConversationCallback", "(JLnet/jami/daemon/ConversationCallback;Ljava/lang/String;Ljava/lang/String;JLjava/lang/String;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConversationCallback_1onConversationErrorSwigExplicitConversationCallback},
{"new_ConversationCallback", "()J", (void*)& Java_net_jami_daemon_JamiServiceJNI_new_1ConversationCallback},
{"ConversationCallback_director_connect", "(Lnet/jami/daemon/ConversationCallback;JZZ)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConversationCallback_1director_1connect},
{"ConversationCallback_change_ownership", "(Lnet/jami/daemon/ConversationCallback;JZ)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_ConversationCallback_1change_1ownership},
{"init", "(JLnet/jami/daemon/ConfigurationCallback;JLnet/jami/daemon/Callback;JLnet/jami/daemon/PresenceCallback;JLnet/jami/daemon/DataTransferCallback;JLnet/jami/daemon/VideoCallback;JLnet/jami/daemon/ConversationCallback;)V", (void*)& Java_net_jami_daemon_JamiServiceJNI_init}

	};

	r = env->RegisterNatives (clazz, methods, (int) (sizeof(methods) / sizeof(methods[0])));
	return JNI_VERSION_1_6;
}

void JNI_OnUnLoad(JavaVM* vm, void* reserved) {
    JNIEnv* env;
	jclass clazz;

	JAMI_INFO("JNI_OnUnLoad");

	/* get env */
    if (vm->GetEnv(reinterpret_cast<void**>(&env), JNI_VERSION_1_6) != JNI_OK) {
		JAMI_ERR("JNI_OnUnLoad: failed to get the environment using GetEnv()");
        return;
    }
	JAMI_INFO("JNI_OnUnLoad: GetEnv %p", env);

    /* Get jclass with env->FindClass */
	clazz = env->FindClass(kjamiservicePath);
	if (!clazz) {
        JAMI_ERR("JNI_OnUnLoad: whoops, %s class not found!", kjamiservicePath);
	}

	/* remove instances of class object we need into cache */
    //deinitClassHelper(env, gManagerObject);

	env->UnregisterNatives(clazz);
	JAMI_INFO("JNI_OnUnLoad: Native functions unregistered");
}
