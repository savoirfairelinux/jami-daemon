/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -m -c VideoManagerInterface -i /Users/emmanuellepagevallee/dev/sflphone-kde/src/lib/dbus/metatypes.h -p video_dbus_interface /Users/emmanuellepagevallee/dev/sflphone-kde/src/lib/dbus/videomanager-introspec.xml
 *
 * qdbusxml2cpp is Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef VIDEO_DBUS_INTERFACE_H_1416889973
#define VIDEO_DBUS_INTERFACE_H_1416889973

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "/Users/emmanuellepagevallee/dev/sflphone-kde/src/lib/dbus/metatypes.h"

#include <conversions.hpp>
#include <sflphone.h>

/*
 * Proxy class for interface org.sflphone.SFLphone.VideoManager
 */
class VideoManagerInterface: public QDBusAbstractInterface
{
    Q_OBJECT

public:
    VideoManagerInterface() {}

    ~VideoManagerInterface() {}

public Q_SLOTS: // METHODS
    void applySettings(const QString &name, MapStringString settings)
    {
        sflph_video_apply_settings(
            name.toStdString(), convertMap(settings));
    }

// TODO: test!!!!!!!!!!!!!!!
    MapStringMapStringVectorString getCapabilities(const QString &name)
    {
        MapStringMapStringVectorString ret;
        std::map<std::string, std::map<std::string, std::vector<std::string>>> temp;
        temp = sflph_video_get_capabilities(name.toStdString());

        for (auto x : temp) {
                map<QString, QStringList> ytemp;
            for (auto y : x) {
                ytemp[QString(y.first.c_str())] = convertStringList(y.second);
            }
            ret[QString(x.first.c_str())] = ytemp;
        }
        return ret;
    }

    VectorMapStringString getCodecs(const QString &accountID)
    {
        VectorMapStringString temp;
        for (auto x : sflph_video_get_codecs(accountID.toStdString())) {
            temp.push_back(convertMap(x));
        }
        return temp;
    }

    Q_DECL_DEPRECATED QString getCurrentCodecName(const QString &callID)
    {
        QString temp(
            sflph_video_get_current_codec_name(callID.toStdString()).c_str());
        return temp;
    }

    QString getDefaultDevice()
    {
        QString temp(
            sflph_video_get_default_device().c_str());
        return temp;
    }

    QStringList getDeviceList()
    {
        QStringList temp =
            convertStringList(sflph_video_get_device_list());
        return temp;
    }

    MapStringString getSettings(const QString &device)
    {
        MapStringString temp =
            convertMap(sflph_video_get_settings(device.toStdString()));
        return temp;
    }

    bool hasCameraStarted()
    {
        return sflph_video_has_camera_started();
    }

    void setCodecs(const QString &accountID, VectorMapStringString details)
    {
        std::vector<std::map<std::string, std::string> > temp;
        for (auto x : details) {
            temp.push_back(convertMap(x));
        }
        sflph_video_set_codecs(accountID.toStdString(), temp);
    }

    void setDefaultDevice(const QString &name)
    {
        sflph_video_set_default_device(name.toStdString());
    }

    void startCamera()
    {
        sflph_video_start_camera();
    }

    void stopCamera()
    {
        sflph_video_stop_camera();
    }

    bool switchInput(const QString &resource)
    {
        return sflph_video_switch_input(resource.toStdString());
    }

Q_SIGNALS: // SIGNALS
    void deviceEvent();
    void startedDecoding(const QString &id, const QString &shmPath, int width, int height, bool isMixer);
    void stoppedDecoding(const QString &id, const QString &shmPath, bool isMixer);
};

namespace org {
  namespace sflphone {
    namespace SFLphone {
      typedef ::VideoManagerInterface VideoManager;
    }
  }
}
#endif
