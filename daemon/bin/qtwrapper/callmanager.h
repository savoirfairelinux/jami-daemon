/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -m -c CallManagerInterface -i /Users/emmanuellepagevallee/dev/sflphone-kde/src/lib/dbus/metatypes.h -p callmanager_dbus_interface /Users/emmanuellepagevallee/dev/sflphone-kde/src/lib/dbus/callmanager-introspec.xml
 *
 * qdbusxml2cpp is Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef CALLMANAGER_DBUS_INTERFACE_H_1416889973
#define CALLMANAGER_DBUS_INTERFACE_H_1416889973

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "/Users/emmanuellepagevallee/dev/sflphone-kde/src/lib/dbus/metatypes.h"

#include <conversions.hpp>
#include <sflphone.h>

/*
 * Proxy class for interface org.sflphone.SFLphone.CallManager
 */
class CallManagerInterface: public QDBusAbstractInterface
{
    Q_OBJECT

public:
    CallManagerInterface() {}

    ~CallManagerInterface() {}

public Q_SLOTS: // METHODS
    bool accept(const QString &callID)
    {
        return sflph_call_accept(callID.toStdString());
    }

    void acceptEnrollment(const QString &callID, bool accepted)
    {
        sflph_call_accept_enrollment(callID.toStdString(), accepted);
    }

    bool addMainParticipant(const QString &confID)
    {
        return sflph_call_addMain_participant(confID.toStdString());
    }

    bool addParticipant(const QString &callID, const QString &confID)
    {
        return sflph_call_add_participant(
            callID.toStdString(), confID.toStdString());
    }

    bool attendedTransfer(const QString &transferID, const QString &targetID)
    {
        return sflph_call_attended_transfer(
            transferID.toStdString(), targetID.toStdString());
    }

    void createConfFromParticipantList(const QStringList &participants)
    {
        sflph_call_create_conf_from_participant_list(
            participants.toStdString());
    }

    bool detachParticipant(const QString &callID)
    {
        return sflph_call_detach_participant(callID.toStdString());
    }

    MapStringString getCallDetails(const QString &callID)
    {
        MapStringString temp =
            convertMap(sflph_call_get_call_details(callID.toStdString()));
        return temp;
    }

    QStringList getCallList()
    {
        QStringList temp =
            convertStringList(sflph_call_get_call_list());
        return temp;
    }

    MapStringString getConferenceDetails(const QString &callID)
    {
        MapStringString temp =
            convertMap(sflph_call_get_conference_details(
                callID.toStdString()));
        return temp;
    }

    QString getConferenceId(const QString &callID)
    {
        QString temp(sflph_call_get_conference_id(callID.toStdString()).c_str());
        return temp;
    }

    QStringList getConferenceList()
    {
        QStringList temp =
            convertStringList(sflph_call_get_conference_list());
        return temp;
    }

    Q_DECL_DEPRECATED QString getCurrentAudioCodecName(const QString &callID)
    {
        QString temp(
            sflph_call_get_current_audio_codec_name(callID.toStdString()).c_str());
        return temp;
    }

    QStringList getDisplayNames(const QString &confID)
    {
        QStringList temp =
            convertStringList(sflph_call_get_display_names(
                confID.toStdString()));
        return temp;
    }

    bool getIsRecording(const QString &callID)
    {
        return sflph_call_get_is_recording(callID.toStdString());
    }

    QStringList getParticipantList(const QString &confID)
    {
        QStringList temp =
            convertStringList(sflph_call_get_participant_list(
                confID.toStdString()));
        return temp;
    }

    bool hangUp(const QString &callID)
    {
        return sflph_call_hang_up(callID.toStdString());
    }

    bool hangUpConference(const QString &confID)
    {
        return sflph_call_hang_up_conference(confID.toStdString());
    }

    bool hold(const QString &callID)
    {
        return sflph_call_hold(callID.toStdString());
    }

    bool holdConference(const QString &confID)
    {
        return sflph_call_hold_conference(confID.toStdString());
    }

    bool isConferenceParticipant(const QString &callID)
    {
        return sflph_call_is_conference_participant(callID.toStdString());
    }

    bool joinConference(const QString &sel_confID, const QString &drag_confID)
    {
        return sflph_call_join_conference(
            sel_confID.toStdString(), drag_confID.toStdString());
    }

    bool joinParticipant(const QString &sel_callID, const QString &drag_callID)
    {
        return sflph_call_join_participant(
            sel_callID.toStdString(), drag_callID.toStdString());
    }

    bool placeCall(const QString &accountID, const QString &callID, const QString &to)
    {
        return sflph_call_place_call(
            accountID.toStdString(), callID.toStdString(), to.toStdString());
    }

    void playDTMF(const QString &key)
    {
        sflph_call_play_dtmf(key.toStdString());
    }

    void recordPlaybackSeek(double value)
    {
        sflph_call_record_playback_seek(value);
    }

    bool refuse(const QString &callID)
    {
        return sflph_call_refuse(callID.toStdString());
    }

    void requestGoClear(const QString &callID)
    {
        sflph_call_request_go_clear(callID.toStdString());
    }

    void resetSASVerified(const QString &callID)
    {
        sflph_call_reset_sas_verified(callID.toStdString());
    }

    void sendTextMessage(const QString &callID, const QString &message)
    {
        sflph_call_send_text_message(
            callID.toStdString(), message.toStdString());
    }

    void setConfirmGoClear(const QString &callID)
    {
        sflph_call_set_confirm_go_clear(callID.toStdString());
    }

    Q_DECL_DEPRECATED void setRecording(const QString &callID)
    {
        sflph_call_set_recording(callID.toStdString());
    }

    void setSASVerified(const QString &callID)
    {
        sflph_call_set_sas_verified(callID.toStdString());
    }

    bool startRecordedFilePlayback(const QString &filepath)
    {
        return sflph_call_start_recorded_file_playback(filepath.toStdString());
    }

    void startTone(int start, int type)
    {
        sflph_call_start_tone(start, type);
    }

    void stopRecordedFilePlayback(const QString &filepath)
    {
        sflph_call_stop_recorded_file_playback(filepath.toStdString());
    }

    bool toggleRecording(const QString &callID)
    {
        return sflph_call_toggle_recording(callID.toStdString());
    }

    bool transfer(const QString &callID, const QString &to)
    {
        return sflph_call_transfer(
            callID.toStdString(), to.toStdString());
    }

    bool unhold(const QString &callID)
    {
        return sflph_call_unhold(callID.toStdString());
    }

    bool unholdConference(const QString &confID)
    {
        return sflph_call_unhold_conference(confID.toStdString());
    }

Q_SIGNALS: // SIGNALS
    void callStateChanged(const QString &callID, const QString &state);
    void conferenceChanged(const QString &confID, const QString &state);
    void conferenceCreated(const QString &confID);
    void conferenceRemoved(const QString &confID);
    void confirmGoClear(const QString &callID);
    void incomingCall(const QString &accountID, const QString &callID, const QString &from);
    void incomingMessage(const QString &callID, const QString &from, const QString &message);
    void newCallCreated(const QString &accountID, const QString &callID, const QString &to);
    void onRtcpReportReceived(const QString &callID, MapStringInt report);
    void recordPlaybackFilepath(const QString &callID, const QString &filepath);
    void recordPlaybackStopped(const QString &filepath);
    void recordingStateChanged(const QString &callID, bool recordingState);
    void secureSdesOff(const QString &callID);
    void secureSdesOn(const QString &callID);
    void secureZrtpOff(const QString &callID);
    void secureZrtpOn(const QString &callID, const QString &cipher);
    void showSAS(const QString &callID, const QString &sas, bool verified);
    void sipCallStateChanged(const QString &callID, const QString &state, int code);
    void transferFailed();
    void transferSucceeded();
    void updatePlaybackScale(const QString &filepath, int position, int size);
    void voiceMailNotify(const QString &accountID, int count);
    void zrtpNegotiationFailed(const QString &callID, const QString &reason, const QString &severity);
    void zrtpNotSuppOther(const QString &callID);
};

namespace org {
  namespace sflphone {
    namespace SFLphone {
      typedef ::CallManagerInterface CallManager;
    }
  }
}
#endif
