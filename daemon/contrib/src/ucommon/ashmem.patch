From 4d99f86379d266e9fe422b4ea8b09f969c2b29ed Mon Sep 17 00:00:00 2001
From: Tristan Matthews <tristan.matthews@savoirfairelinux.com>
Date: Wed, 15 Oct 2014 16:07:33 -0400
Subject: [PATCH] mapped: use ASHMEM on Android

Rationale: shmget et al are not available on Android for x86.

Cherry-picked from the Flexible I/O tester:
https://github.com/axboe/fio/commit/239a11de15959849a69508ff7cb46be114599baf
---
 corelib/mapped.cpp | 52 ++++++++++++++++++++++++++++++++++++++++++++++------
 1 file changed, 46 insertions(+), 6 deletions(-)

diff --git a/corelib/mapped.cpp b/corelib/mapped.cpp
index edc1530..1820cf3 100644
--- a/corelib/mapped.cpp
+++ b/corelib/mapped.cpp
@@ -74,26 +74,66 @@
 #endif
 
 #if defined(__ANDROID__)
-#include <sys/syscall.h>
-#include <linux/shm.h>
+
+#include <stdio.h>
+#include <linux/ashmem.h>
+#include <sys/mman.h>
+
+#define ASHMEM_DEVICE "/dev/ashmem"
 
 static int shmget(key_t key, size_t size, int shmflg)
 {
-    return syscall(__NR_shmget, key, size, shmflg);
+    int fd, ret;
+    char key[11];
+
+    fd = open(ASHMEM_DEVICE, O_RDWR);
+    if (fd < 0)
+        return fd;
+
+    sprintf(key, "%d", key);
+    ret = ioctl(fd, ASHMEM_SET_NAME, key);
+    if (ret < 0)
+        goto error;
+
+    ret = ioctl(fd, ASHMEM_SET_SIZE, size);
+    if (ret < 0)
+        goto error;
+
+    return fd;
+
+error:
+    close(fd);
+    return ret;
 }
 
 static int shmctl(int shmid, int cmd, struct shmid_ds *buf)
 {
-    return syscall(__NR_shmctl, shmid, cmd, buf);
+    int ret = 0;
+    if (cmd == IPC_RMID)
+    {
+        int length = ioctl(shmid, ASHMEM_GET_SIZE, NULL);
+        struct ashmem_pin pin = {0, length};
+        ret = ioctl(shmid, ASHMEM_UNPIN, &pin);
+        close(shmid);
+    }
+    return ret;
 }
 
 static void *shmat(int shmid, const void *shmaddr, int shmflg)
 {
-    return (void *)syscall(__NR_shmat, shmid, shmaddr, shmflg);
+    size_t *ptr, size = ioctl(shmid, ASHMEM_GET_SIZE, NULL);
+    ptr = mmap(NULL, size + sizeof(size_t), PROT_READ | PROT_WRITE, MAP_SHARED, shmid, 0);
+    *ptr = size;    // save size at beginning of buffer, for use with munmap
+    return &ptr[1];
 }
+
 static int shmdt(const void *shmaddr)
 {
-    return syscall(__NR_shmdt, shmaddr);
+    size_t *ptr, size;
+    ptr = (size_t *) shmaddr;
+    ptr--;
+    size = *ptr;    // find mmap size which we stored at the beginning of the buffer
+    return munmap((void *)ptr, size + sizeof(size_t));
 }
 #endif
 
