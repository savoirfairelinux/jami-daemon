From fc633af2cecdc1a2c753c4d8736d2341a664b97e Mon Sep 17 00:00:00 2001
From: Luca Barbato <lu_zero@gentoo.org>
Date: Sat, 19 Apr 2014 20:28:59 +0200
Subject: [PATCH 1/4] configure: Initial objc support

---
 Makefile  |  7 +++++++
 configure | 44 +++++++++++++++++++++++++++++++++++++++++++-
 2 files changed, 50 insertions(+), 1 deletion(-)

diff --git a/Makefile b/Makefile
index cc016b3..183617e 100644
--- a/Makefile
+++ b/Makefile
@@ -1,6 +1,7 @@
 include config.mak

 vpath %.c    $(SRC_PATH)
+vpath %.m    $(SRC_PATH)
 vpath %.h    $(SRC_PATH)
 vpath %.S    $(SRC_PATH)
 vpath %.asm  $(SRC_PATH)
@@ -26,6 +27,8 @@ IFLAGS     := -I. -I$(SRC_PATH)
 CPPFLAGS   := $(IFLAGS) $(CPPFLAGS)
 CFLAGS     += $(ECFLAGS)
 CCFLAGS     = $(CPPFLAGS) $(CFLAGS)
+OBJCFLAGS  += $(EOBJCFLAGS)
+OBJCCFLAGS  = $(CPPFLAGS) $(CFLAGS) $(OBJCFLAGS)
 ASFLAGS    := $(CPPFLAGS) $(ASFLAGS)
 YASMFLAGS  += $(IFLAGS:%=%/) -Pconfig.asm
 HOSTCCFLAGS = $(IFLAGS) $(HOSTCPPFLAGS) $(HOSTCFLAGS)
@@ -38,6 +41,7 @@ endef

 COMPILE_C = $(call COMPILE,CC)
 COMPILE_S = $(call COMPILE,AS)
+COMPILE_M = $(call COMPILE,OBJCC)
 COMPILE_HOSTC = $(call COMPILE,HOSTCC)

 %.o: %.c
@@ -46,6 +50,9 @@ COMPILE_HOSTC = $(call COMPILE,HOSTCC)
 %.o: %.S
    $(COMPILE_S)

+%.o: %.m
+	$(COMPILE_M)
+
 %_host.o: %.c
    $(COMPILE_HOSTC)

diff --git a/configure b/configure
index 13245f7..3fe8ba6 100755
--- a/configure
+++ b/configure
@@ -238,6 +238,7 @@ Toolchain options:
   --ar=AR                  use archive tool AR [$ar_default]
   --as=AS                  use assembler AS [$as_default]
   --cc=CC                  use C compiler CC [$cc_default]
+  --objcc=OCC              use ObjC compiler OCC [$cc_default]
   --dep-cc=DEPCC           use dependency generator DEPCC [$cc_default]
   --ld=LD                  use linker LD
   --pkg-config=PKGCONFIG   use pkg-config tool PKGCONFIG [$pkg_config_default]
@@ -250,6 +251,7 @@ Toolchain options:
   --host-libs=HLIBS        use libs HLIBS when linking for host
   --host-os=OS             compiler host OS [$target_os]
   --extra-cflags=ECFLAGS   add ECFLAGS to CFLAGS [$CFLAGS]
+  --extra-objcflags=FLAGS  add FLAGS to OBJCFLAGS [$CFLAGS]
   --extra-ldflags=ELDFLAGS add ELDFLAGS to LDFLAGS [$LDFLAGS]
   --extra-ldexeflags=ELDFLAGS add ELDFLAGS to LDEXEFLAGS [$LDEXEFLAGS]
   --extra-libs=ELIBS       add ELIBS [$ELIBS]
@@ -683,6 +685,10 @@ add_asflags(){
     append ASFLAGS $($asflags_filter "$@")
 }

+add_objcflags(){
+    append OBJCFLAGS $($objcflags_filter "$@")
+}
+
 add_ldflags(){
     append LDFLAGS $($ldflags_filter "$@")
 }
@@ -737,6 +743,13 @@ check_cc(){
     check_cmd $cc $CPPFLAGS $CFLAGS "$@" $CC_C $(cc_o $TMPO) $TMPC
 }

+check_objcc(){
+    log check_objcc "$@"
+    cat > $TMPC
+    log_file $TMPC
+    check_cmd $objcc $CPPFLAGS $CFLAGS $OBJCFLAGS "$@" $OBJCC_C $(cc_o $TMPO) $TMPC
+}
+
 check_cpp(){
     log check_cpp "$@"
     cat > $TMPC
@@ -835,6 +848,19 @@ check_cflags(){
     test_cflags "$@" && add_cflags "$@"
 }

+test_objcflags(){
+    log test_cflags "$@"
+    set -- $($cflags_filter "$@")
+    check_objcc "$@" <<EOF
+int x;
+EOF
+}
+
+check_objcflags(){
+    log check_cflags "$@"
+    test_objcflags "$@" && add_objcflags "$@"
+}
+
 test_ldflags(){
     log test_ldflags "$@"
     check_ld "$@" <<EOF
@@ -1640,6 +1666,7 @@ CMDLINE_SET="
     as
     build_suffix
     cc
+    objcc
     cpu
     cross_prefix
     dep_cc
@@ -2285,6 +2312,9 @@ AS_O='-o $@'
 CC_C='-c'
 CC_E='-E -o $@'
 CC_O='-o $@'
+OBJCC_C='-c'
+OBJCC_E='-E -o $@'
+OBJCC_O='-o $@'
 LD_O='-o $@'
 LD_LIB='-l%'
 LD_PATH='-L'
@@ -2580,6 +2610,7 @@ esac

 ar_default="${cross_prefix}${ar_default}"
 cc_default="${cross_prefix}${cc_default}"
+occ_default="${cross_prefix}${occ_default}"
 nm_default="${cross_prefix}${nm_default}"
 pkg_config_default="${cross_prefix}${pkg_config_default}"
 ranlib="${cross_prefix}${ranlib}"
@@ -3032,16 +3063,22 @@ test -n "$cc_type" && enable $cc_type ||
     warn "Unknown C compiler $cc, unable to select optimal CFLAGS"

 : ${as_default:=$cc}
+: ${objcc_default:=$cc}
 : ${dep_cc_default:=$cc}
 : ${ld_default:=$cc}
 : ${host_ld_default:=$host_cc}
-set_default ar as dep_cc ld host_ld
+set_default ar as objcc dep_cc ld host_ld

 probe_cc as "$as"
 asflags_filter=$_flags_filter
 add_asflags $_flags $_cflags
 set_ccvars AS

+probe_cc objcc "$objcc"
+objcflags_filter=$_flags_filter
+add_objcflags $_flags $_cflags
+set_ccvars OBJC
+
 probe_cc ld "$ld"
 ldflags_filter=$_flags_filter
 add_ldflags $_flags $_ldflags
@@ -4689,6 +4726,7 @@ ARCH=$arch
 INTRINSICS=$intrinsics
 CC=$cc
 AS=$as
+OBJCC=$objcc
 LD=$ld
 DEPCC=$dep_cc
 DEPCCFLAGS=$DEPCCFLAGS \$(CPPFLAGS)
@@ -4704,9 +4742,13 @@ STRIP=$strip
 LN_S=$ln_s
 CPPFLAGS=$CPPFLAGS
 CFLAGS=$CFLAGS
+OBJCFLAGS=$OBJCFLAGS
 ASFLAGS=$ASFLAGS
 AS_C=$AS_C
 AS_O=$AS_O
+OBJCC_C=$OBJCC_C
+OBJCC_E=$OBJCC_E
+OBJCC_O=$OBJCC_O
 CC_C=$CC_C
 CC_E=$CC_E
 CC_O=$CC_O
--
1.9.3 (Apple Git-50)


From 9c2bfd8fad17355bd11c23f0268c785a143c244d Mon Sep 17 00:00:00 2001
From: Luca Barbato <lu_zero@gentoo.org>
Date: Sun, 1 Mar 2015 21:46:50 +0100
Subject: [PATCH 2/4] wip: avdevice: Add AVFoundation based capture

Just to test the build system changes, try to leverage ARC.
---
 configure                      |   7 +++
 libavdevice/Makefile           |   1 +
 libavdevice/alldevices.c       |   1 +
 libavdevice/avfoundation_dec.m | 104 +++++++++++++++++++++++++++++++++++++++++
 4 files changed, 113 insertions(+)
 create mode 100644 libavdevice/avfoundation_dec.m

diff --git a/configure b/configure
index 3fe8ba6..15c26fc 100755
--- a/configure
+++ b/configure
@@ -1403,6 +1403,7 @@ HAVE_LIST_PUB="
 "

 HEADERS_LIST="
+    AVFoundation_AVFoundation_h
     alsa_asoundlib_h
     altivec_h
     arpa_inet_h
@@ -2136,6 +2137,7 @@ xwma_demuxer_select="riffdec"
 # indevs / outdevs
 alsa_indev_deps="alsa_asoundlib_h snd_pcm_htimestamp"
 alsa_outdev_deps="alsa_asoundlib_h"
+avfoundation_indev_deps="AVFoundation_AVFoundation_h"
 bktr_indev_deps_any="dev_bktr_ioctl_bt848_h machine_ioctl_bt848_h dev_video_bktr_ioctl_bt848_h dev_ic_bt8xx_h"
 dv1394_indev_deps="dv1394"
 dv1394_indev_select="dv_demuxer"
@@ -4305,6 +4307,11 @@ check_header linux/fb.h
 check_header linux/videodev2.h
 check_struct linux/videodev2.h "struct v4l2_frmivalenum" discrete

+check_header AVFoundation/AVFoundation.h &&
+    check_objcflags -fobjc-arc &&
+    add_extralibs -framework Foundation -framework AVFoundation || \
+    disable AVFoundation_AVFoundation_h
+
 check_header sys/videoio.h

 check_func_headers "windows.h vfw.h" capCreateCaptureWindow "$vfwcap_indev_extralibs"
diff --git a/libavdevice/Makefile b/libavdevice/Makefile
index 2a21832..682a39a 100644
--- a/libavdevice/Makefile
+++ b/libavdevice/Makefile
@@ -11,6 +11,7 @@ OBJS-$(CONFIG_ALSA_INDEV)                += alsa-audio-common.o \
                                             alsa-audio-dec.o
 OBJS-$(CONFIG_ALSA_OUTDEV)               += alsa-audio-common.o \
                                             alsa-audio-enc.o
+OBJS-$(CONFIG_AVFOUNDATION_INDEV)	 += avfoundation_dec.o
 OBJS-$(CONFIG_BKTR_INDEV)                += bktr.o
 OBJS-$(CONFIG_DV1394_INDEV)              += dv1394.o
 OBJS-$(CONFIG_FBDEV_INDEV)               += fbdev.o
diff --git a/libavdevice/alldevices.c b/libavdevice/alldevices.c
index 5dbe277..8439b5b 100644
--- a/libavdevice/alldevices.c
+++ b/libavdevice/alldevices.c
@@ -48,6 +48,7 @@ void avdevice_register_all(void)

     /* devices */
     REGISTER_INOUTDEV(ALSA,             alsa);
+    REGISTER_INDEV   (AVFOUNDATION,     avfoundation);
     REGISTER_INDEV   (BKTR,             bktr);
     REGISTER_INDEV   (DV1394,           dv1394);
     REGISTER_INDEV   (FBDEV,            fbdev);
diff --git a/libavdevice/avfoundation_dec.m b/libavdevice/avfoundation_dec.m
new file mode 100644
index 0000000..5e5f0fa
--- /dev/null
+++ b/libavdevice/avfoundation_dec.m
@@ -0,0 +1,104 @@
+/*
+ * AVFoundation input device
+ * Copyright (c) 2015 Luca Barbato
+ *
+ * This file is part of Libav.
+ *
+ * Libav is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * Libav is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with Libav; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#import <AVFoundation/AVFoundation.h>
+
+#include "libavformat/avformat.h"
+#include "libavutil/log.h"
+#include "libavutil/opt.h"
+
+#include "avdevice.h"
+
+
+typedef struct AVFoundationCaptureContext {
+    AVClass *class;
+    int list_devices;
+} AVFoundationCaptureContext;
+
+#define AUDIO_DEVICES 1
+#define VIDEO_DEVICES 2
+#define ALL_DEVICES   AUDIO_DEVICES|VIDEO_DEVICES
+
+#define OFFSET(x) offsetof(AVFoundationCaptureContext, x)
+#define DEC AV_OPT_FLAG_DECODING_PARAM
+static const AVOption options[] = {
+    { "list_devices", "List available devices and exit", OFFSET(list_devices),  AV_OPT_TYPE_INT,    {.i64 = 0 },             0, INT_MAX, DEC, "list_devices" },
+    { "all",          "Show all the supported devices",  OFFSET(list_devices),  AV_OPT_TYPE_CONST,  {.i64 = ALL_DEVICES },   0, INT_MAX, DEC, "list_devices" },
+    { "audio",        "Show only the audio devices",     OFFSET(list_devices),  AV_OPT_TYPE_CONST,  {.i64 = AUDIO_DEVICES }, 0, INT_MAX, DEC, "list_devices" },
+    { "video",        "Show only the video devices",     OFFSET(list_devices),  AV_OPT_TYPE_CONST,  {.i64 = VIDEO_DEVICES }, 0, INT_MAX, DEC, "list_devices" },
+    { NULL },
+};
+
+
+static void list_capture_devices_by_type(AVFormatContext *s, NSString *type)
+{
+    NSArray *devices = [AVCaptureDevice devicesWithMediaType:type];
+
+    av_log(s, AV_LOG_INFO, "Type: %s\n", [type UTF8String]);
+    for (AVCaptureDevice *device in devices) {
+
+        av_log(s, AV_LOG_INFO, "uniqueID: %s\nname: %s\nformat:\n",
+               [[device uniqueID] UTF8String],
+               [[device localizedName] UTF8String]);
+
+        for (AVCaptureDeviceFormat *format in device.formats)
+            av_log(s, AV_LOG_INFO, "\t%s\n",
+                   [[NSString stringWithFormat:@"%@", format] UTF8String]);
+    }
+}
+
+static int avfoundation_list_capture_devices(AVFormatContext *s)
+{
+    AVFoundationCaptureContext *ctx = s->priv_data;
+
+    if (ctx->list_devices & AUDIO_DEVICES)
+        list_capture_devices_by_type(s, AVMediaTypeAudio);
+
+    if (ctx->list_devices & VIDEO_DEVICES)
+        list_capture_devices_by_type(s, AVMediaTypeVideo);
+
+    return AVERROR_EXIT;
+}
+
+
+
+static int avfoundation_read_header(AVFormatContext *s)
+{
+    return avfoundation_list_capture_devices(s);
+}
+
+static const AVClass avfoundation_class = {
+    .class_name = "AVFoundation AVCaptureDevice indev",
+    .item_name  = av_default_item_name,
+    .option     = options,
+    .version    = LIBAVUTIL_VERSION_INT,
+};
+
+AVInputFormat ff_avfoundation_demuxer = {
+    .name           = "avfoundation",
+    .long_name      = NULL_IF_CONFIG_SMALL("AVFoundation AVCaptureDevice grab"),
+    .priv_data_size = sizeof(AVFoundationCaptureContext),
+    .read_header    = avfoundation_read_header,
+//    .read_packet    = avfoundation_read_packet,
+//    .read_close     = avfoundation_read_close,
+    .flags          = AVFMT_NOFILE,
+    .priv_class     = &avfoundation_class,
+};
--
1.9.3 (Apple Git-50)


From f31582f237f499d16f6f2b543058e66f93339028 Mon Sep 17 00:00:00 2001
From: Luca Barbato <lu_zero@gentoo.org>
Date: Tue, 3 Mar 2015 09:53:20 +0100
Subject: [PATCH 3/4] avfoundation: Command line parsing

---
 libavdevice/avfoundation_dec.m | 58 +++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 57 insertions(+), 1 deletion(-)

diff --git a/libavdevice/avfoundation_dec.m b/libavdevice/avfoundation_dec.m
index 5e5f0fa..4e421c4 100644
--- a/libavdevice/avfoundation_dec.m
+++ b/libavdevice/avfoundation_dec.m
@@ -78,11 +78,67 @@ static int avfoundation_list_capture_devices(AVFormatContext *s)
     return AVERROR_EXIT;
 }

+const NSString *pat = @"(\\[[^\\]]+\\])";
+
+static int setup_stream(AVFormatContext *s, NSString *uniqueID)
+{
+    // add the input devices
+
+    // add the output devices
+
+    return 0;
+}
+
+static int setup_streams(AVFormatContext *s)
+{
+    int i, ret;
+    NSError *error = nil;
+    NSArray *matches;
+    NSString *parse_string;
+    NSRegularExpression *exp;
+
+    if (s->filename[0] != '[')
+        return AVERROR(EINVAL);
+
+    exp = [NSRegularExpression regularExpressionWithPattern:pat
+                                                    options:0
+                                                      error:&error];
+    if (!exp) {
+        av_log(s, AV_LOG_ERROR, "%s\n",
+               [[error localizedDescription] UTF8String]);
+        return AVERROR(ENOMEM);
+    }
+
+    parse_string = [NSString stringWithFormat:@"%s", s->filename];
+
+    matches = [exp matchesInString:parse_string options:0
+                             range:NSMakeRange(0, [test length])];
+
+    if (matches) {
+        // alloc the capture
+
+    }
+
+    for (NSTextCheckingResult *match in matches) {
+        NSRange range = [match rangeAtIndex:1];
+        NSLog(@"match 1: %@", [parse_string substringWithRange:range]);
+        ret = setup_stream(s, [parse_string substringWithRange:range]);
+        if (ret < 0) {
+            // avfoundation_close
+            return ret;
+        }
+    }
+
+    return 0;
+}


 static int avfoundation_read_header(AVFormatContext *s)
 {
-    return avfoundation_list_capture_devices(s);
+    if (ctx->list_devices)
+        return avfoundation_list_capture_devices(s);
+
+    return setup_streams(s);
 }

 static const AVClass avfoundation_class = {
--
1.9.3 (Apple Git-50)


From 94969be082873a08086ba2ff7377bb5344161fed Mon Sep 17 00:00:00 2001
From: Luca Barbato <lu_zero@gentoo.org>
Date: Wed, 4 Mar 2015 02:58:45 +0100
Subject: [PATCH 4/4] avfoundation: Initial Context setup

The code is still dummy but now ARC compliant.
The session defaults should be print.

TODO: Parsing the device defaults and do AVStream allocation
---
 libavdevice/avfoundation_dec.m | 90 +++++++++++++++++++++++++++++++-----------
 1 file changed, 68 insertions(+), 22 deletions(-)

diff --git a/libavdevice/avfoundation_dec.m b/libavdevice/avfoundation_dec.m
index 4e421c4..0c1bfb5 100644
--- a/libavdevice/avfoundation_dec.m
+++ b/libavdevice/avfoundation_dec.m
@@ -31,6 +31,7 @@
 typedef struct AVFoundationCaptureContext {
     AVClass *class;
     int list_devices;
+    CFTypeRef session;
 } AVFoundationCaptureContext;

 #define AUDIO_DEVICES 1
@@ -78,27 +79,66 @@ static int avfoundation_list_capture_devices(AVFormatContext *s)
     return AVERROR_EXIT;
 }

-const NSString *pat = @"(\\[[^\\]]+\\])";
+NSString *pat = @"(\\[[^\\]]+\\])";

-static int setup_stream(AVFormatContext *s, NSString *uniqueID)
+static int setup_stream(AVFormatContext *s, AVCaptureDevice *device)
 {
+    AVFoundationCaptureContext *ctx = s->priv_data;
+    NSError *__autoreleasing error = nil;
+    AVCaptureDeviceInput *input;
+    AVCaptureSession *session = (__bridge AVCaptureSession*)ctx->session;
+    input = [AVCaptureDeviceInput deviceInputWithDevice:device
+                                                  error:&error];
     // add the input devices
+    if (!input) {
+        av_log(s, AV_LOG_ERROR, "%s\n",
+               [[error localizedDescription] UTF8String]);
+        return AVERROR_UNKNOWN;
+    }
+
+    [session addInput:input];

     // add the output devices
+    if ([device hasMediaType:AVMediaTypeVideo]) {
+        AVCaptureVideoDataOutput *out =
+            [[AVCaptureVideoDataOutput alloc] init];
+
+        out.videoSettings = nil;
+        [session addOutput:out];
+
+        NSLog(@"%@ %@", device, out.videoSettings);
+    }
+    if ([device hasMediaType:AVMediaTypeAudio]) {
+        AVCaptureAudioDataOutput *out =
+            [[AVCaptureAudioDataOutput alloc] init];
+
+        out.audioSettings = nil;
+        [session addOutput:out];
+
+        NSLog(@"%@ %@", device, out.audioSettings);
+    }

     return 0;
 }

 static int setup_streams(AVFormatContext *s)
 {
-    int i, ret;
-    NSError *error = nil;
+    AVFoundationCaptureContext *ctx = s->priv_data;
+    int ret;
+    NSError *__autoreleasing error = nil;
     NSArray *matches;
-    NSString *parse_string;
+    NSString *filename;
+    AVCaptureDevice *device;
     NSRegularExpression *exp;

-    if (s->filename[0] != '[')
-        return AVERROR(EINVAL);
+    if (s->filename[0] != '[') {
+        for (NSString *type in @[AVMediaTypeAudio, AVMediaTypeVideo]) {
+            device = [AVCaptureDevice defaultDeviceWithMediaType:type];
+            if (device)
+                setup_stream(s, device);
+        }
+        return AVERROR_EXIT;
+    }

     exp = [NSRegularExpression regularExpressionWithPattern:pat
                                                     options:0
@@ -109,32 +149,38 @@ static int setup_streams(AVFormatContext *s)
         return AVERROR(ENOMEM);
     }

-    parse_string = [NSString stringWithFormat:@"%s", s->filename];
+    filename = [NSString stringWithFormat:@"%s", s->filename];

-    matches = [exp matchesInString:parse_string options:0
-                             range:NSMakeRange(0, [test length])];
+    matches = [exp matchesInString:filename options:0
+                             range:NSMakeRange(0, [filename length])];

-    if (matches) {
-        // alloc the capture
+    ctx->session = (__bridge_retained CFTypeRef)[[AVCaptureSession alloc] init];

-    }
-
-    for (NSTextCheckingResult *match in matches) {
-        NSRange range = [match rangeAtIndex:1];
-        NSLog(@"match 1: %@", [parse_string substringWithRange:range]);
-        ret = setup_stream(s, [parse_string substringWithRange:range]);
-        if (ret < 0) {
-            // avfoundation_close
-            return ret;
+    if (matches) {
+        for (NSTextCheckingResult *match in matches) {
+            NSRange range = [match rangeAtIndex:1];
+            NSString *uniqueID = [filename substringWithRange:range];
+            if (!(device = [AVCaptureDevice deviceWithUniqueID:uniqueID])) {
+                // report error
+                return AVERROR(EINVAL);
+            }
+            ret = setup_stream(s, device);
+            if (ret < 0) {
+                // avfoundation_close
+                return ret;
+            }
         }
+    } else {
+        return AVERROR(EINVAL);
     }

-    return 0;
+    return AVERROR_EXIT; //
 }


 static int avfoundation_read_header(AVFormatContext *s)
 {
+    AVFoundationCaptureContext *ctx = s->priv_data;
     if (ctx->list_devices)
         return avfoundation_list_capture_devices(s);

--
1.9.3 (Apple Git-50)
