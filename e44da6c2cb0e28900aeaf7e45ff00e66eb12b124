{
  "comments": [
    {
      "key": {
        "uuid": "57db3567_0615753a",
        "filename": "src/plugin/jamipluginmanager.cpp",
        "patchSetId": 6
      },
      "lineNbr": 596,
      "author": {
        "id": 5
      },
      "writtenOn": "2020-08-25T17:13:18Z",
      "side": 1,
      "message": "MINOR SonarQube violation:\n\n\n\u0027find_last_of\u0027 called with a string literal consisting of a single character; consider using the more effective overload accepting a character\n\n\nRead more: https://sonar-jami.savoirfairelinux.net/coding_rules#rule_key\u003dClangTidy%3Aperformance-faster-string-find",
      "revId": "e44da6c2cb0e28900aeaf7e45ff00e66eb12b124",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5be865b9_e4e69e64",
        "filename": "src/plugin/jamipluginmanager.cpp",
        "patchSetId": 6
      },
      "lineNbr": 636,
      "author": {
        "id": 5
      },
      "writtenOn": "2020-08-25T17:13:18Z",
      "side": 1,
      "message": "MINOR SonarQube violation:\n\n\nstring concatenation results in allocation of unnecessary temporary strings; consider using \u0027operator+\u003d\u0027 or \u0027string::append()\u0027 instead\n\n\nRead more: https://sonar-jami.savoirfairelinux.net/coding_rules#rule_key\u003dClangTidy%3Aperformance-inefficient-string-concatenation",
      "revId": "e44da6c2cb0e28900aeaf7e45ff00e66eb12b124",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a",
      "unresolved": false
    }
  ]
}