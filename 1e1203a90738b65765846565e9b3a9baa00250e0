{
  "comments": [
    {
      "key": {
        "uuid": "1f24f9a8_a22acb0b",
        "filename": "src/sip/sip_utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 217,
      "author": {
        "id": 856
      },
      "writtenOn": "2021-06-14T13:49:06Z",
      "side": 1,
      "message": "This is very dangerous. The memory pointe by string_view will be valid as long as all the processing is synchronous. Even if this is the case for the current usage of this utility method, we can not guarantee it in the future. Furthermore, this assumption (synchronous) is not documented anywhere.\nAlso, setPeerUAVersion (the only method that uses this method for now) is called three times during a call, and two of them are a no-op since the UA version is unlikely to change. Plus the fact that the version string is a short string, makes the gain of using string_view insignificant.",
      "revId": "1e1203a90738b65765846565e9b3a9baa00250e0",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd8bb8c8_5a61a8f4",
        "filename": "src/sip/sip_utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 217,
      "author": {
        "id": 6
      },
      "writtenOn": "2021-06-14T16:03:45Z",
      "side": 1,
      "message": "std::string_view is \"dangerous\" indeed, because it\u0027s a non-owning pointer (unlike usual C++ standard classes). However it\u0027s a perfect tool to interoperate with C APIs like pjsip (allows to have views directly to pjsip data) and to parse incoming data without unneeded copies/allocations - not just there but through the code, C++ used to \"force\" to copy the input in cascade like Russian dolls, like rdata \u003d\u003e ua \u003d\u003e version \u003d\u003e version components, while we can now parse directly from the input like rdata \u003d\u003e version components.\n\nIn this case, the use of string_view is ok, because we return a pointer to data in the input argument (just like string_view::substr() for instance). So the user has the same constrains on the result that he would have with the input he provided.\n\nIn cases where setPeerUAVersion is a no-op, using string_view allows to do the whole UA processing without any allocation, just like what an efficient C parser would do.",
      "parentUuid": "1f24f9a8_a22acb0b",
      "revId": "1e1203a90738b65765846565e9b3a9baa00250e0",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ede51f26_2a6a4a80",
        "filename": "src/sip/sip_utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 217,
      "author": {
        "id": 856
      },
      "writtenOn": "2021-06-14T17:37:54Z",
      "side": 1,
      "message": "I understand the motivation behind using string_view, but it\u0027s not always necessary. Some of the copy your are referring to do not happen because of the RVO and copy elision rules.\nMy point is this kink of micro-optimization is not worth considering the risk we introduce, and I really doubt the gain is measurable at all.\nSo, my big concern is what happen if the caller decides to process the returned string asynchronously?",
      "parentUuid": "fd8bb8c8_5a61a8f4",
      "revId": "1e1203a90738b65765846565e9b3a9baa00250e0",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37dca027_ba12d661",
        "filename": "src/sip/sip_utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 217,
      "author": {
        "id": 6
      },
      "writtenOn": "2021-06-14T18:34:54Z",
      "side": 1,
      "message": "If the caller decides to process the returned string asynchronously, he would have to copy the string to the async context anyway. The type (string or string_view) then carries the necessary information to handle it the appropriate way.\n\nI agree this is a minor optimisation, but these can add up if all the parsing code copies the input over and over. There is no reason to copy if we can read the input directly in a clean way. RVO doesn\u0027t prevent the copy of rdata to peerUa, or from peerUa to version, it just prevents a third copy when returning from this function (C++11 mandates that \u0027return x\u0027 calls the move operator on x anyway, so I\u0027m not concerned about this even without RVO).",
      "parentUuid": "ede51f26_2a6a4a80",
      "revId": "1e1203a90738b65765846565e9b3a9baa00250e0",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70dc61a0_c4198639",
        "filename": "src/sip/sipcall.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1514,
      "author": {
        "id": 856
      },
      "writtenOn": "2021-06-14T13:49:06Z",
      "side": 1,
      "message": "since the version is no more restricted to 3 digits, we must check min size as well (1 I guess?)",
      "revId": "1e1203a90738b65765846565e9b3a9baa00250e0",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e300301_5b118f95",
        "filename": "src/sip/sipcall.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1514,
      "author": {
        "id": 6
      },
      "writtenOn": "2021-06-14T16:03:45Z",
      "side": 1,
      "message": "This would be handled by the meetMinimumRequiredVersion algorithm (the behavior with 0 or 1 components is tested). It would work fine with any number of components, but we have to set an upper limit when parsing.",
      "parentUuid": "70dc61a0_c4198639",
      "revId": "1e1203a90738b65765846565e9b3a9baa00250e0",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51c689aa_dd222b6a",
        "filename": "test/unitTest/string_utils/testString_utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 856
      },
      "writtenOn": "2021-06-14T13:49:06Z",
      "side": 1,
      "message": "We might also need to test when the number of digits \u003e 4, and add the check in meetMinimumRequiredVersion.",
      "revId": "1e1203a90738b65765846565e9b3a9baa00250e0",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a",
      "unresolved": true
    }
  ]
}