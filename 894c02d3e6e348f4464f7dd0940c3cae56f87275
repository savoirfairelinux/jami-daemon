{
  "comments": [
    {
      "key": {
        "uuid": "2f22ca70_28315ab8",
        "filename": "src/sip/sipvoiplink.cpp",
        "patchSetId": 5
      },
      "lineNbr": 557,
      "author": {
        "id": 6
      },
      "writtenOn": "2021-05-08T18:37:36Z",
      "side": 1,
      "message": "This delays the processing of PJSIP events by an average of 250ms, max 500ms (compared to the current code), adding unnecessary delay and impacting user experience.\nIn my opinion, the clean way to integrate with PJSIP event loop would be to be able to schedule events on the PJSIP event loop, but it is not strictly necessary since PJSIP supports multithreading.",
      "range": {
        "startLine": 552,
        "startChar": 3,
        "endLine": 557,
        "endChar": 40
      },
      "revId": "894c02d3e6e348f4464f7dd0940c3cae56f87275",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b5bcca6_2d6a12e6",
        "filename": "src/sip/sipvoiplink.cpp",
        "patchSetId": 5
      },
      "lineNbr": 557,
      "author": {
        "id": 856
      },
      "writtenOn": "2021-05-10T12:44:10Z",
      "side": 1,
      "message": "The polling rate (500ms) was somehow chosen arbitrarily, I agree we can do some experiments to figure the optimal value. A lower value would make sense. The idea is leave enough time to process other events (SIP transport in particular) or perform operations on this thread.\nRegarding the user experience, \nI don\u0027t there is any noticeable impact (especially if we reduce the polling rate). SIP events are rare compared to other events (e.g, media), and PJ_SIP will process most pending events (up to MAX_EVENTS. see pj_ioqueue_poll) in one call to pjsip_endpt_handle_events() method.\nThe problem is not with PJ_SIP supporting multi-threading or not, but the way it\u0027s integrated with our code.\nRunning all SIP/PS_SIP operations on a single thread would make things much simpler as already discussed.",
      "parentUuid": "2f22ca70_28315ab8",
      "range": {
        "startLine": 552,
        "startChar": 3,
        "endLine": 557,
        "endChar": 40
      },
      "revId": "894c02d3e6e348f4464f7dd0940c3cae56f87275",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1495b923_1530f769",
        "filename": "src/sip/sipvoiplink.cpp",
        "patchSetId": 5
      },
      "lineNbr": 557,
      "author": {
        "id": 6
      },
      "writtenOn": "2021-05-10T14:49:10Z",
      "side": 1,
      "message": "We used to do pooling this way, and we worked to stop doing it because it\u0027s suboptimal from an engineering perspective:\n\n* sub-par user experience (adds unnecessary delays)\n* sub-par performance/energy consumption (pooling is waking up the CPU even when Jami is not used, and almost all the time there is nothing to do).",
      "parentUuid": "8b5bcca6_2d6a12e6",
      "range": {
        "startLine": 552,
        "startChar": 3,
        "endLine": 557,
        "endChar": 40
      },
      "revId": "894c02d3e6e348f4464f7dd0940c3cae56f87275",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dde0fe6a_7aebdc89",
        "filename": "src/sip/sipvoiplink.cpp",
        "patchSetId": 5
      },
      "lineNbr": 557,
      "author": {
        "id": 856
      },
      "writtenOn": "2021-05-10T15:24:08Z",
      "side": 1,
      "message": "how running handleEvents() in an infinite loop is more optimal ? it\u0027s called with a time-out of 1s (meaining called every second).",
      "parentUuid": "1495b923_1530f769",
      "range": {
        "startLine": 552,
        "startChar": 3,
        "endLine": 557,
        "endChar": 40
      },
      "revId": "894c02d3e6e348f4464f7dd0940c3cae56f87275",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e6fc5cf_7e094959",
        "filename": "src/sip/sipvoiplink.cpp",
        "patchSetId": 5
      },
      "lineNbr": 557,
      "author": {
        "id": 6
      },
      "writtenOn": "2021-05-10T19:02:30Z",
      "side": 1,
      "message": "* It\u0027s a blocking loop, so that events are processed immediately, instead of being processed during the next loop.\n* 1s is to avoid a delay on shutdown but the goal is to remove the need for this 1s and be able to run with no wakeup if possible.",
      "parentUuid": "dde0fe6a_7aebdc89",
      "range": {
        "startLine": 552,
        "startChar": 3,
        "endLine": 557,
        "endChar": 40
      },
      "revId": "894c02d3e6e348f4464f7dd0940c3cae56f87275",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a",
      "unresolved": true
    }
  ]
}