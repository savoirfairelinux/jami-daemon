 pjnath/src/pjnath/ice_session.c  | 91 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++---------
 pjnath/src/pjnath/ice_strans.c   | 17 ++++++++++++++---
 pjnath/src/pjnath/stun_session.c |  4 ++--
 3 files changed, 98 insertions(+), 14 deletions(-)

diff --git a/pjnath/src/pjnath/ice_session.c b/pjnath/src/pjnath/ice_session.c
index ba10d42ed..2f47110aa 100644
--- a/pjnath/src/pjnath/ice_session.c
+++ b/pjnath/src/pjnath/ice_session.c
@@ -1265,6 +1265,8 @@ static void ice_keep_alive(pj_ice_sess *ice, pj_bool_t send_now)
 					  PJ_FALSE, PJ_FALSE, 
 					  &the_check->rcand->addr, 
 					  addr_len, tdata);
+	
+	PJ_LOG(1, (ice->obj_name, "=> KEEP ALIVE"));
 
 	/* Restore FINGERPRINT usage */
 	pj_stun_session_use_fingerprint(comp->stun_sess, saved);
@@ -1718,9 +1720,17 @@ static void on_tcp_connect_timeout(pj_ice_sess* ice)
 		first_found = PJ_TRUE;
 		if (*ice->cb.close_tcp_connection)
 		    (*ice->cb.close_tcp_connection)(ice, &ice->clist, i);
-
-		check_set_state(ice, check,
-		    PJ_ICE_SESS_CHECK_STATE_FAILED, PJ_ECANCELLED);
+		if (check->rcand->type == PJ_ICE_CAND_TYPE_RELAYED) {
+			char raddr[PJ_INET6_ADDRSTRLEN + 10];
+			PJ_LOG(1, (ice->obj_name,
+				  "=> Connection to TURN (%s) timeout",
+				  pj_sockaddr_print(&check->rcand->addr, raddr, sizeof(raddr), 3)));
+			check_set_state(ice, check,
+				PJ_ICE_SESS_CHECK_STATE_NEEDS_RETRY, PJ_ECANCELLED);
+		} else {
+			check_set_state(ice, check,
+				PJ_ICE_SESS_CHECK_STATE_FAILED, PJ_ECANCELLED);
+		}
 		on_check_complete(ice, check);
 	    }
 	}
@@ -1730,7 +1740,7 @@ static void on_tcp_connect_timeout(pj_ice_sess* ice)
 	/* Reschedule */
 	pj_time_val delay = {
 	    .sec  = 0,
-	    .msec = 1500
+	    .msec = 3000
 	};
 	pj_time_val_normalize(&delay);
 	pj_timer_heap_schedule_w_grp_lock(ice->stun_cfg.timer_heap,
@@ -2027,7 +2037,18 @@ static pj_status_t perform_check(pj_ice_sess *ice,
             pj_timer_heap_cancel_if_active(ice->stun_cfg.timer_heap,
                                            &ice->timer_connect, TIMER_NONE);
             status = (*ice->cb.wait_tcp_connection)(ice, clist, check_id);
+			if (status == PJ_EINVAL) {
+				char laddr[PJ_INET6_ADDRSTRLEN + 10];
+				PJ_LOG(1, (ice->obj_name,
+						"=> !!!Connection with active, LCAND (%s) expected any timer active (status %u)",
+						pj_sockaddr_print(&lcand->addr, laddr, sizeof(laddr), 3), status));
+			}
             if (ice->timer_connect.id != TIMER_NONE) {
+
+				char laddr[PJ_INET6_ADDRSTRLEN + 10];
+				PJ_LOG(1, (ice->obj_name,
+						"=> Connection with active, LCAND (%s) expected any timer active (status %u)",
+						pj_sockaddr_print(&lcand->addr, laddr, sizeof(laddr), 3), status));
                 pj_assert(!"Not expected any timer active");
             } else {
                 pj_time_val delay = {
@@ -2063,9 +2084,14 @@ static pj_status_t perform_check(pj_ice_sess *ice,
 	/* TODO (sblin) remove this - https://github.com/coturn/coturn/issues/408 */
 	check_set_state(ice, check, PJ_ICE_SESS_CHECK_STATE_NEEDS_FIRST_PACKET,
 			status);
-    } else {
+    } else if (status == PJ_EBUSY) {
+		char laddr[PJ_INET6_ADDRSTRLEN + 10];
+		PJ_LOG(1, (ice->obj_name,
+				"=> SEND MESSAGE BUSY for %s %u",
+				pj_sockaddr_print(&lcand->addr, laddr, sizeof(laddr), 3), status));
+	} else {
 	check->tdata = NULL;
-	pjnath_perror(ice->obj_name, "Error sending STUN request", status);
+	pjnath_perror(ice->obj_name, "Error sending STUN request (perform check)", status);
     }
     pj_log_pop_indent();
     return status;
@@ -2514,11 +2540,22 @@ void ice_sess_on_peer_connection(pj_ice_sess *ice,
 	 * In this case, we can try to reconnect a bit after and this until the check
 	 * reached its timeout.
 	 */
+
+	char raddr[PJ_INET6_ADDRSTRLEN + 10];
+	PJ_LOG(1, (ice->obj_name,
+			"=> Connection to TURN (%s) needs retry (status %u)",
+			pj_sockaddr_print(&rcand->addr, raddr, sizeof(raddr), 3), status));
 	check->state = PJ_ICE_SESS_CHECK_STATE_NEEDS_RETRY;
 	check_set_state(ice, check,PJ_ICE_SESS_CHECK_STATE_NEEDS_RETRY,
 			status);
 		return;
     } else if (status != PJ_SUCCESS) {
+	if (rcand->type == PJ_ICE_CAND_TYPE_RELAYED) {
+		char raddr[PJ_INET6_ADDRSTRLEN + 10];
+		PJ_LOG(1, (ice->obj_name,
+				"=> Connection to TURN (%s) needs retry (status %u)",
+				pj_sockaddr_print(&rcand->addr, raddr, sizeof(raddr), 3), status));
+	}
 	check_set_state(ice, check, PJ_ICE_SESS_CHECK_STATE_FAILED, status);
 	on_check_complete(ice, check);
 	return;
@@ -2564,14 +2601,26 @@ void ice_sess_on_peer_connection(pj_ice_sess *ice,
 		 * In this case, we can try to reconnect a bit after and this until the check
 		 * reached its timeout.
 		 */
+		char raddr[PJ_INET6_ADDRSTRLEN + 10];
+		PJ_LOG(1, (ice->obj_name,
+				"=> STUN send message to TURN (%s) needs retry (status %u)",
+				pj_sockaddr_print(&rcand->addr, raddr, sizeof(raddr), 3), status));
 		check_set_state(ice, check,PJ_ICE_SESS_CHECK_STATE_NEEDS_RETRY,
 				status_send_msg);
     } else if (status_send_msg == PJ_EBUSY /* EBUSY */) {
+		PJ_LOG(1, (ice->obj_name, "=> status_send_msg busy"));
 		check_set_state(ice, check, PJ_ICE_SESS_CHECK_STATE_NEEDS_FIRST_PACKET,
 				status_send_msg);
     } else if (status_send_msg != PJ_SUCCESS) {
+
+		if (rcand->type == PJ_ICE_CAND_TYPE_RELAYED) {
+			char raddr[PJ_INET6_ADDRSTRLEN + 10];
+			PJ_LOG(1, (ice->obj_name,
+					"=> STUN send message to TURN (%s) failed with status %u",
+					pj_sockaddr_print(&rcand->addr, raddr, sizeof(raddr), 3), status));
+		}
 		check->tdata = NULL;
-		pjnath_perror(ice->obj_name, "Error sending STUN request", status_send_msg);
+		pjnath_perror(ice->obj_name, "Error sending STUN request (on peer connection)", status_send_msg);
 		pj_log_pop_indent();
 		check_set_state(ice, check, PJ_ICE_SESS_CHECK_STATE_FAILED, status);
 		on_check_complete(ice, check);
@@ -2602,6 +2651,11 @@ void ice_sess_on_peer_reset_connection(pj_ice_sess *ice,
 
     const pj_ice_sess_cand *rcand = check->rcand;
     if (rcand->type == PJ_ICE_CAND_TYPE_RELAYED) {
+	char raddr[PJ_INET6_ADDRSTRLEN + 10];
+	PJ_LOG(1, (ice->obj_name,
+			"=> Connection to TURN (%s) is reseted",
+			pj_sockaddr_print(&rcand->addr, raddr, sizeof(raddr), 3)));
+
 	check->state = PJ_ICE_SESS_CHECK_STATE_NEEDS_RETRY;
 	check_set_state(ice, check,
 			PJ_ICE_SESS_CHECK_STATE_NEEDS_RETRY, 120104);
@@ -2658,6 +2712,8 @@ static void on_stun_request_complete(pj_stun_session *stun_sess,
     clist = msg_data->data.req.clist;
     check = &clist->checks[msg_data->data.req.ckid];
     
+	PJ_LOG(1, (ice->obj_name,
+			"=> on_stun_request_complete check %u with status %u", msg_data->data.req.ckid, status));
 
     /* Mark STUN transaction as complete */
     pj_assert(tdata == check->tdata);
@@ -2668,6 +2724,8 @@ static void on_stun_request_complete(pj_stun_session *stun_sess,
     if (ice->is_destroying) {
 	/* Not sure if this is possible but just in case */
 	pj_grp_lock_release(ice->grp_lock);
+	PJ_LOG(1, (ice->obj_name,
+			"=> on_stun_request_complete is destroying"));
 	return;
     }
 
@@ -2969,6 +3027,8 @@ static pj_status_t on_stun_rx_request(pj_stun_session *sess,
 
     sd = (stun_data*) pj_stun_session_get_user_data(sess);
     ice = sd->ice;
+	PJ_LOG(1, (ice->obj_name,
+			"=> on_stun_rx_request, start"));
 
     pj_grp_lock_acquire(ice->grp_lock);
 
@@ -3124,7 +3184,10 @@ static pj_status_t on_stun_rx_request(pj_stun_session *sess,
                                       pj_stun_session_tp_type(sess) ==
                                       PJ_STUN_TP_UDP,
 				      src_addr, src_addr_len, tdata);
-
+	if (status == PJ_EBUSY) {
+		PJ_LOG(1, (ice->obj_name,
+				"=> on_stun_rx_request, PJ_EBUSY"));
+	}
 
     /* 
      * Handling early check.
@@ -3156,6 +3219,10 @@ static pj_status_t on_stun_rx_request(pj_stun_session *sess,
 	pj_list_push_back(&ice->early_check, rcheck);
     } else {
 	/* Handle this check */
+	
+	PJ_LOG(1, (ice->obj_name,
+			"=> on_stun_rx_request, before handle incoming check"));
+
 	handle_incoming_check(ice, rcheck);
     }
 
@@ -3294,6 +3361,12 @@ static void handle_incoming_check(pj_ice_sess *ice,
     if (i != ice->clist.count) {
 	pj_ice_sess_check *c = &ice->clist.checks[i];
 
+
+	char raddr[PJ_INET6_ADDRSTRLEN + 10];
+	PJ_LOG(1, (ice->obj_name,
+			"=> Check incoming cand %d (%s) timeout. state: %u", i,
+			pj_sockaddr_print(&c->rcand->addr, raddr, sizeof(raddr), 3), c->state));
+
 	/* If USE-CANDIDATE is present, set nominated flag 
 	 * Note: DO NOT overwrite nominated flag if one is already set.
 	 */
@@ -3342,7 +3415,7 @@ static void handle_incoming_check(pj_ice_sess *ice,
 			/* Update valid check and nominated check for the component */
 			update_comp_check(ice, vc->lcand->comp_id, vc);
 
-			LOG5((ice->obj_name, "Valid check %s is nominated", 
+			LOG5((ice->obj_name, "Valid check %s is nominated",
 			      dump_check(ice->tmp.txt, sizeof(ice->tmp.txt), 
 					 &ice->valid_list, vc)));
 		    }
diff --git a/pjnath/src/pjnath/ice_strans.c b/pjnath/src/pjnath/ice_strans.c
index 82175e9e8..769c512d4 100644
--- a/pjnath/src/pjnath/ice_strans.c
+++ b/pjnath/src/pjnath/ice_strans.c
@@ -407,6 +407,9 @@ static pj_status_t add_update_turn(pj_ice_strans *ice_st,
 	}
     }
 
+
+    PJ_LOG(1,(ice_st->obj_name, "add_update_turn"));
+
     /* If candidate is found, invalidate it first */
     if (cand) {
 	cand->status = PJ_EPENDING;
@@ -506,7 +509,7 @@ static pj_status_t add_update_turn(pj_ice_strans *ice_st,
 	comp->cand_cnt++;
     }
 
-    PJ_LOG(4,(ice_st->obj_name,
+    PJ_LOG(1,(ice_st->obj_name,
 		  "Comp %d/%d: TURN relay candidate (tpid=%d) "
 		  "waiting for allocation",
 		  comp->comp_id, comp->cand_cnt-1, cand->transport_id));
@@ -2058,6 +2061,7 @@ static pj_status_t ice_tx_pkt(pj_ice_sess *ice,
 			      unsigned dst_addr_len)
 {
     pj_ice_strans *ice_st = (pj_ice_strans*)ice->user_data;
+	PJ_LOG(1, (ice_st->obj_name, "=>on ice tx %u", size));
     pj_ice_strans_comp *comp;
     pj_status_t status;
     void *buf = (void *)pkt;
@@ -2080,6 +2084,7 @@ static pj_status_t ice_tx_pkt(pj_ice_sess *ice,
     			    dst_addr_len, &buf);
     	if (status == PJ_EPENDING || status != PJ_SUCCESS) {
     	    pj_grp_lock_release(ice_st->grp_lock);
+			PJ_LOG(1, (ice_st->obj_name, "=>on ice tx, use_buffer %u", status));
     	    return status;
     	}
     }
@@ -2173,6 +2178,7 @@ on_return:
     	pj_grp_lock_release(ice_st->grp_lock);
     }
 
+	PJ_LOG(1, (ice_st->obj_name, "=>on ice tx, status %u", status));
     return status;
 }
 
@@ -2314,6 +2320,7 @@ static pj_status_t ice_wait_tcp_connection(pj_ice_sess *ice,
                                            pj_ice_sess_checklist *clist,
                                            unsigned check_id)
 {
+	PJ_LOG(1, (ice->obj_name,"=> wait tcp conn"));
     pj_ice_sess_check      *check   = &clist->checks[check_id];
     const pj_ice_sess_cand *lcand   = check->lcand;
     const pj_ice_sess_cand *rcand   = check->rcand;
@@ -2345,6 +2352,10 @@ static pj_status_t ice_wait_tcp_connection(pj_ice_sess *ice,
             &on_peer_reset_connection;
         pj_stun_session_callback(sess)->on_peer_packet = &on_peer_packet;
 
+		char raddr[PJ_INET6_ADDRSTRLEN + 10];
+		PJ_LOG(1, (ice->obj_name,
+				"=> pj_stun_sock_connect_active %s",
+				pj_sockaddr_print(&rcand->addr, raddr, sizeof(raddr), 3)));
         return pj_stun_sock_connect_active(st_comp->stun[idx].sock,
                                            &rcand->addr,
                                            rcand->addr.addr.sa_family);
@@ -2890,7 +2901,7 @@ static void turn_on_state(pj_turn_sock *turn_sock, pj_turn_state_t old_state,
     comp = data->comp;
     tp_idx = GET_TP_IDX(data->transport_id);
 
-    PJ_LOG(5,(comp->ice_st->obj_name, "TURN client state changed %s --> %s",
+    PJ_LOG(1,(comp->ice_st->obj_name, "TURN client state changed %s --> %s",
 	      pj_turn_state_name(old_state), pj_turn_state_name(new_state)));
     pj_log_push_indent();
 
@@ -2959,7 +2970,7 @@ static void turn_on_state(pj_turn_sock *turn_sock, pj_turn_state_t old_state,
 	}
 	*/
 
-	PJ_LOG(4,(comp->ice_st->obj_name,
+	PJ_LOG(1,(comp->ice_st->obj_name,
 		  "Comp %d/%d: TURN allocation (tpid=%d) complete, "
 		  "relay address is %s",
 		  comp->comp_id, cand_idx, cand->transport_id,
diff --git a/pjnath/src/pjnath/stun_session.c b/pjnath/src/pjnath/stun_session.c
index ed17b904f..4daca5399 100644
--- a/pjnath/src/pjnath/stun_session.c
+++ b/pjnath/src/pjnath/stun_session.c
@@ -1014,7 +1014,7 @@ PJ_DEF(pj_status_t) pj_stun_session_send_msg( pj_stun_session *sess,
 					     (unsigned)tdata->pkt_size);
 	if (status != PJ_SUCCESS && status != PJ_EPENDING) {
 	    pj_stun_msg_destroy_tdata(sess, tdata);
-	    LOG_ERR_(sess, "Error sending STUN request", status);
+	    LOG_ERR_(sess, "Error sending STUN request (send_msg)", status);
 	    goto on_return;
 	}
 
@@ -1071,7 +1071,7 @@ PJ_DEF(pj_status_t) pj_stun_session_send_msg( pj_stun_session *sess,
 
 	if (status != PJ_SUCCESS && status != PJ_EPENDING) {
 	    pj_stun_msg_destroy_tdata(sess, tdata);
-	    LOG_ERR_(sess, "Error sending STUN request", status);
+	    LOG_ERR_(sess, "Error sending STUN request (send_msg 2)", status);
 	    goto on_return;
 	}
