 pjnath/include/pjnath/stun_sock.h | 20 ++++++++++++++++++
 pjnath/src/pjnath/ice_strans.c    | 34 +++++++++++++++++++++++++++++--
 pjnath/src/pjnath/stun_sock.c     |  1 +
 3 files changed, 53 insertions(+), 2 deletions(-)

diff --git a/pjnath/include/pjnath/stun_sock.h b/pjnath/include/pjnath/stun_sock.h
index bfc9c14..627f1ad 100644
--- a/pjnath/include/pjnath/stun_sock.h
+++ b/pjnath/include/pjnath/stun_sock.h
@@ -276,6 +276,26 @@ typedef struct pj_stun_sock_cfg
      */
     pj_sockaddr bound_addr;
 
+    /**
+     * This variable holds a list of address mappings (internal/external) that
+     * the user (application) provides. These mappings are meant to be used
+     * for candidates that are not typically discovered by regular ICE
+     * operations. This is the case for mappings obtained through UPNP/IGD
+     * (Internet Gateway Device) or manually configured (port forward).
+     */
+    struct {
+        pj_sockaddr local_addr;
+        pj_sockaddr mapped_addr;
+    } user_mapping[PJ_ICE_MAX_COMP];
+
+    /**
+     * Holds the actual number of allocated ports. If the feature is used, this
+     * value typically matches the number of components of the ICE session. The
+     * feature is disabled if this variable is set to 0.
+     * Default value is 0.
+     */
+    unsigned user_mapping_cnt;
+
     /**
      * Specify the port range for STUN socket binding, relative to the start
      * port number specified in \a bound_addr. Note that this setting is only
diff --git a/pjnath/src/pjnath/ice_strans.c b/pjnath/src/pjnath/ice_strans.c
index a1e9fde..84ae6cd 100644
--- a/pjnath/src/pjnath/ice_strans.c
+++ b/pjnath/src/pjnath/ice_strans.c
@@ -596,6 +596,20 @@ static pj_status_t add_stun_and_host(pj_ice_strans *ice_st,
                                                 PJ_CAND_UDP :
                                                 PJ_CAND_TCP_PASSIVE;
 
+
+    /* Set the user mappings if availlabe. */
+    if (comp_idx < stun_cfg->cfg.user_mapping_cnt) {
+        char localStr[PJ_INET6_ADDRSTRLEN];
+        char mappedStr[PJ_INET6_ADDRSTRLEN];
+        PJ_LOG(5,(ice_st->obj_name, "Setting user mapping %s -> %s [%s (%i)] for comp %u at config index %i",
+            pj_sockaddr_print(&stun_cfg->cfg.user_mapping[comp_idx].local_addr, localStr, sizeof(localStr), 3),
+                pj_sockaddr_print(&stun_cfg->cfg.user_mapping[comp_idx].mapped_addr, mappedStr, sizeof(mappedStr), 3),
+                stun_cfg->conn_type == PJ_STUN_TP_UDP?"UDP":"TCP",
+                stun_cfg->conn_type,
+                comp->comp_id, idx));
+        pj_sockaddr_cp(&sock_cfg->bound_addr, &stun_cfg->cfg.user_mapping[comp_idx].local_addr);
+    }
+
     /* Allocate and initialize STUN socket data */
     data = PJ_POOL_ZALLOC_T(ice_st->pool, sock_user_data);
     data->comp = comp;
@@ -607,12 +621,28 @@ static pj_status_t add_stun_and_host(pj_ice_strans *ice_st,
 				 &stun_sock_cb, sock_cfg, data,
 				 &comp->stun[idx].sock);
     if (status != PJ_SUCCESS)
-	return status;
+        return status;
+
+    /* Update and commit user srflx candidate. */
+    if (comp_idx < stun_cfg->cfg.user_mapping_cnt) {
+        pj_sockaddr_cp(&cand->addr, &stun_cfg->cfg.user_mapping[comp_idx].mapped_addr);
+        pj_sockaddr_cp(&cand->base_addr, &stun_cfg->cfg.user_mapping[comp_idx].local_addr);
+        pj_sockaddr_cp(&cand->rel_addr, &cand->base_addr);
+        pj_ice_calc_foundation(ice_st->pool, &cand->foundation,
+            cand->type, &cand->base_addr);
+
+        /* User candidate are assumed ready */
+        cand->status = PJ_SUCCESS;
+
+        /* Commit the candidate */
+        comp->cand_cnt++;
+        max_cand_cnt--;
+    }
 
     /* Start STUN Binding resolution and add srflx candidate only if server
      * is set. When any error occur during STUN Binding resolution, let's
      * just skip it and generate host candidates.
-     */
+	 */
     while (stun_cfg->server.slen) {
 	pj_stun_sock_info stun_sock_info;
 
diff --git a/pjnath/src/pjnath/stun_sock.c b/pjnath/src/pjnath/stun_sock.c
index 0546167..49fae7b 100644
--- a/pjnath/src/pjnath/stun_sock.c
+++ b/pjnath/src/pjnath/stun_sock.c
@@ -217,6 +217,7 @@ PJ_DEF(void) pj_stun_sock_cfg_default(pj_stun_sock_cfg *cfg)
     cfg->ka_interval = PJ_STUN_KEEP_ALIVE_SEC;
     cfg->qos_type = PJ_QOS_TYPE_BEST_EFFORT;
     cfg->qos_ignore_error = PJ_TRUE;
+    cfg->user_mapping_cnt = 0;
 }
 
 
-- 
2.25.1

