 pjnath/src/pjnath/ice_strans.c | 45 ++++++++++++++++++++++++++++++++++++++++++++-
 pjnath/src/pjnath/stun_sock.c  | 65 +++++++++++++++++++++++++++++++++++++++++++++++++----------------
 2 files changed, 93 insertions(+), 17 deletions(-)

diff --git a/pjnath/src/pjnath/ice_strans.c b/pjnath/src/pjnath/ice_strans.c
index 9ccbb8454..0068101df 100644
--- a/pjnath/src/pjnath/ice_strans.c
+++ b/pjnath/src/pjnath/ice_strans.c
@@ -126,6 +126,7 @@ static pj_status_t ice_reconnect_tcp_connection(pj_ice_sess *ice,
 static pj_status_t ice_close_tcp_connection(pj_ice_sess *ice,
 					    pj_ice_sess_checklist *clist,
 					    unsigned check_id);
+static pj_status_t ice_close_remaining_tcp(pj_ice_sess *ice);
 #endif
 
 
@@ -2402,6 +2403,8 @@ static void on_ice_complete(pj_ice_sess *ice, pj_status_t status)
 		pj_ice_strans_comp *comp = ice_st->comp[i];
 
 		check = pj_ice_strans_get_valid_pair(ice_st, i+1);
+
+		ice_close_remaining_tcp(ice_st->ice);
 		if (check) {
 		    char lip[PJ_INET6_ADDRSTRLEN+10];
 		    char rip[PJ_INET6_ADDRSTRLEN+10];
@@ -2831,7 +2834,7 @@ static pj_status_t ice_reconnect_tcp_connection(pj_ice_sess *ice,
 }
 
 static pj_status_t ice_close_tcp_connection(pj_ice_sess *ice,
-                                            pj_ice_sess_checklist *clist,
+                                            pj_ice_sess_checklist *clist, // TODO remove
                                             unsigned check_id)
 {
     pj_ice_sess_check      *check   = &clist->checks[check_id];
@@ -2854,6 +2857,46 @@ static pj_status_t ice_close_tcp_connection(pj_ice_sess *ice,
 
     return PJ_EINVAL;
 }
+
+static pj_status_t ice_close_remaining_tcp(pj_ice_sess *ice)
+{
+	printf("@@@@@ ice_close_remaining_tcp\n");
+	for (int i = 0; i < ice->clist.count; i++) {
+		// TODO compare to valid check
+    	pj_ice_sess_check      *check   = &ice->clist.checks[i];
+		const pj_ice_sess_cand *rcand   = check->rcand;
+		const pj_ice_sess_cand *lcand   = check->lcand;
+		pj_ice_strans          *ice_st  = (pj_ice_strans *)ice->user_data;
+		pj_ice_strans_comp     *st_comp = ice_st->comp[lcand->comp_id - 1];
+
+		const pj_ice_sess_check *valid_check = pj_ice_strans_get_valid_pair(ice_st, lcand->comp_id);
+		if (pj_sockaddr_cmp(&lcand->addr, &valid_check->lcand->addr) == 0
+			&& pj_sockaddr_cmp(&rcand->addr, &valid_check->rcand->addr) == 0) {
+			printf("@@@@@ ice_close_remaining_tcp continue\n");
+			continue;
+		}
+
+		int idx = -1;
+		for (int i=0; i<ice_st->cfg.stun_tp_cnt; ++i) {
+			if (ice_st->cfg.stun_tp[i].af == rcand->addr.addr.sa_family) {
+				idx = i;
+				printf("@@@@@ ice_close_remaining_tcp found\n");
+				break;
+			}
+		}
+
+		if (idx != -1 && st_comp->stun[idx].sock) {
+				printf("@@@@@ ice_close_remaining_tcp close?\n");
+  				//pj_stun_sock_destroy(comp->stun[idx].sock);
+			if (pj_stun_sock_close(st_comp->stun[idx].sock, &check->rcand->addr) == PJ_SUCCESS) {
+				printf("@@@@@ CLOSE\n");
+			}
+		}
+	}
+
+    return PJ_SUCCESS;
+}
+
 #endif
 
 /* Notifification when asynchronous send operation via STUN/TURN
diff --git a/pjnath/src/pjnath/stun_sock.c b/pjnath/src/pjnath/stun_sock.c
index b7643ca79..d634c283c 100644
--- a/pjnath/src/pjnath/stun_sock.c
+++ b/pjnath/src/pjnath/stun_sock.c
@@ -51,7 +51,8 @@ enum { MAX_BIND_RETRY = 100 };
 typedef struct outgoing_sock {
     pj_sock_t       fd;
     pj_activesock_t *sock;
-    pj_sockaddr_t   *addr;
+    pj_sockaddr     addr;
+    int             addr_len;
 } outgoing_sock;
 
 typedef struct incoming_sock {
@@ -762,7 +763,7 @@ static pj_bool_t on_data_read(pj_activesock_t *asock,
 		    && (cb->on_peer_reset_connection))
 		{
 		    (cb->on_peer_reset_connection)(stun_sock->stun_sess,
-						   stun_sock->outgoing_socks[i].addr);
+						   &stun_sock->outgoing_socks[i].addr);
 		}
 	}
 	return PJ_FALSE;
@@ -772,11 +773,11 @@ static pj_bool_t on_data_read(pj_activesock_t *asock,
     unsigned sock_addr_len = 0;
     for (int i = 0; i <= stun_sock->outgoing_nb; ++i)
 	if (stun_sock->outgoing_socks[i].sock == asock) {
-	    rx_addr       = stun_sock->outgoing_socks[i].addr;
+	    rx_addr       = &stun_sock->outgoing_socks[i].addr;
 	    sock_addr_len = pj_sockaddr_get_len(rx_addr);
 	    if (cb && (cb->on_peer_packet))
 		(cb->on_peer_packet)(stun_sock->stun_sess,
-				     stun_sock->outgoing_socks[i].addr);
+				     &stun_sock->outgoing_socks[i].addr);
 	}
 
     if (rx_addr == NULL && stun_sock->incoming_nb != -1) {
@@ -1266,7 +1267,7 @@ PJ_DEF(pj_status_t) pj_stun_sock_sendto( pj_stun_sock *stun_sock,
 	pj_bool_t is_incoming = PJ_FALSE;
 	for (int i = 0; i <= stun_sock->outgoing_nb; ++i) {
 	    if (stun_sock->outgoing_socks[i].sock != NULL
-	    && pj_sockaddr_cmp(stun_sock->outgoing_socks[i].addr, dst_addr) == 0) {
+	    && pj_sockaddr_cmp(&stun_sock->outgoing_socks[i].addr, dst_addr) == 0) {
 		is_outgoing = PJ_TRUE;
 		status = pj_activesock_send(stun_sock->outgoing_socks[i].sock,
 					    send_key, pkt, &size, flag);
@@ -1308,9 +1309,12 @@ PJ_DECL(pj_status_t) pj_stun_sock_connect(pj_stun_sock *stun_sock,
     pj_grp_lock_acquire(stun_sock->grp_lock);
     int sock_type = pj_SOCK_STREAM();
 
-    pj_sock_t *fd = &stun_sock->outgoing_socks[nb_check].fd;
-    pj_activesock_t **asock = &stun_sock->outgoing_socks[nb_check].sock;
-    pj_sockaddr_t **addr = &stun_sock->outgoing_socks[nb_check].addr;
+    outgoing_sock* os = &stun_sock->outgoing_socks[nb_check];
+    pj_sock_t *fd = &os->fd;
+    pj_activesock_t **asock = &os->sock;
+    pj_sockaddr_t *addr = &os->addr;
+    os->addr_len = pj_sockaddr_get_len(remote_addr);
+
 
     pj_status_t status = pj_sock_socket(af, sock_type, 0, fd);
     if (status != PJ_SUCCESS) {
@@ -1389,17 +1393,24 @@ PJ_DECL(pj_status_t) pj_stun_sock_connect(pj_stun_sock *stun_sock,
             return status;
         }
 
-        *addr = (pj_sockaddr_t*)remote_addr;
+        //*addr = (pj_sockaddr_t*)remote_addr;
+        pj_sockaddr_init(stun_sock->af, addr, NULL, 0);
+        pj_sockaddr_cp(addr, remote_addr);
+        
+        char addrinfo2[PJ_INET6_ADDRSTRLEN+10];
+        printf("@@@=> %s %d %p %p\n",
+            pj_sockaddr_print(addr,
+                addrinfo2, sizeof(addrinfo2), 3), nb_check, stun_sock, addr);
 
         status = pj_activesock_start_connect(
-                                             *asock, stun_sock->pool, *addr,
-                                             pj_sockaddr_get_len(*addr));
+                                             *asock, stun_sock->pool, &addr,
+                                             os->addr_len);
         if (status == PJ_SUCCESS) {
             on_connect_complete(*asock, status);
         } else if (status != PJ_EPENDING) {
             char addrinfo[PJ_INET6_ADDRSTRLEN+8];
             pj_perror(3, stun_sock->pool->obj_name, status, "Failed to connect to %s",
-                      pj_sockaddr_print(*addr, addrinfo, sizeof(addrinfo), 3));
+                      pj_sockaddr_print(addr, addrinfo, sizeof(addrinfo), 3));
             pj_grp_lock_release(stun_sock->grp_lock);
             return status;
         }
@@ -1441,7 +1452,7 @@ PJ_DECL(pj_status_t) pj_stun_sock_reconnect_active(pj_stun_sock *stun_sock,
 {
     for (int i = 0; i <= stun_sock->outgoing_nb; ++i) {
         if (stun_sock->outgoing_socks[i].sock != NULL
-        && pj_sockaddr_cmp(stun_sock->outgoing_socks[i].addr, remote_addr) == 0) {
+        && pj_sockaddr_cmp(&stun_sock->outgoing_socks[i].addr, remote_addr) == 0) {
             pj_activesock_close(stun_sock->outgoing_socks[i].sock);
             return pj_stun_sock_connect(stun_sock, remote_addr, af, i);
         }
@@ -1452,16 +1463,38 @@ PJ_DECL(pj_status_t) pj_stun_sock_reconnect_active(pj_stun_sock *stun_sock,
 PJ_DECL(pj_status_t) pj_stun_sock_close(pj_stun_sock *stun_sock,
                                         const pj_sockaddr_t *remote_addr)
 {
+    pj_bool_t res = PJ_FALSE;
+    pj_status_t ret;
     for (int i = 0; i <= stun_sock->outgoing_nb; ++i) {
+        char addrinfo[PJ_INET6_ADDRSTRLEN+10];
+        printf("OUT %s %d %p %p\n",
+            pj_sockaddr_print(&stun_sock->outgoing_socks[i].addr,
+                addrinfo, sizeof(addrinfo), 3), i, stun_sock, &stun_sock->outgoing_socks[i].addr);
+        printf("OUT %s\n",
+            pj_sockaddr_print(&remote_addr,
+                addrinfo, sizeof(addrinfo), 3));
         if (stun_sock->outgoing_socks[i].sock != NULL
-        && pj_sockaddr_cmp(stun_sock->outgoing_socks[i].addr, remote_addr) == 0) {
-            return pj_activesock_close(stun_sock->outgoing_socks[i].sock);
+        && pj_sockaddr_cmp(&stun_sock->outgoing_socks[i].addr, remote_addr) == 0) {
+
+            PJ_LOG(1,(stun_sock->obj_name, 
+                "@@@: %s",
+                pj_sockaddr_print(&stun_sock->outgoing_socks[i].addr,
+                        addrinfo, sizeof(addrinfo), 3)));
+
+            if (!res) {
+                ret =  pj_activesock_close(stun_sock->outgoing_socks[i].sock);
+            }
+            res = PJ_TRUE;
+            printf("@@@ CLOSE OUT %u (out: %d - in: %d) \n", i, stun_sock->outgoing_nb, stun_sock->incoming_nb);
         }
     }
+    if (res)
+        return ret;
 
     for (int i = 0; i <= stun_sock->incoming_nb; ++i) {
         if (stun_sock->incoming_socks[i].sock != NULL
         && pj_sockaddr_cmp(&stun_sock->incoming_socks[i].addr, remote_addr) == 0) {
+            printf("@@@ CLOSE INCO %u (out: %d - in: %d) \n", i, stun_sock->outgoing_nb, stun_sock->incoming_nb);
             return pj_activesock_close(stun_sock->incoming_socks[i].sock);
         }
     }
@@ -1477,7 +1510,7 @@ static pj_bool_t on_connect_complete(pj_activesock_t *asock, pj_status_t status)
     // Get remote connected address
     for (int i = 0 ; i <= stun_sock->outgoing_nb ; ++i) {
         if (stun_sock->outgoing_socks[i].sock == asock) {
-            remote_addr = stun_sock->outgoing_socks[i].addr;
+            remote_addr = &stun_sock->outgoing_socks[i].addr;
         }
     }
     if (!remote_addr) return PJ_FALSE;