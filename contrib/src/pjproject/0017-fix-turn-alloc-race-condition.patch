From f6ae6d382273c8ff1fa88974407ba60c992b14c8 Mon Sep 17 00:00:00 2001
From: Nanang Izzuddin <nanang@teluu.com>
Date: Mon, 14 Sep 2020 14:34:55 +0700
Subject: [PATCH] Fix possible race in ICE in TURN allocation init so TURN
 candidate status stays PJ_EPENDING.

---
 pjnath/src/pjnath/ice_strans.c | 25 ++++++++++++++++++++-----
 1 file changed, 20 insertions(+), 5 deletions(-)

diff --git a/pjnath/src/pjnath/ice_strans.c b/pjnath/src/pjnath/ice_strans.c
index 2fc3c6c0c..ab4056b8f 100644
--- a/pjnath/src/pjnath/ice_strans.c
+++ b/pjnath/src/pjnath/ice_strans.c
@@ -438,6 +438,18 @@ static pj_status_t add_update_turn(pj_ice_strans *ice_st,
 	return status;
     }
 
+    if (new_cand) {
+	/* Commit the relayed candidate before pj_turn_sock_alloc(), as
+	 * otherwise there can be race condition:
+	 * 1. pj_turn_sock_alloc() return PJ_SUCCESS.
+	 * 2. Context switch occurs, allocation process fails quickly before
+	 *    the the candidate is commited.
+	 * 3. Back to this context, candidate is now commited with status
+	 *    PJ_EPENDING, this status will never be updated.
+	. */
+	comp->cand_cnt++;
+    }
+
     /* Add pending job */
     ///sess_add_ref(ice_st);
 
@@ -450,12 +462,15 @@ static pj_status_t add_update_turn(pj_ice_strans *ice_st,
 			      &turn_cfg->alloc_param);
     if (status != PJ_SUCCESS) {
 	///sess_dec_ref(ice_st);
-	return status;
-    }
 
-    if (new_cand) {
-	/* Commit the relayed candidate. */
-	comp->cand_cnt++;
+	/* Upon synchronous allocation failure, there are two alternatives:
+	 * - uncommit the candidate (if it is a new one), or
+	 * - update the candidate status.
+	 */
+	// if (new_cand)
+	//    comp->cand_cnt--;
+	cand->status = status;
+	return status;
     }
 
     PJ_LOG(4,(ice_st->obj_name,
