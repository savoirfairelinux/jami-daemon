From e3040cd11d00d98f1c64264198ce4083594aa1f7 Mon Sep 17 00:00:00 2001
From: jrun <darwinskernel@gmail.com>
Date: Sun, 22 Mar 2020 10:38:36 -0400
Subject: [PATCH 9/9] icest: add on_valid_pair() to ice strans callbacks

---
 pjnath/include/pjnath/ice_strans.h | 14 +++++
 pjnath/src/pjnath/ice_strans.c     | 88 ++++++++++++++++++++++++++++++
 pjsip/src/pjsua-lib/pjsua_media.c  |  1 +
 3 files changed, 103 insertions(+)

diff --git a/pjnath/include/pjnath/ice_strans.h b/pjnath/include/pjnath/ice_strans.h
index 41f3b6297..10dfae74c 100644
--- a/pjnath/include/pjnath/ice_strans.h
+++ b/pjnath/include/pjnath/ice_strans.h
@@ -133,6 +133,9 @@ typedef enum pj_ice_strans_op
     /** Negotiation */
     PJ_ICE_STRANS_OP_NEGOTIATION,
 
+    /** First candidate has been found */
+    PJ_ICE_STRANS_OP_FIRST_CAND,
+
     /** This operation is used to report failure in keep-alive operation.
      *  Currently it is only used to report TURN Refresh failure.
      */
@@ -181,6 +184,17 @@ typedef struct pj_ice_strans_cb
     void    (*on_data_sent)(pj_ice_strans *sock,
 			    pj_ssize_t sent);
 
+    /**
+     * An optional callback that will be called by the ICE session when
+     * a valid pair has been found during ICE negotiation.
+     *
+     * @param ice_st	    The ICE stream transport.
+     * @param op	    The operation which status is being reported.
+     * @param status	    Operation status.
+     */
+    void (*on_valid_pair)(pj_ice_strans *ice_st,
+			  pj_ice_strans_op op);
+
     /**
      * Callback to report status of various ICE operations.
      * 
diff --git a/pjnath/src/pjnath/ice_strans.c b/pjnath/src/pjnath/ice_strans.c
index edeed7189..8bf0c6536 100644
--- a/pjnath/src/pjnath/ice_strans.c
+++ b/pjnath/src/pjnath/ice_strans.c
@@ -98,6 +98,7 @@ static pj_uint16_t GETVAL16H(const pj_uint8_t *buf1, const pj_uint8_t *buf2)
 //////////////////////////////////////////////////////////////////////////////
 
 /* ICE callbacks */
+static void on_valid_pair(pj_ice_sess *ice);
 static void	   on_ice_complete(pj_ice_sess *ice, pj_status_t status);
 static void	   on_ice_destroy(pj_ice_sess *ice);
 static pj_status_t ice_tx_pkt(pj_ice_sess *ice,
@@ -1310,6 +1311,7 @@ PJ_DEF(pj_status_t) pj_ice_strans_init_ice(pj_ice_strans *ice_st,
 
     /* Init callback */
     pj_bzero(&ice_cb, sizeof(ice_cb));
+    ice_cb.on_valid_pair = &on_valid_pair;
     ice_cb.on_ice_complete = &on_ice_complete;
     ice_cb.on_rx_data = &ice_rx_data;
     ice_cb.on_tx_pkt = &ice_tx_pkt;
@@ -1949,6 +1951,92 @@ PJ_DECL(pj_ice_sess *) pj_ice_strans_get_ice_sess( pj_ice_strans *ice_st )
     return ice_st->ice;
 }
 
+static void on_valid_pair(pj_ice_sess *ice)
+{
+    pj_ice_strans *ice_st = (pj_ice_strans*)ice->user_data;
+    pj_time_val t;
+    unsigned msec;
+    pj_ice_strans_cb cb = ice_st->cb;
+    pj_status_t status = PJ_SUCCESS;
+
+    pj_grp_lock_add_ref(ice_st->grp_lock);
+
+    pj_gettimeofday(&t);
+    PJ_TIME_VAL_SUB(t, ice_st->start_time);
+    msec = PJ_TIME_VAL_MSEC(t);
+
+    if (cb.on_valid_pair) {
+	unsigned i;
+	enum {
+	    msg_disable_ind = 0xFFFF &
+		~(PJ_STUN_SESS_LOG_TX_IND|
+		  PJ_STUN_SESS_LOG_RX_IND)
+	};
+
+	PJ_LOG(4,(ice_st->obj_name,
+		  "ICE negotiation found candidate in %ds:%03d",
+		  msec/1000, msec%1000));
+
+	for (i=0; i<ice_st->comp_cnt; ++i) {
+	    const pj_ice_sess_check *check;
+	    pj_ice_strans_comp *comp = ice_st->comp[i];
+
+	    check = pj_ice_strans_get_valid_pair(ice_st, i+1);
+	    if (check) {
+		char lip[PJ_INET6_ADDRSTRLEN+10];
+		char rip[PJ_INET6_ADDRSTRLEN+10];
+		unsigned tp_idx = GET_TP_IDX(check->lcand->transport_id);
+		unsigned tp_typ = GET_TP_TYPE(check->lcand->transport_id);
+
+		pj_sockaddr_print(&check->lcand->addr, lip,
+				  sizeof(lip), 3);
+		pj_sockaddr_print(&check->rcand->addr, rip,
+				  sizeof(rip), 3);
+
+		if (tp_typ == TP_TURN) {
+		    /* Activate channel binding for the remote address
+		     * for more efficient data transfer using TURN.
+		     */
+		    status = pj_turn_sock_bind_channel(
+						       comp->turn[tp_idx].sock,
+						       &check->rcand->addr,
+						       sizeof(check->rcand->addr));
+
+		    /* Disable logging for Send/Data indications */
+		    PJ_LOG(5,(ice_st->obj_name,
+			      "Disabling STUN Indication logging for "
+			      "component %d", i+1));
+		    pj_turn_sock_set_log(comp->turn[tp_idx].sock,
+					 msg_disable_ind);
+		    comp->turn[tp_idx].log_off = PJ_TRUE;
+		}
+
+		PJ_LOG(4,(ice_st->obj_name, " Comp %d: "
+			  "sending from %s candidate %s to "
+			  "%s candidate %s",
+			  i+1,
+			  pj_ice_get_cand_type_name(check->lcand->type),
+			  lip,
+			  pj_ice_get_cand_type_name(check->rcand->type),
+			  rip));
+
+	    } else {
+		PJ_LOG(4,(ice_st->obj_name,
+			  "Comp %d: disabled", i+1));
+	    }
+	}
+
+	ice_st->state = (status==PJ_SUCCESS) ? PJ_ICE_STRANS_STATE_RUNNING :
+					       PJ_ICE_STRANS_STATE_FAILED;
+
+	pj_log_push_indent();
+	(*cb.on_valid_pair)(ice_st, PJ_ICE_STRANS_OP_FIRST_CAND);
+	pj_log_pop_indent();
+    }
+
+    pj_grp_lock_dec_ref(ice_st->grp_lock);
+}
+
 /*
  * Callback called by ICE session when ICE processing is complete, either
  * successfully or with failure.
diff --git a/pjsip/src/pjsua-lib/pjsua_media.c b/pjsip/src/pjsua-lib/pjsua_media.c
index c55ab8050..1ebdc4017 100644
--- a/pjsip/src/pjsua-lib/pjsua_media.c
+++ b/pjsip/src/pjsua-lib/pjsua_media.c
@@ -813,6 +813,7 @@ static void on_ice_complete(pjmedia_transport *tp,
         call_med->tp_result = result;
         pjsua_schedule_timer2(&ice_init_complete_cb, call_med, 1);
 	break;
+    case PJ_ICE_STRANS_OP_FIRST_CAND:
     case PJ_ICE_STRANS_OP_NEGOTIATION:
 	if (result == PJ_SUCCESS) {
             /* Update RTP address */
-- 
2.24.1

