diff --git a/upnp/src/api/upnpapi.c b/upnp/src/api/upnpapi.c
index 8f36822..322c724 100644
--- a/upnp/src/api/upnpapi.c
+++ b/upnp/src/api/upnpapi.c
@@ -341,8 +341,8 @@ static int UpnpInitPreamble(void)
 
 #ifdef UPNP_HAVE_OPTSSDP
 	/* Create the NLS uuid. */
-	uuid_create(&nls_uuid);
-	uuid_unpack(&nls_uuid, gUpnpSdkNLSuuid);
+	uuid_upnp_create(&nls_uuid);
+	uuid_upnp_unpack(&nls_uuid, gUpnpSdkNLSuuid);
 #endif /* UPNP_HAVE_OPTSSDP */
 
 	/* Initializes the handle list. */
diff --git a/upnp/src/gena/gena_ctrlpt.c b/upnp/src/gena/gena_ctrlpt.c
index bca4981..0c428fc 100644
--- a/upnp/src/gena/gena_ctrlpt.c
+++ b/upnp/src/gena/gena_ctrlpt.c
@@ -561,8 +561,8 @@ int genaSubscribe(
 	}
 
 	/* generate client SID */
-	uuid_create(&uid );
-	uuid_unpack(&uid, temp_sid);
+	uuid_upnp_create(&uid );
+	uuid_upnp_unpack(&uid, temp_sid);
 	rc = snprintf(temp_sid2, sizeof(temp_sid2), "uuid:%s", temp_sid);
 	if (rc < 0 || (unsigned int) rc >= sizeof(temp_sid2)) {
 		return_code = UPNP_E_OUTOF_MEMORY;
diff --git a/upnp/src/gena/gena_device.c b/upnp/src/gena/gena_device.c
index 39edc0b..b1ec3c4 100644
--- a/upnp/src/gena/gena_device.c
+++ b/upnp/src/gena/gena_device.c
@@ -1353,8 +1353,8 @@ void gena_process_subscription_request(
 	}
 
 	/* generate SID */
-	uuid_create(&uid);
-	uuid_unpack(&uid, temp_sid);
+	uuid_upnp_create(&uid);
+	uuid_upnp_unpack(&uid, temp_sid);
 	rc = snprintf(sub->sid, sizeof(sub->sid), "uuid:%s", temp_sid);
 
 	/* respond OK */
diff --git a/upnp/src/inc/uuid.h b/upnp/src/inc/uuid.h
index 93f5681..17fd463 100644
--- a/upnp/src/inc/uuid.h
+++ b/upnp/src/inc/uuid.h
@@ -41,14 +41,14 @@ typedef struct _uuid_upnp {
 /*!
  * \brief Generate a UUID.
  */
-int uuid_create(
+int uuid_upnp_create(
 	/*! . */
 	uuid_upnp * id);
 
 /*!
  * \brief Out will be xxxx-xx-xx-xx-xxxxxx format.
  */
-void uuid_unpack(
+void uuid_upnp_unpack(
 	/*! . */
 	uuid_upnp * u,
 	/*! . */
@@ -57,7 +57,7 @@ void uuid_unpack(
 /*!
  * \brief Create a UUID using a "name" from a "name space"
  */
-void uuid_create_from_name(
+void uuid_upnp_create_from_name(
 	/*! Resulting UUID. */
 	uuid_upnp * uid,
 	/*! UUID to serve as context, so identical names from different name
@@ -78,7 +78,7 @@ void uuid_create_from_name(
  *
  * \note Lexical ordering is not temporal ordering!
  */
-int uuid_compare(
+int uuid_upnp_compare(
 	/*! . */
 	uuid_upnp * u1,
 	/*! . */
diff --git a/upnp/src/uuid/uuid.c b/upnp/src/uuid/uuid.c
index 211b61f..ecd5904 100644
--- a/upnp/src/uuid/uuid.c
+++ b/upnp/src/uuid/uuid.c
@@ -50,7 +50,7 @@ static uint16_t true_random(void);
 /*!
  * \brief Generator of a UUID.
  */
-int uuid_create(uuid_upnp * uid)
+int uuid_upnp_create(uuid_upnp * uid)
 {
 	uuid_time_t timestamp;
 	uuid_time_t last_time;
@@ -82,7 +82,7 @@ int uuid_create(uuid_upnp * uid)
 	return 1;
 };
 
-void uuid_unpack(uuid_upnp * u, char *out)
+void uuid_upnp_unpack(uuid_upnp * u, char *out)
 {
 	sprintf(out,
 		"%8.8x-%4.4x-%4.4x-%2.2x%2.2x-%2.2x%2.2x%2.2x%2.2x%2.2x%2.2x",
@@ -221,7 +221,7 @@ static uint16_t true_random(void)
 /*!
  * \brief Create a UUID using a "name" from a "name space".
  */
-void uuid_create_from_name(
+void uuid_upnp_create_from_name(
 	/*! resulting UUID. */
 	uuid_upnp *uid,
 	/*! UUID to serve as context, so identical names from different name
@@ -280,7 +280,7 @@ void format_uuid_v3(uuid_upnp *uid, unsigned char hash[16])
  *
  * Note: Lexical ordering is not temporal ordering!
  */
-int uuid_compare(uuid_upnp *u1, uuid_upnp *u2)
+int uuid_upnp_compare(uuid_upnp *u1, uuid_upnp *u2)
 {
 	int i;
 
