 upnp/src/genlib/net/http/httpreadwrite.c | 18 ++++++++++++++++++
 1 file changed, 18 insertions(+)

diff --git a/upnp/src/genlib/net/http/httpreadwrite.c b/upnp/src/genlib/net/http/httpreadwrite.c
index 27e9c3a5..5f696c19 100644
--- a/upnp/src/genlib/net/http/httpreadwrite.c
+++ b/upnp/src/genlib/net/http/httpreadwrite.c
@@ -67,12 +67,17 @@
 	#if defined(_MSC_VER) && _MSC_VER < 1900
 		#define snprintf _snprintf
 	#endif
+	#include "winsock.h"
 #else /* _WIN32 */
 	#include <arpa/inet.h>
 	#include <sys/time.h>
 	#include <sys/types.h>
 	#include <sys/utsname.h>
 	#include <sys/wait.h>
+
+	#include <sys/socket.h>
+	#include <netinet/in.h>
+	#include <netinet/tcp.h>
 #endif /* _WIN32 */

 /*
@@ -308,6 +313,19 @@ SOCKET http_Connect(uri_type *destination_url, uri_type *url)
 	if (connfd == INVALID_SOCKET) {
 		return (SOCKET)(UPNP_E_OUTOF_SOCKET);
 	}
+
+
+
+#ifdef _WIN32
+	std::string val = "5000";
+	setsockopt(connfd, IPPROTO_TCP, TCP_USER_TIMEOUT, val.c_str(), sizeof(val));
+#else
+    // Set the socket connect timeout to 5 seconds
+    uint32_t userTimeout = 5000;
+    socklen_t userTimeoutLen = sizeof(userTimeout); printf("@@@??\n");
+    setsockopt(connfd, IPPROTO_TCP, TCP_USER_TIMEOUT, &userTimeout, userTimeoutLen);
+#endif
+
 	sockaddr_len = (socklen_t)(url->hostport.IPaddress.ss_family == AF_INET6
 					   ? sizeof(struct sockaddr_in6)
 					   : sizeof(struct sockaddr_in));
