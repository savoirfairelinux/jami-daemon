--- a/upnp/src/api/upnptools.c
+++ b/upnp/src/api/upnptools.c
@@ -57,7 +57,9 @@
 #define HEADER_LENGTH 2000
 
 #ifdef WIN32
-	#define snprintf _snprintf
+    #if _MSC_VER < 1900
+        #define snprintf _snprintf
+    #endif
 #endif
 
 /*!
--- a/upnp/src/gena/gena_ctrlpt.c
+++ b/upnp/src/gena/gena_ctrlpt.c
@@ -53,7 +53,9 @@
 #include "upnpapi.h"
 
 #ifdef WIN32
-	#define snprintf _snprintf
+    #if _MSC_VER < 1900
+        #define snprintf _snprintf
+    #endif
 #endif
 
 extern ithread_mutex_t GlobalClientSubscribeMutex;
@@ -561,8 +563,8 @@ int genaSubscribe(
 	}
 
 	/* generate client SID */
-	uuid_create(&uid );
-	uuid_unpack(&uid, temp_sid);
+    uuid_upnp_create(&uid );
+    uuid_upnp_unpack(&uid, temp_sid);
 	rc = snprintf(temp_sid2, sizeof(temp_sid2), "uuid:%s", temp_sid);
 	if (rc < 0 || (unsigned int) rc >= sizeof(temp_sid2)) {
 		return_code = UPNP_E_OUTOF_MEMORY;
--- a/upnp/src/gena/gena_device.c
+++ b/upnp/src/gena/gena_device.c
@@ -53,7 +53,9 @@
 #include "uuid.h"
 
 #ifdef WIN32
-	#define snprintf _snprintf
+    #if _MSC_VER < 1900
+        #define snprintf _snprintf
+    #endif
 #endif
 
 #define STALE_JOBID (INVALID_JOB_ID -1)
@@ -1271,8 +1273,8 @@ void gena_process_subscription_request(
 	}
 
 	/* generate SID */
-	uuid_create(&uid);
-	uuid_unpack(&uid, temp_sid);
+    uuid_upnp_create(&uid);
+    uuid_upnp_unpack(&uid, temp_sid);
 	rc = snprintf(sub->sid, sizeof(sub->sid), "uuid:%s", temp_sid);
 
 	/* respond OK */
--- a/upnp/src/genlib/miniserver/miniserver.c
+++ b/upnp/src/genlib/miniserver/miniserver.c
@@ -68,6 +68,13 @@
 /*! . */
 #define APPLICATION_LISTENING_PORT 49152
 
+/* IPV6_V6ONLY is missing from MinGW, hack taken from
+ * http://svn.apache.org/repos/asf/apr/apr/trunk/network_io/win32/sockopt.c
+ */
+#ifndef IPV6_V6ONLY
+#define IPV6_V6ONLY 27
+#endif
+
 struct mserv_request_t {
 	/*! Connection handle. */
 	SOCKET connfd;
--- a/upnp/src/genlib/net/http/httpreadwrite.c
+++ b/upnp/src/genlib/net/http/httpreadwrite.c
@@ -59,7 +59,9 @@
 #ifdef WIN32
 	#include <malloc.h>
 	#define fseeko fseek
-	#define snprintf _snprintf
+    #if _MSC_VER < 1900
+        #define snprintf _snprintf
+    #endif
 #else
 	#include <arpa/inet.h>
 	#include <sys/types.h>
@@ -2165,6 +2167,7 @@ void get_sdk_info(OUT char *info, IN size_t infoSize)
 	OSVERSIONINFO versioninfo;
 	versioninfo.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);
 
+#if (WINAPI_FAMILY_APP != WINAPI_FAMILY_PC_APP)
 	if (GetVersionEx(&versioninfo) != 0)
 		snprintf(info, infoSize,
 			"%d.%d.%d %d/%s, UPnP/1.0, Portable SDK for UPnP devices/"
@@ -2174,6 +2177,10 @@ void get_sdk_info(OUT char *info, IN size_t infoSize)
 	else
 		*info = '\0';
 #else
+        snprintf(info, infoSize, "%d.%d.%d %d/%s, UPnP/1.0, Portable SDK for UPnP devices/" PACKAGE_VERSION "\r\n",
+            0, 0, 0, 0, 0);
+    #endif
+    #else
 	int ret_code;
 	struct utsname sys_info;
 
--- a/upnp/src/genlib/net/http/webserver.c
+++ b/upnp/src/genlib/net/http/webserver.c
@@ -63,7 +63,9 @@
 #include <sys/stat.h>
 
 #ifdef WIN32
-	 #define snprintf _snprintf
+    #if _MSC_VER < 1900
+        #define snprintf _snprintf
+    #endif
 #endif
 
 /*!
--- a/upnp/src/genlib/net/uri/uri.c
+++ b/upnp/src/genlib/net/uri/uri.c
@@ -45,7 +45,9 @@
 	#endif
 #endif
 #ifdef WIN32
-	#define snprintf _snprintf
+    #if _MSC_VER < 1900
+        #define snprintf _snprintf
+    #endif
 #endif
 #include <assert.h>
 
--- a/upnp/src/inc/upnputil.h
+++ b/upnp/src/inc/upnputil.h
@@ -130,7 +130,7 @@ void linecopylen(
 		#define strncasecmp		strnicmp
 		#define sleep(a)		Sleep((a)*1000)
 		#define usleep(a)		Sleep((a)/1000)
-		#define strerror_r(a,b,c)	(strerror_s((b),(c),(a)))
+        #define strerror_r(a,b,c) strncpy( b, strerror(a), c)
 	#else
 		#define max(a, b)   (((a)>(b))? (a):(b))
 		#define min(a, b)   (((a)<(b))? (a):(b))
--- a/upnp/src/inc/uuid.h
+++ b/upnp/src/inc/uuid.h
@@ -41,14 +41,14 @@ typedef struct _uuid_upnp {
 /*!
  * \brief Generate a UUID.
  */
-int uuid_create(
+int uuid_upnp_create(
 	/*! . */
 	uuid_upnp * id);
 
 /*!
  * \brief Out will be xxxx-xx-xx-xx-xxxxxx format.
  */
-void uuid_unpack(
+void uuid_upnp_unpack(
 	/*! . */
 	uuid_upnp * u,
 	/*! . */
@@ -57,7 +57,7 @@ void uuid_unpack(
 /*!
  * \brief Create a UUID using a "name" from a "name space"
  */
-void uuid_create_from_name(
+void uuid_upnp_create_from_name(
 	/*! Resulting UUID. */
 	uuid_upnp * uid,
 	/*! UUID to serve as context, so identical names from different name
@@ -78,7 +78,7 @@ void uuid_create_from_name(
  *
  * \note Lexical ordering is not temporal ordering!
  */
-int uuid_compare(
+int uuid_upnp_compare(
 	/*! . */
 	uuid_upnp * u1,
 	/*! . */
--- a/upnp/src/soap/soap_device.c
+++ b/upnp/src/soap/soap_device.c
@@ -52,7 +52,9 @@
 #include <string.h>
 
 #ifdef WIN32
-	#define snprintf _snprintf
+    #if _MSC_VER < 1900
+        #define snprintf _snprintf
+    #endif
 #endif
 
 /*! timeout duration in secs for transmission/reception */
--- a/upnp/src/ssdp/ssdp_ctrlpt.c
+++ b/upnp/src/ssdp/ssdp_ctrlpt.c
@@ -59,7 +59,9 @@
 
 #ifdef WIN32
 #include <string.h>
-#define snprintf _snprintf
+    #if _MSC_VER < 1900
+        #define snprintf _snprintf
+    #endif
 #endif /* WIN32 */
 
 /*!
--- a/upnp/src/ssdp/ssdp_device.c
+++ b/upnp/src/ssdp/ssdp_device.c
@@ -57,7 +57,9 @@
 #include <string.h>
 
 #ifdef WIN32
-	#define snprintf _snprintf
+    #if _MSC_VER < 1900
+        #define snprintf _snprintf
+    #endif
 #endif
 
 #define MSGTYPE_SHUTDOWN	0
--- a/upnp/src/ssdp/ssdp_server.c
+++ b/upnp/src/ssdp/ssdp_server.c
@@ -41,7 +41,9 @@
 #ifndef WIN32
 	#include <sys/param.h>
 #else
-	#define snprintf _snprintf
+    #if _MSC_VER < 1900
+        #define snprintf _snprintf
+    #endif
 #endif /* WIN32 */
 
 #include "config.h"
@@ -69,6 +71,13 @@
 	#endif /* UPNP_ENABLE_IPV6 */
 #endif /* INCLUDE_CLIENT_APIS */
 
+/* IPV6_V6ONLY is missing from MinGW, hack taken from
+ * http://svn.apache.org/repos/asf/apr/apr/trunk/network_io/win32/sockopt.c
+ */
+#ifndef IPV6_V6ONLY
+#define IPV6_V6ONLY 27
+#endif
+
 void RequestHandler();
 
 enum Listener {
--- a/upnp/src/urlconfig/urlconfig.c
+++ b/upnp/src/urlconfig/urlconfig.c
@@ -50,7 +50,9 @@
 #include <stdio.h>
 
 #ifdef WIN32
-	#define snprintf _snprintf
+    #if _MSC_VER < 1900
+        #define snprintf _snprintf
+    #endif
 #else
 	#include <sys/types.h>
 #endif
--- a/upnp/src/uuid/sysdep.c
+++ b/upnp/src/uuid/sysdep.c
@@ -30,6 +30,8 @@
 #include <string.h>
 #include <stdio.h>
 
+#include <Winsock2.h>
+
 /*!
  * \brief System dependent call to get IEEE node ID.
  *
@@ -93,7 +95,9 @@ void get_random_info(unsigned char seed[16])
 	/* Initialize memory area so that valgrind does not complain */
 	memset(&r, 0, sizeof r);
 	/* memory usage stats */
-	GlobalMemoryStatus( &r.m );
+#if !defined(WINAPI_FAMILY) || (WINAPI_FAMILY == WINAPI_FAMILY_DESKTOP_APP)
+    GlobalMemoryStatus(&r.m);
+#endif
 	/* random system stats */
 	GetSystemInfo( &r.s );
 	/* 100ns resolution (nominally) time of day */
@@ -101,9 +105,13 @@ void get_random_info(unsigned char seed[16])
 	/* high resolution performance counter */
 	QueryPerformanceCounter( &r.pc );
 	/* milliseconds since last boot */
-	r.tc = GetTickCount();
+	r.tc = GetTickCount64();
 	r.l = MAX_COMPUTERNAME_LENGTH + 1;
-	GetComputerName( r.hostname, &r.l );
+#if !defined(WINAPI_FAMILY) || (WINAPI_FAMILY == WINAPI_FAMILY_DESKTOP_APP)
+    GetComputerName(r.hostname, &r.l);
+#else
+    GetHostNameW(r.hostname, &r.l);
+#endif
 	/* MD5 it */
 	MD5Init(&c);
 	MD5Update(&c, (unsigned char *)(&r), sizeof r);
--- a/upnp/src/uuid/uuid.c
+++ b/upnp/src/uuid/uuid.c
@@ -50,7 +50,7 @@ static uint16_t true_random(void);
 /*!
  * \brief Generator of a UUID.
  */
-int uuid_create(uuid_upnp * uid)
+int uuid_upnp_create(uuid_upnp * uid)
 {
 	uuid_time_t timestamp;
 	uuid_time_t last_time;
@@ -82,7 +82,7 @@ int uuid_create(uuid_upnp * uid)
 	return 1;
 };
 
-void uuid_unpack(uuid_upnp * u, char *out)
+void uuid_upnp_unpack(uuid_upnp * u, char *out)
 {
 	sprintf(out,
 		"%8.8x-%4.4x-%4.4x-%2.2x%2.2x-%2.2x%2.2x%2.2x%2.2x%2.2x%2.2x",
@@ -221,7 +221,7 @@ static uint16_t true_random(void)
 /*!
  * \brief Create a UUID using a "name" from a "name space".
  */
-void uuid_create_from_name(
+void uuid_upnp_create_from_name(
 	/*! resulting UUID. */
 	uuid_upnp *uid,
 	/*! UUID to serve as context, so identical names from different name
@@ -280,7 +280,7 @@ void format_uuid_v3(uuid_upnp *uid, unsigned char hash[16])
  *
  * Note: Lexical ordering is not temporal ordering!
  */
-int uuid_compare(uuid_upnp *u1, uuid_upnp *u2)
+int uuid_upnp_compare(uuid_upnp *u1, uuid_upnp *u2)
 {
 	int i;
 
-- 
2.10.2.windows.1

