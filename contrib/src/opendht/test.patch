 src/http.cpp | 38 ++++++++------------------------------
 1 file changed, 8 insertions(+), 30 deletions(-)

diff --git a/src/http.cpp b/src/http.cpp
index 40aca3c0..c3d278b7 100644
--- a/src/http.cpp
+++ b/src/http.cpp
@@ -566,52 +566,30 @@ Connection::async_connect(std::vector<asio::ip::tcp::endpoint>&& endpoints, Conn
         return;
     }
     auto& base = ssl_socket_? ssl_socket_->lowest_layer() : *socket_;
-
 #pragma GCC diagnostic push
 #pragma GCC diagnostic ignored "-Wunused-variable"
     ConnectHandlerCb wcb = [this, &base, cb=std::move(cb)](const asio::error_code& ec, const asio::ip::tcp::endpoint& endpoint) {
         if (!ec) {
-            auto socket = base.native_handle();
             local_address_ = base.local_endpoint().address();
             // Once connected, set a keep alive on the TCP socket with 30 seconds delay
             // This will generate broken pipes as soon as possible.
             // Note this needs to be done once connected to have a valid native_handle()
-            uint32_t start = 30;
-            uint32_t interval = 30;
-            uint32_t cnt = 1;
+            base.set_option(asio::socket_base::keep_alive(true));
+            base.set_option(asio::ip::tcp::no_delay(true));
 #ifdef _WIN32
-            std::string val = "1";
-            setsockopt(socket, SOL_SOCKET, SO_KEEPALIVE, val.c_str(), sizeof(val));
-
-            // TCP_KEEPIDLE and TCP_KEEPINTVL are available since Win 10 version 1709
-            // TCP_KEEPCNT since Win 10 version 1703
 #ifdef TCP_KEEPIDLE
-            std::string start_str = std::to_string(start);
-            setsockopt(socket, IPPROTO_TCP, TCP_KEEPIDLE,
-                    start_str.c_str(), sizeof(start_str));
+            base.set_option(asio::detail::socket_option::integer<IPPROTO_TCP, TCP_KEEPIDLE>(30));
 #endif
 #ifdef TCP_KEEPINTVL
-            std::string interval_str = std::to_string(interval);
-            setsockopt(socket, IPPROTO_TCP, TCP_KEEPINTVL,
-                    interval_str.c_str(), sizeof(interval_str));
+            base.set_option(asio::detail::socket_option::integer<IPPROTO_TCP, TCP_KEEPINTVL>(30));
 #endif
 #ifdef TCP_KEEPCNT
-            std::string cnt_str = std::to_string(cnt);
-            setsockopt(socket, IPPROTO_TCP, TCP_KEEPCNT,
-                    cnt_str.c_str(), sizeof(cnt_str));
+            base.set_option(asio::detail::socket_option::integer<IPPROTO_TCP, TCP_KEEPCNT>(1));
 #endif
 #else
-            uint32_t val = 1;
-            setsockopt(socket, SOL_SOCKET, SO_KEEPALIVE, &val, sizeof(uint32_t));
-#ifdef __APPLE__
-            // Apple devices only have one parameter
-            setsockopt(socket, IPPROTO_TCP, TCP_KEEPALIVE, &start, sizeof(uint32_t));
-#else
-            // Linux based systems
-            setsockopt(socket, SOL_TCP, TCP_KEEPIDLE, &start, sizeof(uint32_t));
-            setsockopt(socket, SOL_TCP, TCP_KEEPINTVL, &interval, sizeof(uint32_t));
-            setsockopt(socket, SOL_TCP, TCP_KEEPCNT, &cnt, sizeof(uint32_t));
-#endif
+            base.set_option(asio::detail::socket_option::integer<SOL_TCP, TCP_KEEPIDLE>(30));
+            base.set_option(asio::detail::socket_option::integer<SOL_TCP, TCP_KEEPINTVL>(30));
+            base.set_option(asio::detail::socket_option::integer<SOL_TCP, TCP_KEEPCNT>(1));
 #endif
         }
         if (cb)
