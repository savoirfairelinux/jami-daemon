From 58cc0e48bccd4a57b8c83a4c06105d8296115d10 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?S=C3=A9bastien=20Blin?=
 <sebastien.blin@savoirfairelinux.com>
Date: Tue, 9 Mar 2021 17:15:20 -0500
Subject: [PATCH] debug

---
 include/opendht/infohash.h       |  16 +++
 include/opendht/network_engine.h |   3 +
 include/opendht/routing_table.h  |   2 +-
 src/dht.cpp                      | 117 ++++++++++++++-
 src/dht_proxy_server.cpp         |  64 ++++++++-
 src/dhtrunner.cpp                |   4 +
 src/infohash.cpp                 |  27 ++++
 src/network_engine.cpp           |  95 +++++++++++-
 src/node_cache.cpp               |   6 +-
 src/op_cache.cpp                 |  40 ++++--
 src/op_cache.h                   |  20 +--
 src/routing_table.cpp            |  67 ++++++++-
 src/search.h                     |  16 ++-
 tools/dhtnode.cpp                |   6 +-
 tools/neighbors.html             | 167 +++++++++++++++++++++
 tools/testgetput.sh              | 240 +++++++++++++++++++++++++++++++
 tools/testneighbors.sh           |  53 +++++++
 17 files changed, 896 insertions(+), 47 deletions(-)
 create mode 100644 tools/neighbors.html
 create mode 100755 tools/testgetput.sh
 create mode 100755 tools/testneighbors.sh

diff --git a/include/opendht/infohash.h b/include/opendht/infohash.h
index cf774cd..e74555f 100644
--- a/include/opendht/infohash.h
+++ b/include/opendht/infohash.h
@@ -175,6 +175,14 @@ public:
         return 8 * i + j;
     }
 
+    static Hash XOR(const Hash& id1, const Hash& id2) {
+        Hash result;
+        for(unsigned i = 0; i < N; i++) {
+            result[i] = id1.data_[i] ^ id2.data_[i];
+        }
+        return result;
+    }
+
     /** Determine whether id1 or id2 is closer to this */
     int
     xorCmp(const Hash& id1, const Hash& id2) const
@@ -392,6 +400,14 @@ Hash<N>::toString() const
 
 const InfoHash zeroes {};
 
+extern InfoHash FOLLOW_HASH;
+
+void traceCache(const std::string& content);
+
+extern InfoHash FOLLOW_HASH;
+
+void traceCache(const std::string& content);
+
 struct OPENDHT_PUBLIC NodeExport {
     InfoHash id;
     sockaddr_storage ss;
diff --git a/include/opendht/network_engine.h b/include/opendht/network_engine.h
index 3523125..84a78e0 100644
--- a/include/opendht/network_engine.h
+++ b/include/opendht/network_engine.h
@@ -437,6 +437,9 @@ public:
 
     Sp<Node> insertNode(const InfoHash& id, const SockAddr& addr) {
         auto n = cache.getNode(id, addr, scheduler.time(), 0);
+        std::stringstream st;
+        st << "[NE " << this << "] insertNode node (" << n->getId() << ")";
+        traceCache(st.str());
         onNewNode(n, 0);
         return n;
     }
diff --git a/include/opendht/routing_table.h b/include/opendht/routing_table.h
index 234488d..9378675 100644
--- a/include/opendht/routing_table.h
+++ b/include/opendht/routing_table.h
@@ -58,7 +58,7 @@ public:
 
     InfoHash middle(const RoutingTable::const_iterator&) const;
 
-    std::vector<Sp<Node>> findClosestNodes(const InfoHash id, time_point now, size_t count = TARGET_NODES) const;
+    std::vector<Sp<Node>> findClosestNodes(const InfoHash id, time_point now, size_t count = TARGET_NODES, bool needsLog = false) const;
 
     RoutingTable::iterator findBucket(const InfoHash& id);
     RoutingTable::const_iterator findBucket(const InfoHash& id) const;
diff --git a/src/dht.cpp b/src/dht.cpp
index ef17480..2c93e99 100644
--- a/src/dht.cpp
+++ b/src/dht.cpp
@@ -204,9 +204,17 @@ Dht::onNewNode(const Sp<Node>& node, int confirm)
     auto& b = buckets(node->getFamily());
     auto wasEmpty = confirm < 2 && b.grow_time < now - std::chrono::minutes(5);
     if (b.onNewNode(node, confirm, now, myid, network_engine) or confirm) {
-        trySearchInsert(node);
+        auto res = trySearchInsert(node);
+
+        std::stringstream st;
+        st << "[dht " << this << "] insert node (" << node->getId() << ") res(" << res << ", confirm: " << confirm << ", wasEmpty: " << wasEmpty;
+        traceCache(st.str());
+
         if (wasEmpty) {
             scheduler.edit(nextNodesConfirmation, now + std::chrono::seconds(1));
+        } else if (res) {
+            scheduler.edit(nextNodesConfirmation, now);
+
         }
     }
 }
@@ -608,8 +616,16 @@ Dht::searchSynchedNodeListen(const Sp<Search>& sr, SearchNode& n)
                     n.node->openSocket([this,ws,query](const Sp<Node>& node, net::RequestAnswer&& answer) mutable {
                         /* on new values */
                         if (auto sr = ws.lock()) {
+
                             scheduler.edit(sr->nextSearchStep, scheduler.time());
                             sr->insertNode(node, scheduler.time(), answer.ntoken);
+
+                            if (sr->id == FOLLOW_HASH) {
+                                std::stringstream st;
+                                    st << "[dht " << this << "] searchSynchedNodeListen " << FOLLOW_HASH << " node (" << node->getId() << ") - new values size: " << answer.values.size() << "\n";
+                                traceCache(st.str());
+                            }
+
                             if (auto sn = sr->getNode(node)) {
                                 sn->onValues(query, std::move(answer), types, scheduler);
                             }
@@ -627,6 +643,13 @@ Dht::searchSynchedNodeListen(const Sp<Search>& sr, SearchNode& n)
             [this,ws,query](const net::Request& req, net::RequestAnswer&& answer) mutable
             { /* on done */
                 if (auto sr = ws.lock()) {
+
+                    if (sr->id == FOLLOW_HASH) {
+                        std::stringstream st;
+                            st << "[dht " << this << "] searchSynchedNodeListen on done " << FOLLOW_HASH << " node (" << req.node->getId() << ") - new values size: " << answer.values.size() << "\n";
+                        traceCache(st.str());
+                    }
+
                     scheduler.edit(sr->nextSearchStep, scheduler.time());
                     if (auto sn = sr->getNode(req.node)) {
                         scheduler.add(sn->getListenTime(query, getListenExpiration()), std::bind(&Dht::searchStep, this, sr));
@@ -817,7 +840,7 @@ Dht::search(const InfoHash& id, sa_family_t af, GetCallback gcb, QueryCallback q
             search_id++;
     }
 
-    sr->get(f, q, qcb, gcb, dcb, scheduler);
+    sr->get(f, q, qcb, gcb, dcb, scheduler, (id == FOLLOW_HASH));
     refill(*sr);
 
     return sr;
@@ -856,16 +879,26 @@ Dht::listenTo(const InfoHash& id, sa_family_t af, ValueCallback cb, Value::Filte
         throw DhtException("Can't create search");
     if (logger_)
         logger_->w(id, "[search %s IPv%c] listen", id.to_c_str(), (af == AF_INET) ? '4' : '6');
-    return sr->listen(cb, f, q, scheduler);
+    return sr->listen(cb, f, q, scheduler, id == FOLLOW_HASH);
 }
 
 size_t
 Dht::listen(const InfoHash& id, ValueCallback cb, Value::Filter f, Where where)
 {
+    if (id == FOLLOW_HASH) {
+        std::stringstream st;
+        st << "[dht " << this << "] listen " << FOLLOW_HASH;
+        traceCache(st.str());
+    }
     scheduler.syncTime();
 
     auto token = ++listener_token;
     auto gcb = OpValueCache::cacheCallback(std::move(cb), [this, id, token]{
+        if (id == FOLLOW_HASH) {
+            std::stringstream st;
+            st << "[dht " << this << "] cancel listen " << FOLLOW_HASH << " via cacheCallback";
+            traceCache(st.str());
+        }
         cancelListen(id, token);
     });
 
@@ -896,6 +929,11 @@ Dht::listen(const InfoHash& id, ValueCallback cb, Value::Filter f, Where where)
 bool
 Dht::cancelListen(const InfoHash& id, size_t token)
 {
+    if (id == FOLLOW_HASH) {
+        std::stringstream st;
+        st << "[dht " << this << "] cancel listen " << FOLLOW_HASH << " token " << token;
+        traceCache(st.str());
+    }
     scheduler.syncTime();
 
     auto it = listeners.find(token);
@@ -944,6 +982,11 @@ struct GetStatus : public OpStatus {
 void
 Dht::put(const InfoHash& id, Sp<Value> val, DoneCallback callback, time_point created, bool permanent)
 {
+    if (id == FOLLOW_HASH) {
+        std::stringstream st;
+        st << "[dht " << this << "] put on " << FOLLOW_HASH;
+        traceCache(st.str());
+    }
     if (not val) {
         if (callback)
             callback(false, {});
@@ -968,6 +1011,19 @@ Dht::put(const InfoHash& id, Sp<Value> val, DoneCallback callback, time_point cr
         }
     };
     announce(id, AF_INET, val, [=](bool ok4, const std::vector<Sp<Node>>& nodes) {
+        if (id == FOLLOW_HASH) {
+            std::stringstream st;
+            for (const auto& node: nodes)
+                st << "[dht " << this << "] PUT FOR ID " << FOLLOW_HASH << " node (" << node->getId() << ") - expired: " << node->isExpired() << "\n";
+            
+            for (const auto& b : buckets(AF_INET))
+                dumpBucket(b, st);
+
+            st << "###" << InfoHash::XOR(id, myid) << ":" <<  myid << ":put,";
+            for (int i = 0; i < std::min(8, (int)nodes.size()); ++i)
+                st << nodes[i]->getId() << ",";
+            traceCache(st.str());
+        }
         if (logger_)
             logger_->d(id, "Announce done IPv4 %d", ok4);
         auto& o = *op;
@@ -975,6 +1031,12 @@ Dht::put(const InfoHash& id, Sp<Value> val, DoneCallback callback, time_point cr
         donecb(nodes, o);
     }, created, permanent);
     announce(id, AF_INET6, val, [=](bool ok6, const std::vector<Sp<Node>>& nodes) {
+        if (id == FOLLOW_HASH) {
+            std::stringstream st;
+            for (const auto& node: nodes)
+                st << "[dht " << this << "] PUTv6 FOR ID " << FOLLOW_HASH << " node (" << node->getId() << ") - expired: " << node->isExpired() << "\n";
+            traceCache(st.str());
+        }
         if (logger_)
             logger_->d(id, "Announce done IPv6 %d", ok6);
         auto& o = *op;
@@ -1014,10 +1076,23 @@ bool callbackWrapper(Cb get_cb, DoneCallback done_cb, const std::vector<Sp<T>>&
 void
 Dht::get(const InfoHash& id, GetCallback getcb, DoneCallback donecb, Value::Filter&& filter, Where&& where)
 {
+
     scheduler.syncTime();
 
     auto op = std::make_shared<GetStatus<std::map<Value::Id, Sp<Value>>>>();
-    auto gcb = [getcb, donecb, op](const std::vector<Sp<Value>>& vals) {
+    auto gcb = [getcb, donecb, op, id, this](const std::vector<Sp<Value>>& vals) {
+        //std::stringstream st;
+        //if (id == FOLLOW_HASH) {
+        //    st << "###[dht " << this << "] call gcb " << FOLLOW_HASH << "Nb values: " << vals.size() << std::endl;
+        //}
+//
+        //st << "###" << myid << ":";
+        //auto closest_nodes = buckets(AF_INET).findClosestNodes(FOLLOW_HASH, scheduler.time(), 8);
+        //for (const auto& node: closest_nodes)
+        //    st << node->getId() << ",";
+//
+        //traceCache(st.str());
+
         auto& o = *op;
         return callbackWrapper(getcb, donecb, vals, [&o](const std::vector<Sp<Value>>& values) {
             std::vector<Sp<Value>> newvals {};
@@ -1038,15 +1113,43 @@ Dht::get(const InfoHash& id, GetCallback getcb, DoneCallback donecb, Value::Filt
     auto f = filter.chain(q->where.getFilter());
 
     /* Try to answer this search locally. */
+    if (id == FOLLOW_HASH) {
+        std::stringstream st;
+        st << "[dht " << this << "] start get local for " << FOLLOW_HASH;
+        traceCache(st.str());
+    }
     gcb(getLocal(id, f));
+    if (id == FOLLOW_HASH) {
+        std::stringstream st;
+        st << "[dht " << this << "] start search for  " << FOLLOW_HASH;
+        traceCache(st.str());
+    }
 
     Dht::search(id, AF_INET, gcb, {}, [=](bool ok, const std::vector<Sp<Node>>& nodes) {
-        //logger__WARN("DHT done IPv4");
+        if (id == FOLLOW_HASH) {
+            std::stringstream st;
+            for (const auto& node: nodes)
+                st << "[dht " << this << "] GET FOR ID " << FOLLOW_HASH << " node (" << node->getId() << ") - expired: " << node->isExpired() << "\n";
+            
+            for (const auto& b : buckets(AF_INET))
+                dumpBucket(b, st);
+
+            st << "###" << InfoHash::XOR(id, myid) << ":" <<  myid << ":get,";
+            for (int i = 0; i < std::min(8, (int)nodes.size()); ++i)
+                st << nodes[i]->getId() << ",";
+            traceCache(st.str());
+        }
+
         op->status4 = {true, ok};
         doneCallbackWrapper(donecb, nodes, *op);
     }, f, q);
     Dht::search(id, AF_INET6, gcb, {}, [=](bool ok, const std::vector<Sp<Node>>& nodes) {
-        //logger__WARN("DHT done IPv6");
+        if (id == FOLLOW_HASH) {
+            std::stringstream st;
+            for (const auto& node: nodes)
+                st << "[dht " << this << "] GETv6 FOR ID " << FOLLOW_HASH << " node (" << node->getId() << ") - expired: " << node->isExpired() << "\n";
+            traceCache(st.str());
+        }
         op->status6 = {true, ok};
         doneCallbackWrapper(donecb, nodes, *op);
     }, f, q);
@@ -1806,6 +1909,7 @@ bool
 Dht::neighbourhoodMaintenance(RoutingTable& list)
 {
     //logger__DBG("neighbourhoodMaintenance");
+    printf("@@@neighbourhoodMaintenance0\n");
     auto b = list.findBucket(myid);
     if (b == list.end())
         return false;
@@ -1835,6 +1939,7 @@ Dht::neighbourhoodMaintenance(RoutingTable& list)
                 n->toString().c_str(), id.toString().c_str());
         /* Since our node-id is the same in both DHTs, it's probably
            profitable to query both families. */
+        printf("@@@neighbourhoodMaintenance1\n");
         network_engine.sendFindNode(n, id, network_engine.want());
     }
 
diff --git a/src/dht_proxy_server.cpp b/src/dht_proxy_server.cpp
index d1f801c..385ef22 100644
--- a/src/dht_proxy_server.cpp
+++ b/src/dht_proxy_server.cpp
@@ -649,6 +649,38 @@ DhtProxyServer::createRestRouter()
 #endif
 #endif // OPENDHT_PROXY_SERVER_IDENTITY
 
+    router->http_get("/trace/:hash", [&](restinio::request_handle_t request,
+        restinio::router::route_params_t params) {
+            try {
+                InfoHash infoHash(params["hash"].to_string());
+                FOLLOW_HASH = infoHash;
+                auto response = std::make_shared<ResponseByPartsBuilder>(
+                    initHttpResponse(request->create_response<ResponseByParts>()));
+                response->flush();
+                response->done();
+                return restinio::request_handling_status_t::accepted;
+            } catch (const std::exception& e){
+                return serverError(*request);
+            }
+        });
+
+
+    router->http_get("/trace/:hash", [&](restinio::request_handle_t request,
+        restinio::router::route_params_t params) {
+            try {
+                InfoHash infoHash(params["hash"].to_string());
+                FOLLOW_HASH = infoHash;
+                auto response = std::make_shared<ResponseByPartsBuilder>(
+                    initHttpResponse(request->create_response<ResponseByParts>()));
+                response->flush();
+                response->done();
+                return restinio::request_handling_status_t::accepted;
+            } catch (const std::exception& e){
+                return serverError(*request);
+            }
+        });
+
+
     // **************************** NEW ROUTES ****************************
     // node.info
     router->http_get("/node/info", std::bind(&DhtProxyServer::getNodeInfo, this, _1, _2));
@@ -733,7 +765,17 @@ DhtProxyServer::get(restinio::request_handle_t request,
         auto response = std::make_shared<ResponseByPartsBuilder>(
             initHttpResponse(request->create_response<ResponseByParts>()));
         response->flush();
-        dht_->get(infoHash, [this, response](const std::vector<Sp<Value>>& values) {
+        if (infoHash == FOLLOW_HASH) {
+            std::stringstream st;
+            st << "[proxy " << this << "] Get on " << FOLLOW_HASH;
+            traceCache(st.str());
+        }
+        dht_->get(infoHash, [this, response, infoHash](const std::vector<Sp<Value>>& values) {
+            if (infoHash == FOLLOW_HASH) {
+                std::stringstream st;
+                st << "[proxy " << this << "] Get on " << FOLLOW_HASH << ", new values, size: " << values.size();
+                traceCache(st.str());
+            }
             std::stringstream output;
             for (const auto& value : values) {
                 output << Json::writeString(jsonBuilder_, value->toJson()) << "\n";
@@ -742,7 +784,12 @@ DhtProxyServer::get(restinio::request_handle_t request,
             response->flush();
             return true;
         },
-        [response] (bool /*ok*/){
+        [response, infoHash, this] (bool ok){
+            if (infoHash == FOLLOW_HASH) {
+                std::stringstream st;
+                st << "[proxy " << this << "] Get on " << FOLLOW_HASH << ", finished with status: " << ok;
+                traceCache(st.str());
+            }
             response->done();
         });
         return restinio::request_handling_status_t::accepted;
@@ -1040,6 +1087,12 @@ DhtProxyServer::sendPushNotification(const std::string& token, Json::Value&& jso
         request->set_header_field(restinio::http_field_t::accept, "*/*");
         request->set_header_field(restinio::http_field_t::content_type, "application/json");
 
+        if (json.isMember("key") && json["key"].asString() == FOLLOW_HASH.toString()) {
+            std::stringstream st;
+            st << "[DhtProxyServer " << this << "] send push for " << FOLLOW_HASH << ", to device with token " << token;
+            traceCache(st.str());
+        }
+
         // NOTE: see https://github.com/appleboy/gorush
         Json::Value notification(Json::objectValue);
         Json::Value tokens(Json::arrayValue);
@@ -1396,7 +1449,12 @@ DhtProxyServer::getFiltered(restinio::request_handle_t request,
                 response->flush();
                 return true;
             },
-            [response] (bool /*ok*/){
+        [response, infoHash, this] (bool ok){
+            if (infoHash == FOLLOW_HASH) {
+                std::stringstream st;
+                st << "[proxy " << this << "] Get on " << FOLLOW_HASH << ", finished with status: " << ok;
+                traceCache(st.str());
+            }
                 response->done();
             },
             {}, value);
diff --git a/src/dhtrunner.cpp b/src/dhtrunner.cpp
index 2ece5e2..ecbd92d 100644
--- a/src/dhtrunner.cpp
+++ b/src/dhtrunner.cpp
@@ -60,6 +60,10 @@ DhtRunner::DhtRunner() : dht_()
 , dht_via_proxy_()
 #endif //OPENDHT_PROXY_CLIENT
 {
+    auto* h = getenv("TRACE_HASH");
+    if (h)
+        FOLLOW_HASH = InfoHash(h);
+
 #ifdef _WIN32
     WSADATA wsd;
     if (WSAStartup(MAKEWORD(2,2), &wsd) != 0)
diff --git a/src/infohash.cpp b/src/infohash.cpp
index 69c79b8..cc060ea 100644
--- a/src/infohash.cpp
+++ b/src/infohash.cpp
@@ -17,15 +17,42 @@
  */
 
 #include "infohash.h"
+#include <unistd.h> 
 
 #include <functional>
 #include <sstream>
 #include <cstdio>
+#include <fstream>
+#include <sys/time.h>
 
 namespace dht {
 
 const HexMap hex_map = {};
 
+InfoHash FOLLOW_HASH = {};
+
+void
+traceCache(const std::string& content)
+{
+    // Timestamp
+    unsigned int secs, milli;
+    struct timeval tv;
+
+    if (!gettimeofday(&tv, NULL)) {
+        secs = tv.tv_sec;
+        milli = tv.tv_usec / 1000; // suppose that milli < 1000
+    } else {
+        secs = time(NULL);
+        milli = 0;
+    }
+
+    std::ofstream file;
+    file.open("/tmp/" + FOLLOW_HASH.toString() + "_" + std::to_string(getpid()) + ".trace", std::ios_base::app); // append instead of overwrite
+    file << '[' << secs << '.' << std::right << std::setw(3) << std::setfill('0') << milli
+        << std::left << "]: " << content << std::endl;
+}
+
+
 void
 NodeExport::msgpack_unpack(msgpack::object o)
 {
diff --git a/src/network_engine.cpp b/src/network_engine.cpp
index fe518da..15b33bd 100644
--- a/src/network_engine.cpp
+++ b/src/network_engine.cpp
@@ -261,6 +261,9 @@ NetworkEngine::clear()
 {
     for (auto& request : requests) {
         request.second->cancel();
+        std::stringstream st;
+        st << "[dht " << this << "] NetworkEngine::clear() set node (" << request.second->node->getId() << ") expired\n";
+        traceCache(st.str());
         request.second->node->setExpired();
     }
     requests.clear();
@@ -276,14 +279,27 @@ void
 NetworkEngine::requestStep(Sp<Request> sreq)
 {
     auto& req = *sreq;
-    if (not req.pending())
-        return;
-
     auto now = scheduler.time();
     auto& node = *req.node;
+    if (not req.pending()) {
+        if (req.completed()) {
+
+            std::stringstream st;
+            st << "[NE " << this << "] response completed. node (" << node.getId() << ") done ";
+            st << "after " << print_duration(now-req.start);
+            traceCache(st.str());
+        }
+        return;
+    }
+
     if (req.isExpired(now)) {
         // if (logger_)
         //     logger_->d(node.id, "[node %s] expired !", node.toString().c_str());
+        std::stringstream st;
+        st << "[NE " << this << "] NetworkEngine::requestStep via req.isExpired() set node (" << node.getId() << ") expired ";
+        st << "after " << print_duration(now-req.start);
+        traceCache(st.str());
+
         node.setExpired();
         if (not node.id)
             requests.erase(req.tid);
@@ -299,10 +315,18 @@ NetworkEngine::requestStep(Sp<Request> sreq)
         err == EPIPE        ||
         err == EPERM)
     {
+        std::stringstream st;
+        st << "[dht " << this << "] NetworkEngine::requestStep set node (" << node.getId() << ") expired - send err " << err;
+        traceCache(st.str());
+
         node.setExpired();
         if (not node.id)
             requests.erase(req.tid);
     } else {
+        std::stringstream st;
+        st << "[dht " << this << "] NetworkEngine::requestStep set node (" << node.getId() << ") retry - send err " << err;
+        traceCache(st.str());
+
         req.last_try = now;
         if (err != EAGAIN) {
             ++req.attempt_count;
@@ -393,6 +417,9 @@ NetworkEngine::isMartian(const SockAddr& addr)
 void
 NetworkEngine::blacklistNode(const Sp<Node>& n)
 {
+    std::stringstream st;
+    st << "[dht " << this << "] NetworkEngine::blacklistNode set node (" << n->getId() << ") expired\n";
+    traceCache(st.str());
     n->setExpired();
     blacklist.emplace(n->getAddr());
 }
@@ -522,6 +549,9 @@ NetworkEngine::process(std::unique_ptr<ParsedMessage>&& msg, const SockAddr& fro
         if (not rsocket)
             throw DhtProtocolException {DhtProtocolException::UNKNOWN_TID, "Can't find socket", msg->id};
         node->received(now, {});
+        std::stringstream st;
+        st << "[NE " << this << "] onNewNode value update node (" << node->getId() << ")";
+        traceCache(st.str());
         onNewNode(node, 2);
         deserializeNodes(*msg, from);
         rsocket->on_receive(node, std::move(*msg));
@@ -539,8 +569,12 @@ NetworkEngine::process(std::unique_ptr<ParsedMessage>&& msg, const SockAddr& fro
                 requests.erase(req_it);
             } else {
                 node->received(now, req);
-                if (not node->isClient())
+                if (not node->isClient()) {
+                    std::stringstream st;
+                    st << "[NE " << this << "] onNewNode no resp node (" << node->getId() << ")";
+                    traceCache(st.str());
                     onNewNode(node, 1);
+                }
                 if (logger_)
                     logger_->d(node->id, "[node %s] can't find transaction with id %u", node->toString().c_str(), msg->tid);
                 return;
@@ -549,11 +583,21 @@ NetworkEngine::process(std::unique_ptr<ParsedMessage>&& msg, const SockAddr& fro
 
         node->received(now, req);
 
-        if (not node->isClient())
+        if (not node->isClient()) {
+
+            std::stringstream st;
+            st << "[NE " << this << "] onNewNode isClient2 node (" << node->getId() << ")";
+            traceCache(st.str());
             onNewNode(node, 2);
+        }
         onReportedAddr(msg->id, msg->addr);
 
         if (req and (req->cancelled() or req->expired() or req->completed())) {
+
+            std::stringstream st;
+            st << "[NE " << this << "] response to expired, cancelled or completed request. node (" << node->getId() << ") done ";
+            st << "after " << print_duration(now-req->start);
+            traceCache(st.str());
             if (logger_)
                 logger_->w(node->id, "[node %s] response to expired, cancelled or completed request", node->toString().c_str());
             return;
@@ -588,10 +632,16 @@ NetworkEngine::process(std::unique_ptr<ParsedMessage>&& msg, const SockAddr& fro
                 }
                 r.reply_time = scheduler.time();
 
+                std::stringstream st;
+                st << "[NE " << this << "] MessageType::Reply done (" << r.node->getId() << ")";
+                traceCache(st.str());
                 deserializeNodes(*msg, from);
                 r.setDone(std::move(*msg));
                 break;
             } else { /* request socket data */
+                std::stringstream st;
+                st << "[NE " << this << "] MessageType::Reply not done (" << req->node->getId() << ")";
+                traceCache(st.str());
                 deserializeNodes(*msg, from);
                 rsocket->on_receive(node, std::move(*msg));
             }
@@ -601,8 +651,13 @@ NetworkEngine::process(std::unique_ptr<ParsedMessage>&& msg, const SockAddr& fro
         }
     } else {
         node->received(now, {});
-        if (not node->isClient())
+        if (not node->isClient()) {
+
+            std::stringstream st;
+            st << "[NE " << this << "] onNewNode isClient node (" << node->getId() << ")";
+            traceCache(st.str());
             onNewNode(node, 1);
+        }
         try {
             switch (msg->type) {
             case MessageType::Ping:
@@ -617,12 +672,20 @@ NetworkEngine::process(std::unique_ptr<ParsedMessage>&& msg, const SockAddr& fro
                 // if (logger_)
                 //     logger_->d(msg->target, node->id, "[node %s] got 'find' request for %s (%d)", node->toString().c_str(), msg->target.toString().c_str(), msg->want);
                 ++in_stats.find;
+                
+                std::stringstream st;
+                st << "[NE " << this << "] GOT GET TO " << msg->info_hash << "  my: " << myid << ")";
+                traceCache(st.str());
                 RequestAnswer answer = onFindNode(node, msg->target, msg->want);
                 auto nnodes = bufferNodes(from.getFamily(), msg->target, msg->want, answer.nodes4, answer.nodes6);
                 sendNodesValues(from, msg->tid, nnodes.first, nnodes.second, {}, {}, answer.ntoken);
                 break;
             }
             case MessageType::GetValues: {
+                
+                std::stringstream st;
+                st << "[NE " << this << "] GOT GET TO " << msg->info_hash << "  my: " << myid << ")";
+                traceCache(st.str());
                 // if (logger_)
                 //     logger_->d(msg->info_hash, node->id, "[node %s] got 'get' request for %s", node->toString().c_str(), msg->info_hash.toString().c_str());
                 ++in_stats.get;
@@ -632,6 +695,12 @@ NetworkEngine::process(std::unique_ptr<ParsedMessage>&& msg, const SockAddr& fro
                 break;
             }
             case MessageType::AnnounceValue: {
+                
+                std::stringstream st;
+                st << "[NE " << this << "] GOT ANNOUNCE TO " << msg->info_hash << "  my: " << myid << ")";
+                traceCache(st.str());
+
+
                 if (logIncoming_ and logger_)
                     logger_->d(msg->info_hash, node->id, "[node %s] got 'put' request for %s", node->toString().c_str(), msg->info_hash.toString().c_str());
                 ++in_stats.put;
@@ -877,6 +946,9 @@ SockAddr deserializeIPv6(const uint8_t* ni) {
 void
 NetworkEngine::deserializeNodes(ParsedMessage& msg, const SockAddr& from) {
     if (msg.nodes4_raw.size() % NODE4_INFO_BUF_LEN != 0 || msg.nodes6_raw.size() % NODE6_INFO_BUF_LEN != 0) {
+        std::stringstream st;
+        st << "[NE " << this << "] WRRRROOOOONG my: " << myid << ")";
+        traceCache(st.str());
         throw DhtProtocolException {DhtProtocolException::WRONG_NODE_INFO_BUF_LEN};
     }
     // deserialize nodes
@@ -892,9 +964,17 @@ NetworkEngine::deserializeNodes(ParsedMessage& msg, const SockAddr& from) {
             addr = from;
             addr.setPort(port);
         }
+        {
+            std::stringstream st;
+            st << "[NE " << this << "] onNewNode msg.nodes4.back() TEST (" << ni_id  << ") (my: " << myid << ")";
+            traceCache(st.str());
+        }
         if (isMartian(addr) || isNodeBlacklisted(addr))
             continue;
         msg.nodes4.emplace_back(cache.getNode(ni_id, addr, now, false));
+        std::stringstream st;
+        st << "[NE " << this << "] onNewNode msg.nodes4.back() (" << msg.nodes4.back()->getId() << ")";
+        traceCache(st.str());
         onNewNode(msg.nodes4.back(), 0);
     }
     for (unsigned i = 0, n = msg.nodes6_raw.size() / NODE6_INFO_BUF_LEN; i < n; i++) {
@@ -911,6 +991,9 @@ NetworkEngine::deserializeNodes(ParsedMessage& msg, const SockAddr& from) {
         if (isMartian(addr) || isNodeBlacklisted(addr))
             continue;
         msg.nodes6.emplace_back(cache.getNode(ni_id, addr, now, false));
+        std::stringstream st;
+        st << "[NE " << this << "] onNewNode msg.nodes6.back() (" << msg.nodes6.back()->getId() << ")";
+        traceCache(st.str());
         onNewNode(msg.nodes6.back(), 0);
     }
 }
diff --git a/src/node_cache.cpp b/src/node_cache.cpp
index dc25b38..85d29e4 100644
--- a/src/node_cache.cpp
+++ b/src/node_cache.cpp
@@ -137,8 +137,12 @@ NodeCache::NodeMap::clearBadNodes() {
 void
 NodeCache::NodeMap::setExpired() {
     for (auto& wn : *this)
-        if (auto n = wn.second.lock())
+        if (auto n = wn.second.lock()) {
+            std::stringstream st;
+            st << "[dht " << this << "] NodeCache::NodeMap::setExpired set node (" << n->getId() << ") expired\n";
+            traceCache(st.str());
             n->setExpired();
+        }
     clear();
     cleanup_counter = 0;
 }
diff --git a/src/op_cache.cpp b/src/op_cache.cpp
index 6c6ebb7..a6e3ba0 100644
--- a/src/op_cache.cpp
+++ b/src/op_cache.cpp
@@ -78,21 +78,31 @@ OpValueCache::onValuesExpired(const std::vector<Value::Id>& vids, const system_c
 }
 
 std::vector<Sp<Value>>
-OpValueCache::get(const Value::Filter& filter) const {
+OpValueCache::get(const Value::Filter& filter, bool log) const {
     std::vector<Sp<Value>> ret;
     if (not filter)
         ret.reserve(values.size());
     for (const auto& v : values)
         if (not filter or filter(*v.second.data))
             ret.emplace_back(v.second.data);
+    if (log) {
+        std::stringstream st;
+        st << "[OpValueCache " << this << "] OpValueCache for " << FOLLOW_HASH << ", get, nbValues " << ret << ", nodes " << nodes << ", total val " << values.size() << ", synced " << syncedNodes;
+        traceCache(st.str());
+    }
     return ret;
 }
 
 Sp<Value>
-OpValueCache::get(Value::Id id) const {
+OpValueCache::get(Value::Id id, bool log) const {
     auto v = values.find(id);
     if (v == values.end())
         return {};
+    if (log){
+        std::stringstream st;
+        st << "[OpValueCache " << this << "] OpValueCache for " << FOLLOW_HASH << ", gget value with id " << id << ", nodes " << nodes << ", total val " << values.size() << ", synced " << syncedNodes;
+        traceCache(st.str());
+    }
     return v->second.data;
 }
 
@@ -169,7 +179,7 @@ SearchCache::getOp(const Sp<Query>& q) const
 }
 
 size_t
-SearchCache::listen(const ValueCallback& get_cb, const Sp<Query>& q, const Value::Filter& filter, const OnListen& onListen)
+SearchCache::listen(const ValueCallback& get_cb, const Sp<Query>& q, const Value::Filter& filter, const OnListen& onListen, bool log)
 {
     // find exact match
     auto op = getOp(q);
@@ -178,6 +188,11 @@ SearchCache::listen(const ValueCallback& get_cb, const Sp<Query>& q, const Value
         op = ops.emplace(q, std::unique_ptr<OpCache>(new OpCache)).first;
         auto& cache = *op->second;
         cache.searchToken = onListen(q, [&](const std::vector<Sp<Value>>& values, bool expired){
+            if (log){
+                std::stringstream st;
+                st << "[SearchCache " << this << "]  new values for " << FOLLOW_HASH << ", size: " << values.size();
+                traceCache(st.str());
+            }
             return cache.onValue(values, expired);
         }, [&](ListenSyncStatus status) {
             cache.onNodeChanged(status);
@@ -230,12 +245,17 @@ SearchCache::expire(const time_point& now, const std::function<void(size_t)>& on
 }
 
 bool
-SearchCache::get(const Value::Filter& f, const Sp<Query>& q, const GetCallback& gcb, const DoneCallback& dcb) const
+SearchCache::get(const Value::Filter& f, const Sp<Query>& q, const GetCallback& gcb, const DoneCallback& dcb, bool log) const
 {
     auto op = getOp(q);
     if (op != ops.end()) {
-        auto vals = op->second->get(f);
+        auto vals = op->second->get(f, log);
         if ((not vals.empty() and not gcb(vals)) or op->second->isSynced()) {
+            if (log){
+                std::stringstream st;
+                st << "[SearchCache " << this << "] call done cb for " << FOLLOW_HASH ;
+                traceCache(st.str());
+            }
             dcb(true, {});
             return true;
         }
@@ -244,12 +264,12 @@ SearchCache::get(const Value::Filter& f, const Sp<Query>& q, const GetCallback&
 }
 
 std::vector<Sp<Value>>
-SearchCache::get(const Value::Filter& filter) const {
+SearchCache::get(const Value::Filter& filter, bool log) const {
     if (ops.size() == 1)
-        return ops.begin()->second->get(filter);
+        return ops.begin()->second->get(filter, log);
     std::map<Value::Id, Sp<Value>> c;
     for (const auto& op : ops) {
-        for (const auto& v : op.second->get(filter))
+        for (const auto& v : op.second->get(filter, log))
             c.emplace(v->id, v);
     }
     std::vector<Sp<Value>> ret;
@@ -260,9 +280,9 @@ SearchCache::get(const Value::Filter& filter) const {
 }
 
 Sp<Value>
-SearchCache::get(Value::Id id) const {
+SearchCache::get(Value::Id id, bool log) const {
     for (const auto& op : ops)
-        if (auto v = op.second->get(id))
+        if (auto v = op.second->get(id, log))
             return v;
     return {};
 }
diff --git a/src/op_cache.h b/src/op_cache.h
index 5166815..9d773c9 100644
--- a/src/op_cache.h
+++ b/src/op_cache.h
@@ -71,8 +71,8 @@ public:
 
     bool isSynced() const { return nodes > 0 and syncedNodes == nodes; }
 
-    std::vector<Sp<Value>> get(const Value::Filter& filter) const;
-    Sp<Value> get(Value::Id id) const;
+    std::vector<Sp<Value>> get(const Value::Filter& filter, bool log = false) const;
+    Sp<Value> get(Value::Id id, bool log = false) const;
     std::vector<Sp<Value>> getValues() const;
 
 private:
@@ -128,12 +128,12 @@ public:
         return listeners.empty();
     }
 
-    std::vector<Sp<Value>> get(const Value::Filter& filter) const {
-        return cache.get(filter);
+    std::vector<Sp<Value>> get(const Value::Filter& filter, bool log = false) const {
+        return cache.get(filter, log);
     }
 
-    Sp<Value> get(Value::Id id) const {
-        return cache.get(id);
+    Sp<Value> get(Value::Id id, bool log = false) const {
+        return cache.get(id, log);
     }
 
     bool isSynced() const {
@@ -162,7 +162,7 @@ public:
     SearchCache(SearchCache&&) = default;
 
     using OnListen = std::function<size_t(Sp<Query>, ValueCallback, SyncCallback)>;
-    size_t listen(const ValueCallback& get_cb, const Sp<Query>& q, const Value::Filter& filter, const OnListen& onListen);
+    size_t listen(const ValueCallback& get_cb, const Sp<Query>& q, const Value::Filter& filter, const OnListen& onListen, bool log = false);
 
     bool cancelListen(size_t gtoken, const time_point& now);
     void cancelAll(const std::function<void(size_t)>& onCancel);
@@ -172,9 +172,9 @@ public:
         return nextExpiration_;
     }
 
-    bool get(const Value::Filter& f, const Sp<Query>& q, const GetCallback& gcb, const DoneCallback& dcb) const;
-    std::vector<Sp<Value>> get(const Value::Filter& filter) const;
-    Sp<Value> get(Value::Id id) const;
+    bool get(const Value::Filter& f, const Sp<Query>& q, const GetCallback& gcb, const DoneCallback& dcb, bool log = false) const;
+    std::vector<Sp<Value>> get(const Value::Filter& filter, bool log = false) const;
+    Sp<Value> get(Value::Id id, bool log = false) const;
 
 private:
     SearchCache(const SearchCache&) = delete;
diff --git a/src/routing_table.cpp b/src/routing_table.cpp
index e8b9ea6..9459f9f 100644
--- a/src/routing_table.cpp
+++ b/src/routing_table.cpp
@@ -106,7 +106,7 @@ RoutingTable::depth(const RoutingTable::const_iterator& it) const
 }
 
 std::vector<Sp<Node>>
-RoutingTable::findClosestNodes(const InfoHash id, time_point now, size_t count) const
+RoutingTable::findClosestNodes(const InfoHash id, time_point now, size_t count, bool needsLog) const
 {
     std::vector<Sp<Node>> nodes;
     nodes.reserve(count);
@@ -116,18 +116,39 @@ RoutingTable::findClosestNodes(const InfoHash id, time_point now, size_t count)
 
     auto sortedBucketInsert = [&](const Bucket &b) {
         for (auto n : b.nodes) {
+            /**/
             if (not n->isGood(now))
                 continue;
+            /**/
 
             auto here = std::find_if(nodes.begin(), nodes.end(),
                 [&id,&n](Sp<Node> &node) {
                     return id.xorCmp(n->id, node->id) < 0;
                 }
             );
+            /** /
+            std::stringstream st;
+            st << "====>" << needsLog << std::endl; 
+            if (true) {
+                std::string hereid = here == nodes.end()? "end" : (*here)->id.toString();
+                st << "Insert " << n->id << " in: ";
+                for (const auto& node: nodes)
+                    st << node->getId() << ",";
+                st << " - At: " << hereid << std::endl;
+            }
+            traceCache(st.str());
+            /**/
             nodes.insert(here, n);
         }
     };
 
+    /**/
+    auto b = begin();
+    while (b != end()) {
+        sortedBucketInsert(*b);
+        b = std::next(b);
+    }
+    /** /
     auto itn = bucket;
     auto itp = (bucket == begin()) ? end() : std::prev(bucket);
     while (nodes.size() < count && (itn != end() || itp != end())) {
@@ -140,6 +161,7 @@ RoutingTable::findClosestNodes(const InfoHash id, time_point now, size_t count)
             itp = (itp == begin()) ? end() : std::prev(itp);
         }
     }
+    /**/
 
     // shrink to the count closest nodes.
     if (nodes.size() > count) {
@@ -202,15 +224,37 @@ RoutingTable::split(const RoutingTable::iterator& b)
 
 bool
 RoutingTable::onNewNode(const Sp<Node>& node, int confirm, const time_point& now, const InfoHash& myid, net::NetworkEngine& ne) {
+    std::stringstream st;
+    st << "[rt " << this << "] onNewNode node (" << node->getId() << ")";
     auto b = findBucket(node->id);
-    if (b == end()) return false;
+    if (b == end()) {
+        /**/
+        printf("@@@@@@@@@@@!!!!\n");
+        return false;
+        /** /
+        insert(b, Bucket {b->af, node->id, now});
+        st << "[rt " << this << "] onNewNode node (" << node->getId() << ") => insert";
+        traceCache(st.str());
+        return true;
+        /**/
+    }
 
     if (confirm == 2)
         b->time = now;
 
     for (auto& n : b->nodes) {
-        if (n == node)
+        if (n == node) {
+            st << "[rt " << this << "] onNewNode node (" << node->getId() << ") => found";
+            traceCache(st.str());
+
+
+            b->sendCachedPing(ne);
+
+
+
+
             return false;
+        }
     }
 
     bool mybucket = contains(b, myid);
@@ -224,6 +268,8 @@ RoutingTable::onNewNode(const Sp<Node>& node, int confirm, const time_point& now
         for (auto& n : b->nodes)
             if (n->isExpired()) {
                 n = node;
+                st << "[rt " << this << "] onNewNode node (" << node->getId() << ") => replace exp";
+                traceCache(st.str());
                 return true;
             }
         /* Bucket full.  Ping a dubious node */
@@ -243,12 +289,24 @@ RoutingTable::onNewNode(const Sp<Node>& node, int confirm, const time_point& now
             }
         }
 
+        /** /
+        if (depth(b) < 6) {
+        /**/
         if ((mybucket || (is_client and depth(b) < 6)) && (!dubious || size() == 1)) {
+        /**/
             //DHT_LOG.d("Splitting from depth %u", depth(b));
             b->sendCachedPing(ne);
             split(b);
+            st << "[rt " << this << "] onNewNode node (" << node->getId() << ") => split";
+            traceCache(st.str());
             return onNewNode(node, confirm, now, myid, ne);
         }
+        /**/ else {
+
+            st << "[rt " << this << "] onNewNode node (" << node->getId() << ") => no space (" << (bool)mybucket << " or " << (bool)((is_client and depth(b) < 6)) << ") && (" << !dubious << " || " << (size() == 1) << ")";
+            traceCache(st.str());
+        }
+        /**/
 
         /* No space for this node.  Cache it away for later. */
         if (confirm or not b->cached)
@@ -256,7 +314,10 @@ RoutingTable::onNewNode(const Sp<Node>& node, int confirm, const time_point& now
     } else {
         /* Create a new node. */
         b->nodes.emplace_front(node);
+        st << "[rt " << this << "] onNewNode node (" << node->getId() << ") => create";
+        traceCache(st.str());
     }
+
     return true;
 }
 
diff --git a/src/search.h b/src/search.h
index b7a5ffc..bf507b6 100644
--- a/src/search.h
+++ b/src/search.h
@@ -162,8 +162,14 @@ struct Dht::SearchNode {
             }
         }
 
-        return (not pending and now > last_get_reply + Node::NODE_EXPIRE_TIME) or
+        auto res = (not pending and now > last_get_reply + Node::NODE_EXPIRE_TIME) or
                 not (completed_sq_status or pending_sq_status or hasStartedPagination(q));
+        if (!res) {
+            std::stringstream st;
+            st << "[NODE " << node->getId() << "] CANNOT GET NOW";
+            traceCache(st.str());
+        }
+        return res;
     }
 
     /**
@@ -495,9 +501,9 @@ struct Dht::Search {
     bool isAnnounced(Value::Id id) const;
     bool isListening(time_point now, duration exp) const;
 
-    void get(const Value::Filter& f, const Sp<Query>& q, const QueryCallback& qcb, const GetCallback& gcb, const DoneCallback& dcb, Scheduler& scheduler) {
+    void get(const Value::Filter& f, const Sp<Query>& q, const QueryCallback& qcb, const GetCallback& gcb, const DoneCallback& dcb, Scheduler& scheduler, bool log) {
         if (gcb or qcb) {
-            if (not cache.get(f, q, gcb, dcb)) {
+            if (not cache.get(f, q, gcb, dcb, log)) {
                 const auto& now = scheduler.time();
                 callbacks.emplace(now, Get { now, f, q, qcb, gcb, dcb });
                 scheduler.edit(nextSearchStep, now);
@@ -505,7 +511,7 @@ struct Dht::Search {
         }
     }
 
-    size_t listen(const ValueCallback& cb, const Value::Filter& f, const Sp<Query>& q, Scheduler& scheduler) {
+    size_t listen(const ValueCallback& cb, const Value::Filter& f, const Sp<Query>& q, Scheduler& scheduler, bool log) {
         //DHT_LOG.e(id, "[search %s IPv%c] listen", id.toString().c_str(), (af == AF_INET) ? '4' : '6');
         return cache.listen(cb, q, f, [&](const Sp<Query>& q, ValueCallback vcb, SyncCallback scb){
             done = false;
@@ -513,7 +519,7 @@ struct Dht::Search {
             listeners.emplace(token, SearchListener{q, vcb, scb});
             scheduler.edit(nextSearchStep, scheduler.time());
             return token;
-        });
+        }, log);
     }
 
     void cancelListen(size_t token, Scheduler& scheduler) {
diff --git a/tools/dhtnode.cpp b/tools/dhtnode.cpp
index 8b8adb7..4dd6681 100644
--- a/tools/dhtnode.cpp
+++ b/tools/dhtnode.cpp
@@ -130,8 +130,10 @@ void cmd_loop(std::shared_ptr<DhtRunner>& node, dht_params& params
     {
         // using the GNU Readline API
         std::string line = readLine();
-        if (!line.empty() && line[0] == '\0')
-            break;
+        if (!line.empty() && line[0] == '\0') {
+            std::this_thread::sleep_for(std::chrono::seconds(1));
+            continue;
+        }
 
         std::istringstream iss(line);
         std::string op, idstr, value, index, keystr, pushServer, deviceKey;
diff --git a/tools/neighbors.html b/tools/neighbors.html
new file mode 100644
index 0000000..782bcb0
--- /dev/null
+++ b/tools/neighbors.html
@@ -0,0 +1,167 @@
+<html>
+<meta charset="UTF-8">
+
+
+<div id="fileContent"></div>
+
+<script>
+
+// FOR adbc8d63ce9908785979985c643e6a9f86001913 NEW CODE
+RESULT = `003107d61617fd6d5512768c3705cf176e5b628f:3d59fa21139adcbad1996b22c03b90bb14e7915d:get,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,2f93422a815c95215ca911ad3d9986c501468aba,
+00a103778e660ed5b5af979411506aa93a5ee8dc:3dc9fe808beb2f0231248a3ae66e350540e21b0e:put,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,11f0c78bda52f0cae8932991b7079eb1ad41848c,
+075357ddb3a1afba1b1dece14d702ff7f7f63e40:3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,11f0c78bda52f0cae8932991b7079eb1ad41848c,
+0b05d279c78c8b2e43f31d24548444fbde4ed79f:366d2f8ec201aaf9c778008aa3ba1b57a4f2244d:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,2f93422a815c95215ca911ad3d9986c501468aba,
+0dc0aef5888fa228cbd458848327d6c9b279a48c:30a853028d0283ff4f5f452a74198965c8c5575e:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,2f93422a815c95215ca911ad3d9986c501468aba,
+0ee9d4553d057cf14c92117466467ddddc5ccda7:338129a238885d26c8190cda91782271a6e03e75:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,11f0c78bda52f0cae8932991b7079eb1ad41848c,
+10b4122db50a5bf1df566ea0bed5f3e1ab8f7bf2:2ddcefdab0877a265bdd730e49ebac4dd1338820:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,2f93422a815c95215ca911ad3d9986c501468aba,
+11e7e22194069f99c3250d0e3c3d6b9ce07b872b:2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2f93422a815c95215ca911ad3d9986c501468aba,
+12fbbfdd84d1b4f6d8220c03caa7d9697bfa7968:2f93422a815c95215ca911ad3d9986c501468aba:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,11f0c78bda52f0cae8932991b7079eb1ad41848c,
+147e042fd7f137f3d2df55119bdb61a0b45e7a0a:2916f9d8d27c1624565448bf6ce53e0ccee289d8:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+15161dcf68b27e971ee22943e3316b9c2c6a56bb:287ee0386d3f5f409a6934ed140f343056d6a569:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+154b836dd871a7ebc9052750fb73312169003dfb:28237e9addfc863c4d8e3afe0c4d6e8d13bcce29:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,11f0c78bda52f0cae8932991b7079eb1ad41848c,
+1b23e9d2269a8a24d3552d34e9fcf7cafcca965e:264b14252317abf357de309a1ec2a8668676658c:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+207986d5f5a2c575711095f0080902c946d9ada6:1d117b22f02fe4a2f59b885eff375d653c655e74:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,11f0c78bda52f0cae8932991b7079eb1ad41848c,
+23ad616945261058bbc62218a4d008208a2e212e:1ec59c9e40ab318f3f4d3fb653ee578cf092d2fc:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+27a9dc137560f16e89471256e00b6f2c5db6a7e0:1ac121e470edd0b90dcc0ff817353080270a5432:put,03421c310c9819c1404aa0452fd24427976c0956,
+28fd47a804f509c74b36a984b9fc255c499ef1a8:1595ba5f01782810cfbdb42a4ec27af03322027a:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,11f0c78bda52f0cae8932991b7079eb1ad41848c,
+2c983a7cdfdfd11d6c18343f4039c11dd7fd775e:11f0c78bda52f0cae8932991b7079eb1ad41848c:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,
+325f02c27ad7e02d46babca2cf0b423e499e9598:0f37ff357f5ac1fac231a10c38351d923322664a:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+337e49eeb42840b7edd3b4e645d104e3cc418562:0e16b419b1a561606958a948b2ef5b4fb6fd76b0:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,
+3614912dad42c34471e0b8077a4e96fd827ffd46:0b7c6cdaa8cfe293f56ba5a98d70c951f8c30e94:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,
+3be558dc41ad9d113ef63f7e2ae20b79323bb52f:068da52b4420bcc6ba7d22d0dddc54d5488746fd:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+3f97644ac8bfee7e610d29fd5dabe773fc22f167:02ff99bdcd32cfa9e5863453aa95b8df869e02b5:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,
+400203ad174967839660404715b753a79220ad12:7d6afe5a12c4465412eb5de9e2890c0be89c5ec0:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+42934342a73f84bc1b59868efbf9d54beb721ddc:7ffbbeb5a2b2a56b9fd29b200cc78ae791ceee0e:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,
+470eb9cbbb23010b66e8012625aa2441a797510f:7a66443cbeae20dce2631c88d2947beddd2ba2dd:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+487c5703c0703ebcd626d9d14a00d3f696a3caba:7514aaf4c5fd1f6b52adc47fbd3e8c5aec1f3968:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,
+48caa501b0247f22de5505015e24af33729868d1:75a258f6b5a95ef55ade18afa91af09f08249b03:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,
+4b607f2b5babd44fc4686d7f91abb26f68013080:760882dc5e26f59840e370d16695edc312bdc352:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+4d834d8d823cdaae7fd1dbe272c29f32b74e0f77:70ebb07a87b1fb79fb5ac64c85fcc09ecdf2fca5:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,
+50e2c750cf9f3995dbc795a06628e50d54df2717:6d8a3aa7ca1218425f4c880e9116baa12e63d4c5:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+52831dabf8ef2b350d31756050cffed92eb80ac1:6febe05cfd620ae289ba68cea7f1a1755404f913:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+541adc49dbe41de43981558080627fceec5eed2e:697221bede693c33bd0a482e775c206296e21efc:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+558aa07922dbeee37ecb077725434cf774970f10:68e25d8e2756cf34fa401ad9d27d135b0e2bfcc2:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2f93422a815c95215ca911ad3d9986c501468aba,
+5646e84bf51b5aa5ad3aedb067847805c330efa4:6b2e15bcf0967b7229b1f01e90ba27a9b98c1c76:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,
+5696028ae209f9d1603f0a60bb246766f43ed119:6bfeff7de784d806e4b417ce4c1a38ca8e8222cb:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,11f0c78bda52f0cae8932991b7079eb1ad41848c,
+5f06dc64d78e4cadb06427aa9c887fd73bddc36f:626e2193d2036d7a34ef3a046bb6207b416130bd:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+623bc0bddf5772e359e71a8ec771652c5babcefe:5f533d4adada5334dd6c0720304f3a8021173d2c:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,
+644e6a0a4abbb7f31a2f8d7e265dff16f531bac4:592697fd4f3696249ea490d0d163a0ba8f8d4916:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,
+663a1dcc046db334b51b823893d24f689d9df2c1:5b52e03b01e092e331909f9664ec10c4e7210113:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+66e4206797daf0d8e7661fdd7f537d369831fbcf:5b8cdd909257d10f63ed0273886d229ae28d081d:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+6a3497e7292338118d876957b0f8bc178ba57068:575c6a102cae19c6090c74f947c6e3bbf11983ba:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2f93422a815c95215ca911ad3d9986c501468aba,
+6b80976f55bcd1085a26da933887c6db20f2856f:56e86a985031f0dfdeadc73dcfb999775a4e76bd:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,
+6b9e93b32e1f4cab0d57e721a843c69cf943d9f9:56f66e442b926d7c89dcfa8f5f7d993083ff2a2b:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,
+6d8b1cb9f588d0e9f06ebd12d6e5b3551ee0bcd3:50e3e14ef005f13e74e5a0bc21dbecf9645c4f01:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,11f0c78bda52f0cae8932991b7079eb1ad41848c,0b7c6cdaa8cfe293f56ba5a98d70c951f8c30e94,
+6dc4d804692881890c43256283cb403dc3dd8eda:50ac25f36ca5a05e88c838cc74f51f91b9617d08:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,
+6f47f88c9bc0d00e0a6e52477aff23b212070d32:522f057b9e4df1d98ee54fe98dc17c1e68bbfee0:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,
+72691cc539194398ccab54ac1abff82280caac42:4f01e1323c94624f48204902ed81a78efa765f90:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,
+7356f6f43878d42d72a8bf52071523d3ff738598:4e3e0b033df5f5faf623a2fcf02b7c7f85cf764a:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,
+738023af49ac5ebb2b9f4a3c0e2e9a3cc8b1a75d:4ee8de584c217f6caf145792f910c590b20d548f:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+77791a5a06f6ea683c22d9a6cca8bdb800d2198e:4a11e7ad037bcbbfb8a9c4083b96e2147a6eea5c:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+7d0d6afaa005026243eca9c091f6df8ba2b72866:4065970da58823b5c767b46e66c88027d80bdbb4:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+7fae308e6ab4cafaa5abc73555d2d6e66ac22856:42c6cd796f39eb2d2120da9ba2ec894a107edb84:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+80fc1d0739f6e76eb0725fc4843033da528a9d7a:bd94e0f03c7bc6b934f9426a730e6c7628366ea8:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,
+8149ce3f35606d74cfe99b52d05e1d3a4309c57c:bc2133c830ed4ca34b6286fc2760429639b536ae:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+8235f38606bb4756d6f8116fd4917d949c69fd3b:bf5d0e710336668152730cc123af2238e6d50ee9:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+82a542e6bbcf5518d2c51cecbb82404140fef706:bfcdbf11be4274cf564e01424cbc1fed3a4204d4:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+842e50058a589ce909c97c415cbec60797a4b675:b946adf28fd5bd3e8d4261efab8099abed1845a7:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,
+86aeccadee5d3985194c6be895a95afe2b9fb766:bbc6315aebd018529dc7764662970552512344b4:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,
+8cef044163ec8cbef844f86159097239e49304bc:b187f9b66661ad697ccfe5cfae372d959e2ff76e:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+8f9ce74c507018e311141e679c35174221d0e17f:b2f41abb55fd3934959f03c96b0b48ee5b6c12ad:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+9096e2494d13a62b73ab8361d5a7d7db615c979c:adfe1fbe489e87fcf7209ecf229988771be0644e:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2f93422a815c95215ca911ad3d9986c501468aba,
+99fd25dd0f0f2db5c2c59a89ac77ed81a96d1603:a495d82a0a820c62464e87275b49b22dd3d1e5d1:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+9f959feb5f2fb4e4f29801952f9791ecba5b9326:a2fd621c5aa2953376131c3bd8a9ce40c0e760f4:put,03421c310c9819c1404aa0452fd24427976c0956,
+a28cc98ec499b4c8242eed6b982fda121254bd94:9fe43479c114951fa0a5f0c56f1185be68e84e46:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,
+a3420f58890667fa1d52cea3043cf7bc815f7d25:9e2af2af8c8b462d99d9d30df302a810fbe38ef7:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,
+a7b619a2add7c02b13329fc3dd4e7a3dc5258048:9adee455a85ae1fc97b9826d2a702591bf99739a:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,
+a8b9216384384e6f3bd130a2c4fec4b40c97cbcc:95d1dc9481b56fb8bf5a2d0c33c09b18762b381e:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,
+a9641a92ef5565ff360473e902b1848c0417b662:940ce765ead84428b28f6e47f58fdb207eab45b0:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,
+aac84e3bbebe52794ed5f3160b5b4aa0ad93460e:97a0b3ccbb3373aeca5eeeb8fc65150cd72fb5dc:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,
+b188533b293124cf3377c9fc66174b698a6352ac:8ce0aecc2cbc0518b7fcd452912914c5f0dfa17e:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+b38e7b537ecc130c08d924ac3a1bbb991c038a17:8ee686a47b4132db8c523902cd25e43566bf79c5:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+b546baa9a3881ff6d6912185346845706bcc452d:882e475ea6053e21521a3c2bc3561adc1170b6ff:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,
+b750e726e2f557ace4462ba3e55f7cc59c187299:8a381ad1e778767b60cd360d12612369e6a4814b:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+b8ac3a2774f1e328ce09415d1ca84f53888f64c7:85c4c7d0717cc2ff4a825cf3eb9610fff2339715:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,
+b962949cb92d2ddcaff9300f8915c933602a1628:840a696bbca00c0b2b722da17e2b969f1a96e5fa:put,03421c310c9819c1404aa0452fd24427976c0956,
+bb1fa3fc40ffd8d719a67ce1f70ef30acc48573c:86775e0b4572f9009d2d614f0030aca6b6f4a4ee:put,03421c310c9819c1404aa0452fd24427976c0956,
+bf256d28c40ec4e9383473e90d0814a737a003e2:824d90dfc183e53ebcbf6e47fa364b0b4d1cf030:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,
+c22652b68706660e433af52b049f69362d4493db:ff4eaf41828b47d9c7b1e885f3a1369a57f86009:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+c5ba1a39ca1fea2a605605502486237101da9604:f8d2e7cecf92cbfde4dd18fed3b87cdd7b6665d6:put,03421c310c9819c1404aa0452fd24427976c0956,
+c9fde0ee622a2cbf7e72b13f3d8474e318e6b9ca:f4951d1967a70d68faf9ac91caba2b4f625a4a18:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2f93422a815c95215ca911ad3d9986c501468aba,
+ccf40296dc18003f83d00f151654fd6a1a44c6c1:f19cff61d99521e8075b12bbe16aa2c660f83513:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,
+cd062735b94be9dddfc3d92af10f5a5b698796ff:f06edac2bcc6c80a5b48c484063105f7133b652d:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+cf40e704e54741abebd480f944bbfcaafc7e1f0e:f2281af3e0ca607c6f5f9d57b385a30686c2ecdc:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2f93422a815c95215ca911ad3d9986c501468aba,
+cfbc7734a69e6d4805dcae1990a1bfd69b987699:f2d48ac3a3134c9f8157b3b7679fe07ae124854b:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+d2432b1a3a925a00a303c193a42f1f9ef61cd1d5:ef2bd6ed3f1f7bd72788dc3d531140328ca02207:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,
+d34fb8ffcdd74977feab13274f53061081b4d374:ee274508c85a68a07a200e89b86d59bcfb0820a6:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+dba6a31fdf3a017e157f8ecd4b260be2ec1c9073:e6ce5ee8dab720a991f49363bc18544e96a063a1:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+dd20edbe95990f319327ace47621e95c3411608f:e048104990142ee617acb14a811fb6f04ead935d:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,
+dd9efabc6487f44fd07b3697880a3dfd99032637:e0f6074b610ad59854f02b397f346251e3bfd5e5:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+e44bb824f826991042a03545d448ddcc36c5956a:d92345d3fdabb8c7c62b28eb237682604c7966b8:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+e52c8011dbcc8d002afe988aadc248c24b67c779:d8447de6de41acd7ae7585245afc176e31db34ab:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,
+e5509a7b8efa9904c54ed18da445724b31754480:d838678c8b77b8d341c5cc23537b2de74bc9b752:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+e9712eef31df68473ccea48a0876f4667f041fb8:d419d31834524990b845b924ff48abca05b8ec6a:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+ec3753850b106c3d7f5b76b9ae9ffd3aa04f600b:d15fae720e9d4deafbd06b1759a1a296daf393d9:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,
+ecf7775a6d060c01ca65d75b42cfbcdd4a39b972:d19f8aad688b2dd64eeecaf5b5f1e37130854aa0:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,
+ef58227122448f07952a8ad60ff61aa1e5e0a8eb:d230df8627c9aed011a19778f8c8450d9f5c5b39:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+f2a9045d0e82533c342e6e7f27caa829de4217dc:cfc1f9aa0b0f72ebb0a573d1d0f4f785a4fee40e:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+f4efe0c8ed46bc3e63fae7127e79ad6dc1356290:c9871d3fe8cb9de9e771fabc8947f2c1bb899142:put,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,338129a238885d26c8190cda91782271a6e03e75,2f93422a815c95215ca911ad3d9986c501468aba,28237e9addfc863c4d8e3afe0c4d6e8d13bcce29,1d117b22f02fe4a2f59b885eff375d653c655e74,1ac121e470edd0b90dcc0ff817353080270a5432,1595ba5f01782810cfbdb42a4ec27af03322027a,
+f5c7b4325474e84f8431a22e640b3f94586a55df:c8af49c551f9c99800babf809335603822d6a60d:get,3d59fa21139adcbad1996b22c03b90bb14e7915d,3dc9fe808beb2f0231248a3ae66e350540e21b0e,3a3baa2ab62c8e6d9f96f14fba4e705b8d4acd92,366d2f8ec201aaf9c778008aa3ba1b57a4f2244d,30a853028d0283ff4f5f452a74198965c8c5575e,338129a238885d26c8190cda91782271a6e03e75,2ddcefdab0877a265bdd730e49ebac4dd1338820,2c8f1fd6918bbe4e47ae10a0cb0334309ac774f9,
+`
+
+RESULT = RESULT.split("\n");
+var nodes = {};
+for (var i = 0; i < RESULT.length; ++i) {
+    const line = RESULT[i];
+    if (line === "")
+        continue;
+    var splitted = line.split(":");
+    if (splitted.length == 3) {
+        nodes[splitted[1]] = splitted[2].split(",")
+    }
+}
+
+function displayContents(nodes) {
+    var result = "";
+    var element = document.getElementById('fileContent');
+    for (const node in nodes) {
+        var nodeDiv = document.createElement("div");
+        nodeDiv.id = node;
+        nodeDiv.innerText = node;
+        nodeDiv.onmouseover = function(){
+            document.getElementById(node).style.color = "red";
+            var nb = nodes[node];
+            var color = "blue";
+            if (nb[0] == "put") {
+                color = "green";
+            }
+            for (var i = 0; i < nb.length; ++i) {
+                if (nb[i] === "")
+                    continue;
+                try {
+                    document.getElementById(nb[i]).style.color = color;
+                } catch {
+
+                }
+            }
+        };
+        nodeDiv.onmouseout = function(){
+            document.getElementById(node).style.color = "black";
+            var nb = nodes[node];
+            for (var i = 0; i < nb.length; ++i) {
+                if (nb[i] === "")
+                    continue;
+                try {
+                    document.getElementById(nb[i]).style.color = "black";
+                } catch {
+                    
+                }
+            }
+        };
+        element.appendChild(nodeDiv);
+    }
+}
+
+displayContents(nodes);
+</script>
+</html>
\ No newline at end of file
diff --git a/tools/testgetput.sh b/tools/testgetput.sh
new file mode 100755
index 0000000..6202ec6
--- /dev/null
+++ b/tools/testgetput.sh
@@ -0,0 +1,240 @@
+#!/bin/bash
+
+NB_NODES=100
+rm -rf /tmp/*.trace
+HASH=$(cat /dev/urandom | tr -dc 'a-f0-9' | fold -w 40 | head -n 1)
+
+pids=()
+rm -rf input_*
+
+(TRACE_HASH=${HASH} ./tools/dhtnode -p5000)&
+bid=$!
+
+for num in {1..100}
+do
+  mkfifo input_${num}
+  (TRACE_HASH=${HASH} ./tools/dhtnode -b 127.0.0.1:5000 < input_${num})&
+  pi=$!
+  echo "Launching dhtnode with $pi, trace $HASH"
+  pids+=($pi)
+done
+
+echo "Wait for put (11 min to get a similar routing table)"
+sleep 660
+
+for num in {1..50}
+do
+  echo "Put with $num"
+  echo "p ${HASH} ${num}" > input_${num}
+done
+
+echo "Wait for get (1 min)"
+sleep 60
+
+for num in {51..100}
+do
+  echo "Get with $num"
+  echo "g ${HASH}" > input_${num}
+done
+
+echo "Wait to finish all get"
+sleep 20
+
+for pi in "${pids[@]}"
+do
+  kill -9 ${pi}
+done
+kill -9 ${bid}
+
+rm -rf output output_sorted
+for f in /tmp/*.trace;
+do
+    grep "###" $f | tail -n 1 | sed --expression 's/###//g' >> output
+done
+
+cat output | sort > output_sorted
+
+
+vscodium output_sorted
+
+# TODO clean ugly duplicated code
+
+max_diff="0"
+max_f1=""
+max_f2=""
+for f in /tmp/*.trace;
+do
+    cat $f | grep -E 'GET|PUT' /etc/passwd | grep "node" | awk '{print substr($(NF-3), 2, 40)}' | sort > nodes_f1
+    for f2 in /tmp/*.trace;
+    do
+        if [ "$f" != "$f2" ]; then
+            # TODO not performant as checked two times
+            cat $f2 | grep "node" | awk '{print substr($(NF-3), 2, 40)}' | sort > nodes_f2
+            d=$(comm -13 nodes_f1 nodes_f2 | wc -l)
+            if [[ "$d" -gt "$max_diff" ]]; then
+                max_diff=$d
+                max_f1=$f
+                max_f2=$f2
+            fi
+        fi
+    done
+done
+
+echo "Max diff total with $max_diff diff nodes is between $max_f1 and $max_f2"
+
+max_diff="0"
+max_f1=""
+max_f2=""
+for f in /tmp/*.trace;
+do
+    cat $f | grep "PUTv6 " | grep "node" | awk '{print substr($(NF-3), 2, 40)}' | sort > nodes_f1
+    o=$(cat nodes_f1 | wc -l)
+    if [[ "$o" -eq "0" ]]; then
+        continue
+    fi
+    for f2 in /tmp/*.trace;
+    do
+        if [ "$f" != "$f2" ]; then
+            # TODO not performant as checked two times
+            cat $f2 | grep "PUTv6 " | grep "node" | awk '{print substr($(NF-3), 2, 40)}' | sort > nodes_f2
+            o=$(cat nodes_f2 | wc -l)
+            if [[ "$o" -eq "0" ]]; then
+                continue
+            fi
+            d=$(comm -13 nodes_f1 nodes_f2 | wc -l)
+            if [[ "$d" -eq "0" ]]; then
+                continue
+            fi
+            if [[ "$d" -gt "$max_diff" ]]; then
+                max_diff=$d
+                max_f1=$f
+                max_f2=$f2
+            fi
+        fi
+    done
+done
+
+if [[ "$max_diff" -eq "0" ]]; then
+    echo "PUT v6 is fine"
+else
+    echo "Max diff for PUT v6 with $max_diff diff nodes is between $max_f1 and $max_f2"
+fi
+
+max_diff="0"
+max_f1=""
+max_f2=""
+for f in /tmp/*.trace;
+do
+    cat $f | grep "PUT " | grep "node" | awk '{print substr($(NF-3), 2, 40)}' | sort > nodes_f1
+    o=$(cat nodes_f1 | wc -l)
+    if [[ "$o" -eq "0" ]]; then
+        continue
+    fi
+    for f2 in /tmp/*.trace;
+    do
+        if [ "$f" != "$f2" ]; then
+            # TODO not performant as checked two times
+            cat $f2 | grep "PUT " | grep "node" | awk '{print substr($(NF-3), 2, 40)}' | sort > nodes_f2
+            o=$(cat nodes_f2 | wc -l)
+            if [[ "$o" -eq "0" ]]; then
+                continue
+            fi
+            d=$(comm -13 nodes_f1 nodes_f2 | wc -l)
+            if [[ "$d" -eq "0" ]]; then
+                continue
+            fi
+            if [[ "$d" -gt "$max_diff" ]]; then
+                max_diff=$d
+                max_f1=$f
+                max_f2=$f2
+            fi
+        fi
+    done
+done
+
+if [[ "$max_diff" -eq "0" ]]; then
+    echo "PUT v4 is fine"
+else
+    echo "Max diff for PUT v4 with $max_diff diff nodes is between $max_f1 and $max_f2"
+fi
+
+max_diff="0"
+max_f1=""
+max_f2=""
+for f in /tmp/*.trace;
+do
+    cat $f | grep "GETv6 " | grep "node" | awk '{print substr($(NF-3), 2, 40)}' | sort > nodes_f1
+    o=$(cat nodes_f1 | wc -l)
+    if [[ "$o" -eq "0" ]]; then
+        continue
+    fi
+    for f2 in /tmp/*.trace;
+    do
+        if [ "$f" != "$f2" ]; then
+            # TODO not performant as checked two times
+            cat $f2 | grep "GETv6 " | grep "node" | awk '{print substr($(NF-3), 2, 40)}' | sort > nodes_f2
+            o=$(cat nodes_f2 | wc -l)
+            if [[ "$o" -eq "0" ]]; then
+                continue
+            fi
+            d=$(comm -13 nodes_f1 nodes_f2 | wc -l)
+            if [[ "$d" -eq "0" ]]; then
+                continue
+            fi
+            if [[ "$d" -gt "$max_diff" ]]; then
+                max_diff=$d
+                max_f1=$f
+                max_f2=$f2
+            fi
+        fi
+    done
+done
+
+if [[ "$max_diff" -eq "0" ]]; then
+    echo "GET v6 is fine"
+else
+    echo "Max diff for GET v6 with $max_diff diff nodes is between $max_f1 and $max_f2"
+fi
+
+max_diff="0"
+max_f1=""
+max_f2=""
+for f in /tmp/*.trace;
+do
+    cat $f | grep "GET " | grep "node" | awk '{print substr($(NF-3), 2, 40)}' | sort > nodes_f1
+    o=$(cat nodes_f1 | wc -l)
+    if [[ "$o" -eq "0" ]]; then
+        continue
+    fi
+    for f2 in /tmp/*.trace;
+    do
+        if [ "$f" != "$f2" ]; then
+            # TODO not performant as checked two times
+            cat $f2 | grep "GET " | grep "node" | awk '{print substr($(NF-3), 2, 40)}' | sort > nodes_f2
+            o=$(cat nodes_f2 | wc -l)
+            if [[ "$o" -eq "0" ]]; then
+                continue
+            fi
+            d=$(comm -13 nodes_f1 nodes_f2 | wc -l)
+            if [[ "$d" -eq "0" ]]; then
+                continue
+            fi
+            if [[ "$d" -gt "$max_diff" ]]; then
+                max_diff=$d
+                max_f1=$f
+                max_f2=$f2
+            fi
+        fi
+    done
+done
+
+if [[ "$max_diff" -eq "0" ]]; then
+    echo "GET v4 is fine"
+else
+    echo "Max diff for GET v4 with $max_diff diff nodes is between $max_f1 and $max_f2"
+fi
+
+grep "expired: 1" /tmp/*.trace | awk '{print substr($(NF-3), 2, 40)}' | sort | uniq -c
+
+vscodium $max_f1
+vscodium $max_f2
diff --git a/tools/testneighbors.sh b/tools/testneighbors.sh
new file mode 100755
index 0000000..5aaf715
--- /dev/null
+++ b/tools/testneighbors.sh
@@ -0,0 +1,53 @@
+#!/bin/bash
+
+NB_NODES=100
+rm -rf /tmp/*.trace
+HASH=$(cat /dev/urandom | tr -dc 'a-f0-9' | fold -w 40 | head -n 1)
+
+pids=()
+rm -rf input_*
+
+(TRACE_HASH=${HASH} ./tools/dhtnode -p5000)&
+bid=$!
+
+for num in {1..100}
+do
+  mkfifo input_${num}
+  (TRACE_HASH=${HASH} ./tools/dhtnode -b 127.0.0.1:5000 < input_${num})&
+  pi=$!
+  echo "Launching dhtnode with $pi, trace $HASH"
+  pids+=($pi)
+done
+
+echo "Wait for put (2 min to get a similar routing table)"
+sleep 120
+
+echo "Put with 1"
+echo "p ${HASH} 1" > input_1
+
+echo "Wait for get (1 min)"
+sleep 60
+
+for num in {2..100}
+do
+  echo "Get with $num"
+  echo "g ${HASH}" > input_${num}
+done
+
+echo "Wait to finish all get"
+sleep 20
+
+for pi in "${pids[@]}"
+do
+  kill -9 ${pi}
+done
+kill -9 ${bid}
+
+rm -rf output output_sorted
+
+for f in /tmp/*.trace;
+do
+    grep "###" $f | tail -n 1 | sed --expression 's/###//g' >> output
+done
+
+cat output | sort > output_sorted
\ No newline at end of file
-- 
2.29.2

