{
  "comments": [
    {
      "key": {
        "uuid": "a255729e_e5cf5a4a",
        "filename": "src/plugin/jamipluginmanager.cpp",
        "patchSetId": 7
      },
      "lineNbr": 596,
      "author": {
        "id": 5
      },
      "writtenOn": "2020-08-25T19:54:38Z",
      "side": 1,
      "message": "MINOR SonarQube violation:\n\n\n\u0027find_last_of\u0027 called with a string literal consisting of a single character; consider using the more effective overload accepting a character\n\n\nRead more: https://sonar-jami.savoirfairelinux.net/coding_rules#rule_key\u003dClangTidy%3Aperformance-faster-string-find",
      "revId": "aef2f4fb8e1758210a7a87c8b435c24c87e22a9d",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64a0d31c_86d5bbb2",
        "filename": "src/plugin/jamipluginmanager.cpp",
        "patchSetId": 7
      },
      "lineNbr": 636,
      "author": {
        "id": 5
      },
      "writtenOn": "2020-08-25T19:54:38Z",
      "side": 1,
      "message": "MINOR SonarQube violation:\n\n\nstring concatenation results in allocation of unnecessary temporary strings; consider using \u0027operator+\u003d\u0027 or \u0027string::append()\u0027 instead\n\n\nRead more: https://sonar-jami.savoirfairelinux.net/coding_rules#rule_key\u003dClangTidy%3Aperformance-inefficient-string-concatenation",
      "revId": "aef2f4fb8e1758210a7a87c8b435c24c87e22a9d",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a",
      "unresolved": false
    }
  ]
}