{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "24cbd9c9_0f591c1c",
        "filename": "src/ice_transport.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1682,
      "author": {
        "id": 6
      },
      "writtenOn": "2022-02-11T22:29:00Z",
      "side": 1,
      "message": "Condition variables avoid to wait more than needed on a condition, which is the case when using sleep_for. The current code is the idiomatic C++ way to optimally block waiting for a condition.\n\nWith this change, we would always wait at least 500ms before checking the condition, and then wait for blocks of 500ms until the condition is met, which is suboptimal and would lead to user-perceivable delays.\n\nhttps://en.cppreference.com/w/cpp/thread/condition_variable/wait_until\nA condition variable always check the condition before waiting.\n\n(Note that, when possible, when cv.notify_*() is used, the corresponding mutex should be locked to avoid race conditions.)",
      "range": {
        "startLine": 1668,
        "startChar": 4,
        "endLine": 1682,
        "endChar": 27
      },
      "revId": "3dbfe0037eefc867c8a4e8571c2d4f5114a18f94",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1444a6a_9801b1bc",
        "filename": "src/ice_transport.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1682,
      "author": {
        "id": 919
      },
      "writtenOn": "2022-02-11T22:59:52Z",
      "side": 1,
      "message": "The thing is that it\u0027s possible for the signal to be lost and thus we\u0027re waiting for the whole timeout (35 seconds for sipcall).  I think that it\u0027s best to wait 500 ms more than needed than 35 seconds.  500 ms might be a too huge value, it can be reduce to 1ms and I don\u0027t think there would be noticeable delays, but at least it would avoid the race condition for waiting 35 seconds, which is definitely a problem IMO.\n\nMaybe the solution would be to re-architecture the class instead.",
      "parentUuid": "24cbd9c9_0f591c1c",
      "range": {
        "startLine": 1668,
        "startChar": 4,
        "endLine": 1682,
        "endChar": 27
      },
      "revId": "3dbfe0037eefc867c8a4e8571c2d4f5114a18f94",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b067023_1949533f",
        "filename": "src/ice_transport.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1682,
      "author": {
        "id": 6
      },
      "writtenOn": "2022-02-11T23:12:20Z",
      "side": 1,
      "message": "Reducing the wait would cause unnecessary cpu wakeups, while still incurring unneeded delays compared to using a condition variable.\n\nIf \"the signal is lost\", that\u0027s a bug that we can probably fix without removing the condition variable, the optimal and idiomatic way to wait on a condition.\nWhat\u0027s the context/condition of the bug ?\nMaybe this could be fixed by making sure iceMutex_ is always locked when notify_one/all() is called, and that notify is called at the right place.",
      "parentUuid": "a1444a6a_9801b1bc",
      "range": {
        "startLine": 1668,
        "startChar": 4,
        "endLine": 1682,
        "endChar": 27
      },
      "revId": "3dbfe0037eefc867c8a4e8571c2d4f5114a18f94",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fdc76443_76380700",
        "filename": "src/ice_transport.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1682,
      "author": {
        "id": 919
      },
      "writtenOn": "2022-02-12T04:01:00Z",
      "side": 1,
      "message": "I agree with you that the condition variable is the best solution here.  However, the current synchronization mechanism is fundamentally broken except if IceTransport::Impl::onComplete is called periodically, which I\u0027m not sure.\n\nIf we are certain that this assumption hold, then yes we can use the condition variable if we lock prior to signal.",
      "parentUuid": "9b067023_1949533f",
      "range": {
        "startLine": 1668,
        "startChar": 4,
        "endLine": 1682,
        "endChar": 27
      },
      "revId": "3dbfe0037eefc867c8a4e8571c2d4f5114a18f94",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bfba21bc_d9eb0dda",
        "filename": "src/ice_transport.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1682,
      "author": {
        "id": 919
      },
      "writtenOn": "2022-02-14T14:41:28Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "fdc76443_76380700",
      "range": {
        "startLine": 1668,
        "startChar": 4,
        "endLine": 1682,
        "endChar": 27
      },
      "revId": "3dbfe0037eefc867c8a4e8571c2d4f5114a18f94",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a"
    }
  ]
}