#!/usr/bin/env python3

import argparse
from datetime import datetime

import bt2

class Thread:

    def __init__(self):
        self.signals = []

class Signal:

    def __init__(self, event):
        self.stype     = event["signal_type"]
        self.callbacks = []

    def __str__(self):
        return "{}".format(self.stype)

class Callback():

    def __init__(self, begin):
        self.source = "{}:{}".format(begin.event["source_filename"],
                                     begin.event["source_line"])
        self.beg    = begin
        self.elapse = -1
        self.name   = ""

    def end(self, end):
        self.elapse = (end.default_clock_snapshot.ns_from_origin -
                       self.beg.default_clock_snapshot.ns_from_origin) / 1E3

def print_timeline(thread):
    for s in thread.signals:
        print(f"\t{s}")
        print("\t\t{:<30s}{:<15}".format("callback", "duration (Âµs)"))
        for cb in s.callbacks:
            print("\t\t{:<30s}{:<15}".format(cb.source, cb.elapse))
        print("")

def main(args):

    filter_tid = args.tid
    threads   = {}
    prefix      = "jami:emit_signal"

    for msg in bt2.TraceCollectionMessageIterator(args.path[0]):

        if type(msg) is bt2._EventMessageConst:

            name = msg.event.name

            if not name.startswith(prefix):
                continue

            if filter_tid > 0 and msg.event["vtid"] != filter_tid:
                continue

            tid = msg.event["vtid"]

            if tid not in threads:
                threads[tid] = Thread()

            thread = threads[tid]

            signals = thread.signals

            name = name[len(prefix):]

            if name == "":
                signals.append(Signal(msg.event))

            elif name == "_begin_callback":
                signals[-1].callbacks.append(Callback(msg))

            elif name == "_end_callback":
                signals[-1].callbacks[-1].end(msg)

    for tid, thread in threads.items():
        print(f"Thread: {tid}")
        print_timeline(thread)

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="Show signals timeline.")

    parser.add_argument("path", metavar="TRACE", type=str, nargs=1)
    parser.add_argument("tid", metavar="TID", type=int, nargs='?', default=-1)

    args = parser.parse_args()

    main(args)
